/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface YieldMathWrapperInterface extends ethers.utils.Interface {
  functions: {
    "daiInForFYDaiOut(uint128,uint128,uint128,uint128,int128,int128)": FunctionFragment;
    "daiOutForFYDaiIn(uint128,uint128,uint128,uint128,int128,int128)": FunctionFragment;
    "fyDaiInForDaiOut(uint128,uint128,uint128,uint128,int128,int128)": FunctionFragment;
    "fyDaiOutForDaiIn(uint128,uint128,uint128,uint128,int128,int128)": FunctionFragment;
    "log_2(uint128)": FunctionFragment;
    "pow(uint128,uint128,uint128)": FunctionFragment;
    "pow_2(uint128)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "daiInForFYDaiOut",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "daiOutForFYDaiIn",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fyDaiInForDaiOut",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fyDaiOutForDaiIn",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "log_2", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "pow",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pow_2", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "daiInForFYDaiOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daiOutForFYDaiIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fyDaiInForDaiOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fyDaiOutForDaiIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "log_2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pow_2", data: BytesLike): Result;

  events: {};
}

export class YieldMathWrapper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: YieldMathWrapperInterface;

  functions: {
    daiInForFYDaiOut(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "daiInForFYDaiOut(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    daiOutForFYDaiIn(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "daiOutForFYDaiIn(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fyDaiInForDaiOut(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "fyDaiInForDaiOut(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fyDaiOutForDaiIn(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "fyDaiOutForDaiIn(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    log_2(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    "log_2(uint128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    pow(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    "pow(uint128,uint128,uint128)"(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    pow_2(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    "pow_2(uint128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;
  };

  daiInForFYDaiOut(
    daiReserves: BigNumberish,
    fyDaiReserves: BigNumberish,
    fyDaiAmount: BigNumberish,
    timeTillMaturity: BigNumberish,
    k: BigNumberish,
    g: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "daiInForFYDaiOut(uint128,uint128,uint128,uint128,int128,int128)"(
    daiReserves: BigNumberish,
    fyDaiReserves: BigNumberish,
    fyDaiAmount: BigNumberish,
    timeTillMaturity: BigNumberish,
    k: BigNumberish,
    g: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  daiOutForFYDaiIn(
    daiReserves: BigNumberish,
    fyDaiReserves: BigNumberish,
    fyDaiAmount: BigNumberish,
    timeTillMaturity: BigNumberish,
    k: BigNumberish,
    g: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "daiOutForFYDaiIn(uint128,uint128,uint128,uint128,int128,int128)"(
    daiReserves: BigNumberish,
    fyDaiReserves: BigNumberish,
    fyDaiAmount: BigNumberish,
    timeTillMaturity: BigNumberish,
    k: BigNumberish,
    g: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fyDaiInForDaiOut(
    daiReserves: BigNumberish,
    fyDaiReserves: BigNumberish,
    daiAmount: BigNumberish,
    timeTillMaturity: BigNumberish,
    k: BigNumberish,
    g: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "fyDaiInForDaiOut(uint128,uint128,uint128,uint128,int128,int128)"(
    daiReserves: BigNumberish,
    fyDaiReserves: BigNumberish,
    daiAmount: BigNumberish,
    timeTillMaturity: BigNumberish,
    k: BigNumberish,
    g: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fyDaiOutForDaiIn(
    daiReserves: BigNumberish,
    fyDaiReserves: BigNumberish,
    daiAmount: BigNumberish,
    timeTillMaturity: BigNumberish,
    k: BigNumberish,
    g: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "fyDaiOutForDaiIn(uint128,uint128,uint128,uint128,int128,int128)"(
    daiReserves: BigNumberish,
    fyDaiReserves: BigNumberish,
    daiAmount: BigNumberish,
    timeTillMaturity: BigNumberish,
    k: BigNumberish,
    g: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  log_2(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  "log_2(uint128)"(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  pow(
    x: BigNumberish,
    y: BigNumberish,
    z: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  "pow(uint128,uint128,uint128)"(
    x: BigNumberish,
    y: BigNumberish,
    z: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  pow_2(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  "pow_2(uint128)"(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  callStatic: {
    daiInForFYDaiOut(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "daiInForFYDaiOut(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daiOutForFYDaiIn(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "daiOutForFYDaiIn(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fyDaiInForDaiOut(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fyDaiInForDaiOut(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fyDaiOutForDaiIn(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fyDaiOutForDaiIn(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    log_2(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    "log_2(uint128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    pow(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    "pow(uint128,uint128,uint128)"(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    pow_2(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    "pow_2(uint128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;
  };

  filters: {};

  estimateGas: {
    daiInForFYDaiOut(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "daiInForFYDaiOut(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daiOutForFYDaiIn(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "daiOutForFYDaiIn(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fyDaiInForDaiOut(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fyDaiInForDaiOut(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fyDaiOutForDaiIn(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fyDaiOutForDaiIn(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    log_2(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "log_2(uint128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pow(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pow(uint128,uint128,uint128)"(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pow_2(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "pow_2(uint128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    daiInForFYDaiOut(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "daiInForFYDaiOut(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daiOutForFYDaiIn(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "daiOutForFYDaiIn(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      fyDaiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fyDaiInForDaiOut(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fyDaiInForDaiOut(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fyDaiOutForDaiIn(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fyDaiOutForDaiIn(uint128,uint128,uint128,uint128,int128,int128)"(
      daiReserves: BigNumberish,
      fyDaiReserves: BigNumberish,
      daiAmount: BigNumberish,
      timeTillMaturity: BigNumberish,
      k: BigNumberish,
      g: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    log_2(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "log_2(uint128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pow(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pow(uint128,uint128,uint128)"(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pow_2(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pow_2(uint128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
