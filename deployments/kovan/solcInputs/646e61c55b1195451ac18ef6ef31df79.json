{
  "language": "Solidity",
  "sources": {
    "contracts/helpers/DecimalMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.5;\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n\n/// @dev Implements simple fixed point math mul and div operations for 27 decimals.\ncontract DecimalMath {\n    using SafeMath for uint256;\n\n    uint256 constant public UNIT = 1e27;\n\n    /// @dev Multiplies x and y, assuming they are both fixed point with 27 digits.\n    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x.mul(y).div(UNIT);\n    }\n\n    /// @dev Divides x between y, assuming they are both fixed point with 27 digits.\n    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x.mul(UNIT).div(y);\n    }\n\n    /// @dev Multiplies x and y, rounding up to the closest representable number.\n    /// Assumes x and y are both fixed point with `decimals` digits.\n    function muldrup(uint256 x, uint256 y) internal pure returns (uint256)\n    {\n        uint256 z = x.mul(y);\n        return z.mod(UNIT) == 0 ? z.div(UNIT) : z.div(UNIT).add(1);\n    }\n\n    /// @dev Divides x between y, rounding up to the closest representable number.\n    /// Assumes x and y are both fixed point with `decimals` digits.\n    function divdrup(uint256 x, uint256 y) internal pure returns (uint256)\n    {\n        uint256 z = x.mul(UNIT);\n        return z.mod(y) == 0 ? z.div(y) : z.div(y).add(1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.5;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./YieldMath.sol\";\nimport \"./helpers/Delegable.sol\";\nimport \"./helpers/SafeCast.sol\";\nimport \"./helpers/ERC20Permit.sol\";\nimport \"./interfaces/IFYDai.sol\";\nimport \"./interfaces/IPool.sol\";\n\n\n/// @dev The Pool contract exchanges Dai for fyDai at a price defined by a specific formula.\ncontract Pool is IPool, Delegable(), ERC20Permit {\n    using SafeMath for uint256;\n\n    event Trade(uint256 maturity, address indexed from, address indexed to, int256 daiTokens, int256 fyDaiTokens);\n    event Liquidity(uint256 maturity, address indexed from, address indexed to, int256 daiTokens, int256 fyDaiTokens, int256 poolTokens);\n\n    int128 constant public k = int128(uint256((1 << 64)) / 126144000); // 1 / Seconds in 4 years, in 64.64\n    int128 constant public g1 = int128(uint256((950 << 64)) / 1000); // To be used when selling Dai to the pool. All constants are `ufixed`, to divide them they must be converted to uint256\n    int128 constant public g2 = int128(uint256((1000 << 64)) / 950); // To be used when selling fyDai to the pool. All constants are `ufixed`, to divide them they must be converted to uint256\n    uint128 immutable public maturity;\n\n    IERC20 public override dai;\n    IFYDai public override fyDai;\n\n    constructor(address dai_, address fyDai_, string memory name_, string memory symbol_)\n        public\n        ERC20Permit(name_, symbol_)\n    {\n        dai = IERC20(dai_);\n        fyDai = IFYDai(fyDai_);\n\n        maturity = toUint128(fyDai.maturity());\n    }\n\n    /// @dev Trading can only be done before maturity\n    modifier beforeMaturity() {\n        require(\n            block.timestamp < maturity,\n            \"Pool: Too late\"\n        );\n        _;\n    }\n\n    /// @dev Overflow-protected addition, from OpenZeppelin\n    function add(uint128 a, uint128 b)\n        internal pure returns (uint128)\n    {\n        uint128 c = a + b;\n        require(c >= a, \"Pool: Dai reserves too high\");\n\n        return c;\n    }\n\n    /// @dev Overflow-protected substraction, from OpenZeppelin\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\n        require(b <= a, \"Pool: fyDai reserves too low\");\n        uint128 c = a - b;\n\n        return c;\n    }\n\n    /// @dev Safe casting from uint256 to uint128\n    function toUint128(uint256 x) internal pure returns(uint128) {\n        require(\n            x <= type(uint128).max,\n            \"Pool: Cast overflow\"\n        );\n        return uint128(x);\n    }\n\n    /// @dev Safe casting from uint256 to int256\n    function toInt256(uint256 x) internal pure returns(int256) {\n        require(\n            x <= uint256(type(int256).max),\n            \"Pool: Cast overflow\"\n        );\n        return int256(x);\n    }\n\n    /// @dev Mint initial liquidity tokens.\n    /// The liquidity provider needs to have called `dai.approve`\n    /// @param daiIn The initial Dai liquidity to provide.\n    function init(uint256 daiIn)\n        internal\n        beforeMaturity\n        returns (uint256)\n    {\n        require(\n            totalSupply() == 0,\n            \"Pool: Already initialized\"\n        );\n        // no fyDai transferred, because initial fyDai deposit is entirely virtual\n        dai.transferFrom(msg.sender, address(this), daiIn);\n        _mint(msg.sender, daiIn);\n        emit Liquidity(maturity, msg.sender, msg.sender, -toInt256(daiIn), 0, toInt256(daiIn));\n\n        return daiIn;\n    }\n\n    /// @dev Mint liquidity tokens in exchange for adding dai and fyDai\n    /// The liquidity provider needs to have called `dai.approve` and `fyDai.approve`.\n    /// @param from Wallet providing the dai and fyDai. Must have approved the operator with `pool.addDelegate(operator)`.\n    /// @param to Wallet receiving the minted liquidity tokens.\n    /// @param daiOffered Amount of `dai` being invested, an appropriate amount of `fyDai` to be invested alongside will be calculated and taken by this function from the caller.\n    /// @return The amount of liquidity tokens minted.\n    function mint(address from, address to, uint256 daiOffered)\n        external override\n        onlyHolderOrDelegate(from, \"Pool: Only Holder Or Delegate\")\n        returns (uint256)\n    {\n        uint256 supply = totalSupply();\n        if (supply == 0) return init(daiOffered);\n\n        uint256 daiReserves = dai.balanceOf(address(this));\n        // use the actual reserves rather than the virtual reserves\n        uint256 fyDaiReserves = fyDai.balanceOf(address(this));\n        uint256 tokensMinted = supply.mul(daiOffered).div(daiReserves);\n        uint256 fyDaiRequired = fyDaiReserves.mul(tokensMinted).div(supply);\n\n        require(daiReserves.add(daiOffered) <= type(uint128).max); // fyDaiReserves can't go over type(uint128).max\n        require(supply.add(fyDaiReserves.add(fyDaiRequired)) <= type(uint128).max); // fyDaiReserves can't go over type(uint128).max\n\n        require(dai.transferFrom(from, address(this), daiOffered));\n        require(fyDai.transferFrom(from, address(this), fyDaiRequired));\n        _mint(to, tokensMinted);\n        emit Liquidity(maturity, from, to, -toInt256(daiOffered), -toInt256(fyDaiRequired), toInt256(tokensMinted));\n\n        return tokensMinted;\n    }\n\n    /// @dev Mint liquidity tokens in exchange for adding only dai\n    /// The liquidity provider needs to have called `dai.approve`.\n    /// @param from Wallet providing the dai and fyDai. Must have approved the operator with `pool.addDelegate(operator)`.\n    /// @param to Wallet receiving the minted liquidity tokens.\n    /// @param fyDaiToBuy Amount of `fyDai` being bought in the Pool, from this we calculate how much Dai it will be taken in.\n    /// @return The amount of liquidity tokens minted.\n    function mintWithDai(address from, address to, uint256 fyDaiToBuy)\n        external\n        onlyHolderOrDelegate(from, \"Pool: Only Holder Or Delegate\")\n        returns (uint256, uint256)\n    {\n        uint256 supply = totalSupply();\n        require(supply > 0, \"Pool: Use mint first\");\n\n        uint256 daiReserves = dai.balanceOf(address(this));\n        uint256 fyDaiReserves = fyDai.balanceOf(address(this));\n\n        uint256 daiIn = buyFYDaiPreview(toUint128(fyDaiToBuy)); // This is a virtual buy\n\n        require(fyDaiReserves >= fyDaiToBuy, \"Pool: Not enough fyDai\");\n        uint256 tokensMinted = supply.mul(fyDaiToBuy).div(fyDaiReserves.sub(fyDaiToBuy));\n        daiIn = daiReserves.add(daiIn).mul(tokensMinted).div(supply);\n        require(daiReserves.add(daiIn) <= type(uint128).max, \"Pool: Too much Dai\");\n\n        require(dai.transferFrom(from, address(this), daiIn), \"Pool: Dai transfer failed\");\n        _mint(to, tokensMinted);\n        emit Liquidity(maturity, from, to, -toInt256(daiIn), 0, toInt256(tokensMinted));\n\n        return (daiIn, tokensMinted);\n    }\n\n    /// @dev Burn liquidity tokens in exchange for dai and fyDai.\n    /// The liquidity provider needs to have called `pool.approve`.\n    /// @param from Wallet providing the liquidity tokens. Must have approved the operator with `pool.addDelegate(operator)`.\n    /// @param to Wallet receiving the dai and fyDai.\n    /// @param tokensBurned Amount of liquidity tokens being burned.\n    /// @return The amount of reserve tokens returned (daiTokens, fyDaiTokens).\n    function burn(address from, address to, uint256 tokensBurned)\n        external override\n        onlyHolderOrDelegate(from, \"Pool: Only Holder Or Delegate\")\n        returns (uint256, uint256)\n    {\n        uint256 supply = totalSupply();\n        uint256 daiReserves = dai.balanceOf(address(this));\n        // use the actual reserves rather than the virtual reserves\n        uint256 daiOut;\n        uint256 fyDaiOut;\n        { // avoiding stack too deep\n            uint256 fyDaiReserves = fyDai.balanceOf(address(this));\n            daiOut = tokensBurned.mul(daiReserves).div(supply);\n            fyDaiOut = tokensBurned.mul(fyDaiReserves).div(supply);\n        }\n\n        _burn(from, tokensBurned); // TODO: Fix to check allowance\n        dai.transfer(to, daiOut);\n        fyDai.transfer(to, fyDaiOut);\n        emit Liquidity(maturity, from, to, toInt256(daiOut), toInt256(fyDaiOut), -toInt256(tokensBurned));\n\n        return (daiOut, fyDaiOut);\n    }\n\n    /// @dev Burn liquidity tokens in exchange for dai.\n    /// The liquidity provider needs to have called `pool.approve`.\n    /// @param from Wallet providing the liquidity tokens. Must have approved the operator with `pool.addDelegate(operator)`.\n    /// @param to Wallet receiving the dai and fyDai.\n    /// @param tokensBurned Amount of liquidity tokens being burned.\n    /// @return The amount of dai tokens returned.\n    function burnForDai(address from, address to, uint256 tokensBurned)\n        external\n        onlyHolderOrDelegate(from, \"Pool: Only Holder Or Delegate\")\n        returns (uint256)\n    {\n        uint256 supply = totalSupply();\n        uint256 daiReserves = dai.balanceOf(address(this));\n        // use the actual reserves rather than the virtual reserves\n        uint256 daiOut;\n        uint256 fyDaiObtained;\n        { // avoiding stack too deep\n            uint256 fyDaiReserves = fyDai.balanceOf(address(this));\n            daiOut = tokensBurned.mul(daiReserves).div(supply);\n            fyDaiObtained = tokensBurned.mul(fyDaiReserves).div(supply);\n        }\n\n        daiOut = daiOut.add(\n            YieldMath.daiOutForFYDaiIn(                            // This is a virtual sell\n                toUint128(daiReserves.sub(daiOut)),                // Real reserves, minus virtual burn\n                sub(getFYDaiReserves(), toUint128(fyDaiObtained)), // Virtual reserves, minus virtual burn\n                toUint128(fyDaiObtained),                          // Sell the virtual fyDai obtained\n                toUint128(maturity - block.timestamp),             // This can't be called after maturity\n                k,\n                g2\n            )\n        );\n\n        _burn(from, tokensBurned); // TODO: Fix to check allowance\n        dai.transfer(to, daiOut);\n        emit Liquidity(maturity, from, to, toInt256(daiOut), 0, -toInt256(tokensBurned));\n\n        return daiOut;\n    }\n\n    /// @dev Sell Dai for fyDai\n    /// The trader needs to have called `dai.approve`\n    /// @param from Wallet providing the dai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\n    /// @param to Wallet receiving the fyDai being bought\n    /// @param daiIn Amount of dai being sold that will be taken from the user's wallet\n    /// @return Amount of fyDai that will be deposited on `to` wallet\n    function sellDai(address from, address to, uint128 daiIn)\n        external override\n        onlyHolderOrDelegate(from, \"Pool: Only Holder Or Delegate\")\n        returns(uint128)\n    {\n        uint128 fyDaiOut = sellDaiPreview(daiIn);\n\n        dai.transferFrom(from, address(this), daiIn);\n        fyDai.transfer(to, fyDaiOut);\n        emit Trade(maturity, from, to, -toInt256(daiIn), toInt256(fyDaiOut));\n\n        return fyDaiOut;\n    }\n\n    /// @dev Returns how much fyDai would be obtained by selling `daiIn` dai\n    /// @param daiIn Amount of dai hypothetically sold.\n    /// @return Amount of fyDai hypothetically bought.\n    function sellDaiPreview(uint128 daiIn)\n        public view override\n        beforeMaturity\n        returns(uint128)\n    {\n        uint128 daiReserves = getDaiReserves();\n        uint128 fyDaiReserves = getFYDaiReserves();\n\n        uint128 fyDaiOut = YieldMath.fyDaiOutForDaiIn(\n            daiReserves,\n            fyDaiReserves,\n            daiIn,\n            toUint128(maturity - block.timestamp), // This can't be called after maturity\n            k,\n            g1\n        );\n\n        require(\n            sub(fyDaiReserves, fyDaiOut) >= add(daiReserves, daiIn),\n            \"Pool: fyDai reserves too low\"\n        );\n\n        return fyDaiOut;\n    }\n\n    /// @dev Buy Dai for fyDai\n    /// The trader needs to have called `fyDai.approve`\n    /// @param from Wallet providing the fyDai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\n    /// @param to Wallet receiving the dai being bought\n    /// @param daiOut Amount of dai being bought that will be deposited in `to` wallet\n    /// @return Amount of fyDai that will be taken from `from` wallet\n    function buyDai(address from, address to, uint128 daiOut)\n        external override\n        onlyHolderOrDelegate(from, \"Pool: Only Holder Or Delegate\")\n        returns(uint128)\n    {\n        uint128 fyDaiIn = buyDaiPreview(daiOut);\n\n        fyDai.transferFrom(from, address(this), fyDaiIn);\n        dai.transfer(to, daiOut);\n        emit Trade(maturity, from, to, toInt256(daiOut), -toInt256(fyDaiIn));\n\n        return fyDaiIn;\n    }\n\n    /// @dev Returns how much fyDai would be required to buy `daiOut` dai.\n    /// @param daiOut Amount of dai hypothetically desired.\n    /// @return Amount of fyDai hypothetically required.\n    function buyDaiPreview(uint128 daiOut)\n        public view override\n        beforeMaturity\n        returns(uint128)\n    {\n        return YieldMath.fyDaiInForDaiOut(\n            getDaiReserves(),\n            getFYDaiReserves(),\n            daiOut,\n            toUint128(maturity - block.timestamp), // This can't be called after maturity\n            k,\n            g2\n        );\n    }\n\n    /// @dev Sell fyDai for Dai\n    /// The trader needs to have called `fyDai.approve`\n    /// @param from Wallet providing the fyDai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\n    /// @param to Wallet receiving the dai being bought\n    /// @param fyDaiIn Amount of fyDai being sold that will be taken from the user's wallet\n    /// @return Amount of dai that will be deposited on `to` wallet\n    function sellFYDai(address from, address to, uint128 fyDaiIn)\n        external override\n        onlyHolderOrDelegate(from, \"Pool: Only Holder Or Delegate\")\n        returns(uint128)\n    {\n        uint128 daiOut = sellFYDaiPreview(fyDaiIn);\n\n        fyDai.transferFrom(from, address(this), fyDaiIn);\n        dai.transfer(to, daiOut);\n        emit Trade(maturity, from, to, toInt256(daiOut), -toInt256(fyDaiIn));\n\n        return daiOut;\n    }\n\n    /// @dev Returns how much dai would be obtained by selling `fyDaiIn` fyDai.\n    /// @param fyDaiIn Amount of fyDai hypothetically sold.\n    /// @return Amount of Dai hypothetically bought.\n    function sellFYDaiPreview(uint128 fyDaiIn)\n        public view override\n        beforeMaturity\n        returns(uint128)\n    {\n        return YieldMath.daiOutForFYDaiIn(\n            getDaiReserves(),\n            getFYDaiReserves(),\n            fyDaiIn,\n            toUint128(maturity - block.timestamp), // This can't be called after maturity\n            k,\n            g2\n        );\n    }\n\n    /// @dev Buy fyDai for dai\n    /// The trader needs to have called `dai.approve`\n    /// @param from Wallet providing the dai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\n    /// @param to Wallet receiving the fyDai being bought\n    /// @param fyDaiOut Amount of fyDai being bought that will be deposited in `to` wallet\n    /// @return Amount of dai that will be taken from `from` wallet\n    function buyFYDai(address from, address to, uint128 fyDaiOut)\n        external override\n        onlyHolderOrDelegate(from, \"Pool: Only Holder Or Delegate\")\n        returns(uint128)\n    {\n        uint128 daiIn = buyFYDaiPreview(fyDaiOut);\n\n        dai.transferFrom(from, address(this), daiIn);\n        fyDai.transfer(to, fyDaiOut);\n        emit Trade(maturity, from, to, -toInt256(daiIn), toInt256(fyDaiOut));\n\n        return daiIn;\n    }\n\n\n    /// @dev Returns how much dai would be required to buy `fyDaiOut` fyDai.\n    /// @param fyDaiOut Amount of fyDai hypothetically desired.\n    /// @return Amount of Dai hypothetically required.\n    function buyFYDaiPreview(uint128 fyDaiOut)\n        public view override\n        beforeMaturity\n        returns(uint128)\n    {\n        uint128 daiReserves = getDaiReserves();\n        uint128 fyDaiReserves = getFYDaiReserves();\n\n        uint128 daiIn = YieldMath.daiInForFYDaiOut(\n            daiReserves,\n            fyDaiReserves,\n            fyDaiOut,\n            toUint128(maturity - block.timestamp), // This can't be called after maturity\n            k,\n            g1\n        );\n\n        require(\n            sub(fyDaiReserves, fyDaiOut) >= add(daiReserves, daiIn),\n            \"Pool: fyDai reserves too low\"\n        );\n\n        return daiIn;\n    }\n\n    /// @dev Returns the \"virtual\" fyDai reserves\n    function getFYDaiReserves()\n        public view override\n        returns(uint128)\n    {\n        return toUint128(fyDai.balanceOf(address(this)).add(totalSupply()));\n    }\n\n    /// @dev Returns the Dai reserves\n    function getDaiReserves()\n        public view override\n        returns(uint128)\n    {\n        return toUint128(dai.balanceOf(address(this)));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/YieldMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.7.5;\r\n\r\nimport \"./Math64x64.sol\";\r\n\r\nlibrary Exp64x64 {\r\n  /**\r\n   * Raise given number x into power specified as a simple fraction y/z and then\r\n   * multiply the result by the normalization factor 2^(128 * (1 - y/z)).\r\n   * Revert if z is zero, or if both x and y are zeros.\r\n   *\r\n   * @param x number to raise into given power y/z\r\n   * @param y numerator of the power to raise x into\r\n   * @param z denominator of the power to raise x into\r\n   * @return x raised into power y/z and then multiplied by 2^(128 * (1 - y/z))\r\n   */\r\n  function pow(uint128 x, uint128 y, uint128 z)\r\n  internal pure returns(uint128) {\r\n    require(z != 0);\r\n\r\n    if(x == 0) {\r\n      require(y != 0);\r\n      return 0;\r\n    } else {\r\n      uint256 l =\r\n        uint256(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - log_2(x)) * y / z;\r\n      if(l > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) return 0;\r\n      else return pow_2(uint128(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - l));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate base 2 logarithm of an unsigned 128-bit integer number.  Revert\r\n   * in case x is zero.\r\n   *\r\n   * @param x number to calculate base 2 logarithm of\r\n   * @return base 2 logarithm of x, multiplied by 2^121\r\n   */\r\n  function log_2(uint128 x)\r\n  internal pure returns(uint128) {\r\n    require(x != 0);\r\n\r\n    uint b = x;\r\n\r\n    uint l = 0xFE000000000000000000000000000000;\r\n\r\n    if(b < 0x10000000000000000) {l -= 0x80000000000000000000000000000000; b <<= 64;}\r\n    if(b < 0x1000000000000000000000000) {l -= 0x40000000000000000000000000000000; b <<= 32;}\r\n    if(b < 0x10000000000000000000000000000) {l -= 0x20000000000000000000000000000000; b <<= 16;}\r\n    if(b < 0x1000000000000000000000000000000) {l -= 0x10000000000000000000000000000000; b <<= 8;}\r\n    if(b < 0x10000000000000000000000000000000) {l -= 0x8000000000000000000000000000000; b <<= 4;}\r\n    if(b < 0x40000000000000000000000000000000) {l -= 0x4000000000000000000000000000000; b <<= 2;}\r\n    if(b < 0x80000000000000000000000000000000) {l -= 0x2000000000000000000000000000000; b <<= 1;}\r\n\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000;} /*\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2;}\r\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) l |= 0x1; */\r\n\r\n    return uint128(l);\r\n  }\r\n\r\n  /**\r\n   * Calculate 2 raised into given power.\r\n   *\r\n   * @param x power to raise 2 into, multiplied by 2^121\r\n   * @return 2 raised into given power\r\n   */\r\n  function pow_2(uint128 x)\r\n  internal pure returns(uint128) {\r\n    uint r = 0x80000000000000000000000000000000;\r\n    if(x & 0x1000000000000000000000000000000 > 0) r = r * 0xb504f333f9de6484597d89b3754abe9f >> 127;\r\n    if(x & 0x800000000000000000000000000000 > 0) r = r * 0x9837f0518db8a96f46ad23182e42f6f6 >> 127;\r\n    if(x & 0x400000000000000000000000000000 > 0) r = r * 0x8b95c1e3ea8bd6e6fbe4628758a53c90 >> 127;\r\n    if(x & 0x200000000000000000000000000000 > 0) r = r * 0x85aac367cc487b14c5c95b8c2154c1b2 >> 127;\r\n    if(x & 0x100000000000000000000000000000 > 0) r = r * 0x82cd8698ac2ba1d73e2a475b46520bff >> 127;\r\n    if(x & 0x80000000000000000000000000000 > 0) r = r * 0x8164d1f3bc0307737be56527bd14def4 >> 127;\r\n    if(x & 0x40000000000000000000000000000 > 0) r = r * 0x80b1ed4fd999ab6c25335719b6e6fd20 >> 127;\r\n    if(x & 0x20000000000000000000000000000 > 0) r = r * 0x8058d7d2d5e5f6b094d589f608ee4aa2 >> 127;\r\n    if(x & 0x10000000000000000000000000000 > 0) r = r * 0x802c6436d0e04f50ff8ce94a6797b3ce >> 127;\r\n    if(x & 0x8000000000000000000000000000 > 0) r = r * 0x8016302f174676283690dfe44d11d008 >> 127;\r\n    if(x & 0x4000000000000000000000000000 > 0) r = r * 0x800b179c82028fd0945e54e2ae18f2f0 >> 127;\r\n    if(x & 0x2000000000000000000000000000 > 0) r = r * 0x80058baf7fee3b5d1c718b38e549cb93 >> 127;\r\n    if(x & 0x1000000000000000000000000000 > 0) r = r * 0x8002c5d00fdcfcb6b6566a58c048be1f >> 127;\r\n    if(x & 0x800000000000000000000000000 > 0) r = r * 0x800162e61bed4a48e84c2e1a463473d9 >> 127;\r\n    if(x & 0x400000000000000000000000000 > 0) r = r * 0x8000b17292f702a3aa22beacca949013 >> 127;\r\n    if(x & 0x200000000000000000000000000 > 0) r = r * 0x800058b92abbae02030c5fa5256f41fe >> 127;\r\n    if(x & 0x100000000000000000000000000 > 0) r = r * 0x80002c5c8dade4d71776c0f4dbea67d6 >> 127;\r\n    if(x & 0x80000000000000000000000000 > 0) r = r * 0x8000162e44eaf636526be456600bdbe4 >> 127;\r\n    if(x & 0x40000000000000000000000000 > 0) r = r * 0x80000b1721fa7c188307016c1cd4e8b6 >> 127;\r\n    if(x & 0x20000000000000000000000000 > 0) r = r * 0x8000058b90de7e4cecfc487503488bb1 >> 127;\r\n    if(x & 0x10000000000000000000000000 > 0) r = r * 0x800002c5c8678f36cbfce50a6de60b14 >> 127;\r\n    if(x & 0x8000000000000000000000000 > 0) r = r * 0x80000162e431db9f80b2347b5d62e516 >> 127;\r\n    if(x & 0x4000000000000000000000000 > 0) r = r * 0x800000b1721872d0c7b08cf1e0114152 >> 127;\r\n    if(x & 0x2000000000000000000000000 > 0) r = r * 0x80000058b90c1aa8a5c3736cb77e8dff >> 127;\r\n    if(x & 0x1000000000000000000000000 > 0) r = r * 0x8000002c5c8605a4635f2efc2362d978 >> 127;\r\n    if(x & 0x800000000000000000000000 > 0) r = r * 0x800000162e4300e635cf4a109e3939bd >> 127;\r\n    if(x & 0x400000000000000000000000 > 0) r = r * 0x8000000b17217ff81bef9c551590cf83 >> 127;\r\n    if(x & 0x200000000000000000000000 > 0) r = r * 0x800000058b90bfdd4e39cd52c0cfa27c >> 127;\r\n    if(x & 0x100000000000000000000000 > 0) r = r * 0x80000002c5c85fe6f72d669e0e76e411 >> 127;\r\n    if(x & 0x80000000000000000000000 > 0) r = r * 0x8000000162e42ff18f9ad35186d0df28 >> 127;\r\n    if(x & 0x40000000000000000000000 > 0) r = r * 0x80000000b17217f84cce71aa0dcfffe7 >> 127;\r\n    if(x & 0x20000000000000000000000 > 0) r = r * 0x8000000058b90bfc07a77ad56ed22aaa >> 127;\r\n    if(x & 0x10000000000000000000000 > 0) r = r * 0x800000002c5c85fdfc23cdead40da8d6 >> 127;\r\n    if(x & 0x8000000000000000000000 > 0) r = r * 0x80000000162e42fefc25eb1571853a66 >> 127;\r\n    if(x & 0x4000000000000000000000 > 0) r = r * 0x800000000b17217f7d97f692baacded5 >> 127;\r\n    if(x & 0x2000000000000000000000 > 0) r = r * 0x80000000058b90bfbead3b8b5dd254d7 >> 127;\r\n    if(x & 0x1000000000000000000000 > 0) r = r * 0x8000000002c5c85fdf4eedd62f084e67 >> 127;\r\n    if(x & 0x800000000000000000000 > 0) r = r * 0x800000000162e42fefa58aef378bf586 >> 127;\r\n    if(x & 0x400000000000000000000 > 0) r = r * 0x8000000000b17217f7d24a78a3c7ef02 >> 127;\r\n    if(x & 0x200000000000000000000 > 0) r = r * 0x800000000058b90bfbe9067c93e474a6 >> 127;\r\n    if(x & 0x100000000000000000000 > 0) r = r * 0x80000000002c5c85fdf47b8e5a72599f >> 127;\r\n    if(x & 0x80000000000000000000 > 0) r = r * 0x8000000000162e42fefa3bdb315934a2 >> 127;\r\n    if(x & 0x40000000000000000000 > 0) r = r * 0x80000000000b17217f7d1d7299b49c46 >> 127;\r\n    if(x & 0x20000000000000000000 > 0) r = r * 0x8000000000058b90bfbe8e9a8d1c4ea0 >> 127;\r\n    if(x & 0x10000000000000000000 > 0) r = r * 0x800000000002c5c85fdf4745969ea76f >> 127;\r\n    if(x & 0x8000000000000000000 > 0) r = r * 0x80000000000162e42fefa3a0df5373bf >> 127;\r\n    if(x & 0x4000000000000000000 > 0) r = r * 0x800000000000b17217f7d1cff4aac1e1 >> 127;\r\n    if(x & 0x2000000000000000000 > 0) r = r * 0x80000000000058b90bfbe8e7db95a2f1 >> 127;\r\n    if(x & 0x1000000000000000000 > 0) r = r * 0x8000000000002c5c85fdf473e61ae1f8 >> 127;\r\n    if(x & 0x800000000000000000 > 0) r = r * 0x800000000000162e42fefa39f121751c >> 127;\r\n    if(x & 0x400000000000000000 > 0) r = r * 0x8000000000000b17217f7d1cf815bb96 >> 127;\r\n    if(x & 0x200000000000000000 > 0) r = r * 0x800000000000058b90bfbe8e7bec1e0d >> 127;\r\n    if(x & 0x100000000000000000 > 0) r = r * 0x80000000000002c5c85fdf473dee5f17 >> 127;\r\n    if(x & 0x80000000000000000 > 0) r = r * 0x8000000000000162e42fefa39ef5438f >> 127;\r\n    if(x & 0x40000000000000000 > 0) r = r * 0x80000000000000b17217f7d1cf7a26c8 >> 127;\r\n    if(x & 0x20000000000000000 > 0) r = r * 0x8000000000000058b90bfbe8e7bcf4a4 >> 127;\r\n    if(x & 0x10000000000000000 > 0) r = r * 0x800000000000002c5c85fdf473de72a2 >> 127; /*\r\n    if(x & 0x8000000000000000 > 0) r = r * 0x80000000000000162e42fefa39ef3765 >> 127;\r\n    if(x & 0x4000000000000000 > 0) r = r * 0x800000000000000b17217f7d1cf79b37 >> 127;\r\n    if(x & 0x2000000000000000 > 0) r = r * 0x80000000000000058b90bfbe8e7bcd7d >> 127;\r\n    if(x & 0x1000000000000000 > 0) r = r * 0x8000000000000002c5c85fdf473de6b6 >> 127;\r\n    if(x & 0x800000000000000 > 0) r = r * 0x800000000000000162e42fefa39ef359 >> 127;\r\n    if(x & 0x400000000000000 > 0) r = r * 0x8000000000000000b17217f7d1cf79ac >> 127;\r\n    if(x & 0x200000000000000 > 0) r = r * 0x800000000000000058b90bfbe8e7bcd6 >> 127;\r\n    if(x & 0x100000000000000 > 0) r = r * 0x80000000000000002c5c85fdf473de6a >> 127;\r\n    if(x & 0x80000000000000 > 0) r = r * 0x8000000000000000162e42fefa39ef35 >> 127;\r\n    if(x & 0x40000000000000 > 0) r = r * 0x80000000000000000b17217f7d1cf79a >> 127;\r\n    if(x & 0x20000000000000 > 0) r = r * 0x8000000000000000058b90bfbe8e7bcd >> 127;\r\n    if(x & 0x10000000000000 > 0) r = r * 0x800000000000000002c5c85fdf473de6 >> 127;\r\n    if(x & 0x8000000000000 > 0) r = r * 0x80000000000000000162e42fefa39ef3 >> 127;\r\n    if(x & 0x4000000000000 > 0) r = r * 0x800000000000000000b17217f7d1cf79 >> 127;\r\n    if(x & 0x2000000000000 > 0) r = r * 0x80000000000000000058b90bfbe8e7bc >> 127;\r\n    if(x & 0x1000000000000 > 0) r = r * 0x8000000000000000002c5c85fdf473de >> 127;\r\n    if(x & 0x800000000000 > 0) r = r * 0x800000000000000000162e42fefa39ef >> 127;\r\n    if(x & 0x400000000000 > 0) r = r * 0x8000000000000000000b17217f7d1cf7 >> 127;\r\n    if(x & 0x200000000000 > 0) r = r * 0x800000000000000000058b90bfbe8e7b >> 127;\r\n    if(x & 0x100000000000 > 0) r = r * 0x80000000000000000002c5c85fdf473d >> 127;\r\n    if(x & 0x80000000000 > 0) r = r * 0x8000000000000000000162e42fefa39e >> 127;\r\n    if(x & 0x40000000000 > 0) r = r * 0x80000000000000000000b17217f7d1cf >> 127;\r\n    if(x & 0x20000000000 > 0) r = r * 0x8000000000000000000058b90bfbe8e7 >> 127;\r\n    if(x & 0x10000000000 > 0) r = r * 0x800000000000000000002c5c85fdf473 >> 127;\r\n    if(x & 0x8000000000 > 0) r = r * 0x80000000000000000000162e42fefa39 >> 127;\r\n    if(x & 0x4000000000 > 0) r = r * 0x800000000000000000000b17217f7d1c >> 127;\r\n    if(x & 0x2000000000 > 0) r = r * 0x80000000000000000000058b90bfbe8e >> 127;\r\n    if(x & 0x1000000000 > 0) r = r * 0x8000000000000000000002c5c85fdf47 >> 127;\r\n    if(x & 0x800000000 > 0) r = r * 0x800000000000000000000162e42fefa3 >> 127;\r\n    if(x & 0x400000000 > 0) r = r * 0x8000000000000000000000b17217f7d1 >> 127;\r\n    if(x & 0x200000000 > 0) r = r * 0x800000000000000000000058b90bfbe8 >> 127;\r\n    if(x & 0x100000000 > 0) r = r * 0x80000000000000000000002c5c85fdf4 >> 127;\r\n    if(x & 0x80000000 > 0) r = r * 0x8000000000000000000000162e42fefa >> 127;\r\n    if(x & 0x40000000 > 0) r = r * 0x80000000000000000000000b17217f7d >> 127;\r\n    if(x & 0x20000000 > 0) r = r * 0x8000000000000000000000058b90bfbe >> 127;\r\n    if(x & 0x10000000 > 0) r = r * 0x800000000000000000000002c5c85fdf >> 127;\r\n    if(x & 0x8000000 > 0) r = r * 0x80000000000000000000000162e42fef >> 127;\r\n    if(x & 0x4000000 > 0) r = r * 0x800000000000000000000000b17217f7 >> 127;\r\n    if(x & 0x2000000 > 0) r = r * 0x80000000000000000000000058b90bfb >> 127;\r\n    if(x & 0x1000000 > 0) r = r * 0x8000000000000000000000002c5c85fd >> 127;\r\n    if(x & 0x800000 > 0) r = r * 0x800000000000000000000000162e42fe >> 127;\r\n    if(x & 0x400000 > 0) r = r * 0x8000000000000000000000000b17217f >> 127;\r\n    if(x & 0x200000 > 0) r = r * 0x800000000000000000000000058b90bf >> 127;\r\n    if(x & 0x100000 > 0) r = r * 0x80000000000000000000000002c5c85f >> 127;\r\n    if(x & 0x80000 > 0) r = r * 0x8000000000000000000000000162e42f >> 127;\r\n    if(x & 0x40000 > 0) r = r * 0x80000000000000000000000000b17217 >> 127;\r\n    if(x & 0x20000 > 0) r = r * 0x8000000000000000000000000058b90b >> 127;\r\n    if(x & 0x10000 > 0) r = r * 0x800000000000000000000000002c5c85 >> 127;\r\n    if(x & 0x8000 > 0) r = r * 0x80000000000000000000000000162e42 >> 127;\r\n    if(x & 0x4000 > 0) r = r * 0x800000000000000000000000000b1721 >> 127;\r\n    if(x & 0x2000 > 0) r = r * 0x80000000000000000000000000058b90 >> 127;\r\n    if(x & 0x1000 > 0) r = r * 0x8000000000000000000000000002c5c8 >> 127;\r\n    if(x & 0x800 > 0) r = r * 0x800000000000000000000000000162e4 >> 127;\r\n    if(x & 0x400 > 0) r = r * 0x8000000000000000000000000000b172 >> 127;\r\n    if(x & 0x200 > 0) r = r * 0x800000000000000000000000000058b9 >> 127;\r\n    if(x & 0x100 > 0) r = r * 0x80000000000000000000000000002c5c >> 127;\r\n    if(x & 0x80 > 0) r = r * 0x8000000000000000000000000000162e >> 127;\r\n    if(x & 0x40 > 0) r = r * 0x80000000000000000000000000000b17 >> 127;\r\n    if(x & 0x20 > 0) r = r * 0x8000000000000000000000000000058b >> 127;\r\n    if(x & 0x10 > 0) r = r * 0x800000000000000000000000000002c5 >> 127;\r\n    if(x & 0x8 > 0) r = r * 0x80000000000000000000000000000162 >> 127;\r\n    if(x & 0x4 > 0) r = r * 0x800000000000000000000000000000b1 >> 127;\r\n    if(x & 0x2 > 0) r = r * 0x80000000000000000000000000000058 >> 127;\r\n    if(x & 0x1 > 0) r = r * 0x8000000000000000000000000000002c >> 127; */\r\n\r\n    r >>= 127 -(x >> 121);\r\n\r\n    return uint128(r);\r\n  }\r\n}\r\n\r\n/**\r\n * Ethereum smart contract library implementing Yield Math model.\r\n */\r\nlibrary YieldMath {\r\n  using Math64x64 for int128;\r\n  using Math64x64 for uint128;\r\n  using Math64x64 for int256;\r\n  using Math64x64 for uint256;\r\n  using Exp64x64 for uint128;\r\n\r\n  uint128 public constant ONE = 0x10000000000000000; // In 64.64\r\n  uint256 public constant MAX = type(uint128).max;   // Used for overflow checks\r\n\r\n  /**\r\n   * Calculate the amount of fyDai a user would get for given amount of Dai.\r\n   * https://www.desmos.com/calculator/5nf2xuy6yb\r\n   * @param daiReserves dai reserves amount\r\n   * @param fyDaiReserves fyDai reserves amount\r\n   * @param daiAmount dai amount to be traded\r\n   * @param timeTillMaturity time till maturity in seconds\r\n   * @param k time till maturity coefficient, multiplied by 2^64\r\n   * @param g fee coefficient, multiplied by 2^64\r\n   * @return the amount of fyDai a user would get for given amount of Dai\r\n   */\r\n  function fyDaiOutForDaiIn(\r\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 daiAmount,\r\n    uint128 timeTillMaturity, int128 k, int128 g)\r\n  public pure returns(uint128) {\r\n    uint128 a = _computeA(timeTillMaturity, k, g);\r\n\r\n    // za = daiReserves ** a\r\n    uint256 za = daiReserves.pow(a, ONE);\r\n\r\n    // ya = fyDaiReserves ** a\r\n    uint256 ya = fyDaiReserves.pow(a, ONE);\r\n\r\n    // zx = daiReserves + daiAmount\r\n    uint256 zx = uint256(daiReserves) + uint256(daiAmount);\r\n    require(zx <= MAX, \"YieldMath: Too much dai in\");\r\n\r\n    // zxa = zx ** a\r\n    uint256 zxa = uint128(zx).pow(a, ONE);\r\n\r\n    // sum = za + ya - zxa\r\n    uint256 sum = za + ya - zxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\r\n    require(sum <= MAX, \"YieldMath: Insufficient fyDai reserves\");\r\n\r\n    // result = fyDaiReserves - (sum ** (1/a))\r\n    uint256 result = uint256(fyDaiReserves) - uint256(uint128(sum).pow(ONE, a));\r\n    require(result <= MAX, \"YieldMath: Rounding induced error\");\r\n\r\n    result = result > 1e12 ? result - 1e12 : 0; // Subtract error guard, flooring the result at zero\r\n\r\n    return uint128(result);\r\n  }\r\n\r\n  /**\r\n   * Calculate the amount of dai a user would get for certain amount of fyDai.\r\n   * https://www.desmos.com/calculator/6jlrre7ybt\r\n   * @param daiReserves dai reserves amount\r\n   * @param fyDaiReserves fyDai reserves amount\r\n   * @param fyDaiAmount fyDai amount to be traded\r\n   * @param timeTillMaturity time till maturity in seconds\r\n   * @param k time till maturity coefficient, multiplied by 2^64\r\n   * @param g fee coefficient, multiplied by 2^64\r\n   * @return the amount of Dai a user would get for given amount of fyDai\r\n   */\r\n  function daiOutForFYDaiIn(\r\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 fyDaiAmount,\r\n    uint128 timeTillMaturity, int128 k, int128 g)\r\n  public pure returns(uint128) {\r\n    uint128 a = _computeA(timeTillMaturity, k, g);\r\n\r\n    // za = daiReserves ** a\r\n    uint256 za = daiReserves.pow(a, ONE);\r\n\r\n    // ya = fyDaiReserves ** a\r\n    uint256 ya = fyDaiReserves.pow(a, ONE);\r\n\r\n    // yx = fyDayReserves + fyDaiAmount\r\n    uint256 yx = uint256(fyDaiReserves) + uint256(fyDaiAmount);\r\n    require(yx <= MAX, \"YieldMath: Too much fyDai in\");\r\n\r\n    // yxa = yx ** a\r\n    uint256 yxa = uint128(yx).pow(a, ONE);\r\n\r\n    // sum = za + ya - yxa\r\n    uint256 sum = za + ya - yxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\r\n    require(sum <= MAX, \"YieldMath: Insufficient dai reserves\");\r\n\r\n    // result = daiReserves - (sum ** (1/a))\r\n    uint256 result = uint256(daiReserves) - uint256(uint128(sum).pow(ONE, a));\r\n    require(result <= MAX, \"YieldMath: Rounding induced error\");\r\n\r\n    result = result > 1e12 ? result - 1e12 : 0; // Subtract error guard, flooring the result at zero\r\n\r\n    return uint128(result);\r\n  }\r\n\r\n  /**\r\n   * Calculate the amount of fyDai a user could sell for given amount of Dai.\r\n   * https://www.desmos.com/calculator/0rgnmtckvy\r\n   * @param daiReserves dai reserves amount\r\n   * @param fyDaiReserves fyDai reserves amount\r\n   * @param daiAmount Dai amount to be traded\r\n   * @param timeTillMaturity time till maturity in seconds\r\n   * @param k time till maturity coefficient, multiplied by 2^64\r\n   * @param g fee coefficient, multiplied by 2^64\r\n   * @return the amount of fyDai a user could sell for given amount of Dai\r\n   */\r\n  function fyDaiInForDaiOut(\r\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 daiAmount,\r\n    uint128 timeTillMaturity, int128 k, int128 g)\r\n  public pure returns(uint128) {\r\n    uint128 a = _computeA(timeTillMaturity, k, g);\r\n\r\n    // za = daiReserves ** a\r\n    uint256 za = daiReserves.pow(a, ONE);\r\n\r\n    // ya = fyDaiReserves ** a\r\n    uint256 ya = fyDaiReserves.pow(a, ONE);\r\n\r\n    // zx = daiReserves - daiAmount\r\n    uint256 zx = uint256(daiReserves) - uint256(daiAmount);\r\n    require(zx <= MAX, \"YieldMath: Too much dai out\");\r\n\r\n    // zxa = zx ** a\r\n    uint256 zxa = uint128(zx).pow(a, ONE);\r\n\r\n    // sum = za + ya - zxa\r\n    uint256 sum = za + ya - zxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\r\n    require(sum <= MAX, \"YieldMath: Resulting fyDai reserves too high\");\r\n\r\n    // result = (sum ** (1/a)) - fyDaiReserves\r\n    uint256 result = uint256(uint128(sum).pow(ONE, a)) - uint256(fyDaiReserves);\r\n    require(result <= MAX, \"YieldMath: Rounding induced error\");\r\n\r\n    result = result < MAX - 1e12 ? result + 1e12 : MAX; // Add error guard, ceiling the result at max\r\n\r\n    return uint128(result);\r\n  }\r\n\r\n  /**\r\n   * Calculate the amount of dai a user would have to pay for certain amount of fyDai.\r\n   * https://www.desmos.com/calculator/ws5oqj8x5i\r\n   * @param daiReserves Dai reserves amount\r\n   * @param fyDaiReserves fyDai reserves amount\r\n   * @param fyDaiAmount fyDai amount to be traded\r\n   * @param timeTillMaturity time till maturity in seconds\r\n   * @param k time till maturity coefficient, multiplied by 2^64\r\n   * @param g fee coefficient, multiplied by 2^64\r\n   * @return the amount of dai a user would have to pay for given amount of\r\n   *         fyDai\r\n   */\r\n  function daiInForFYDaiOut(\r\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 fyDaiAmount,\r\n    uint128 timeTillMaturity, int128 k, int128 g)\r\n  public pure returns(uint128) {\r\n    uint128 a = _computeA(timeTillMaturity, k, g);\r\n\r\n    // za = daiReserves ** a\r\n    uint256 za = daiReserves.pow(a, ONE);\r\n\r\n    // ya = fyDaiReserves ** a\r\n    uint256 ya = fyDaiReserves.pow(a, ONE);\r\n\r\n    // yx = daiReserves - daiAmount\r\n    uint256 yx = uint256(fyDaiReserves) - uint256(fyDaiAmount);\r\n    require(yx <= MAX, \"YieldMath: Too much fyDai out\");\r\n\r\n    // yxa = yx ** a\r\n    uint256 yxa = uint128(yx).pow(a, ONE);\r\n\r\n    // sum = za + ya - yxa\r\n    uint256 sum = za + ya - yxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\r\n    require(sum <= MAX, \"YieldMath: Resulting dai reserves too high\");\r\n\r\n    // result = (sum ** (1/a)) - daiReserves\r\n    uint256 result = uint256(uint128(sum).pow(ONE, a)) - uint256(daiReserves);\r\n    require(result <= MAX, \"YieldMath: Rounding induced error\");\r\n\r\n    result = result < MAX - 1e12 ? result + 1e12 : MAX; // Add error guard, ceiling the result at max\r\n\r\n    return uint128(result);\r\n  }\r\n\r\n  function _computeA(uint128 timeTillMaturity, int128 k, int128 g) private pure returns (uint128) {\r\n    // t = k * timeTillMaturity\r\n    int128 t = k.mul(timeTillMaturity.fromUInt());\r\n    require(t >= 0, \"YieldMath: t must be positive\"); // Meaning neither T or k can be negative\r\n\r\n    // a = (1 - gt)\r\n    int128 a = int128(ONE).sub(g.mul(t));\r\n    require(a > 0, \"YieldMath: Too far from maturity\");\r\n    require(a <= int128(ONE), \"YieldMath: g must be positive\");\r\n\r\n    return uint128(a);\r\n  }\r\n\r\n  /**\r\n   * Estimate in Dai the value of reserves at protocol initialization time.\r\n   *\r\n   * @param daiReserves dai reserves amount\r\n   * @param fyDaiReserves fyDai reserves amount\r\n   * @param timeTillMaturity time till maturity in seconds\r\n   * @param k time till maturity coefficient, multiplied by 2^64\r\n   * @param c0 price of dai in terms of Dai, multiplied by 2^64\r\n   * @return estimated value of reserves\r\n   */\r\n  function initialReservesValue(\r\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 timeTillMaturity,\r\n    int128 k, int128 c0)\r\n  external pure returns(uint128) {\r\n    uint256 normalizedDaiReserves = c0.mulu(daiReserves);\r\n    require(normalizedDaiReserves <= MAX);\r\n\r\n    // a = (1 - k * timeTillMaturity)\r\n    int128 a = int128(ONE).sub(k.mul(timeTillMaturity.fromUInt()));\r\n    require(a > 0);\r\n\r\n    uint256 sum =\r\n      uint256(uint128(normalizedDaiReserves).pow(uint128(a), ONE)) +\r\n      uint256(fyDaiReserves.pow(uint128(a), ONE)) >> 1;\r\n    require(sum <= MAX);\r\n\r\n    uint256 result = uint256(uint128(sum).pow(ONE, uint128(a))) << 1;\r\n    require(result <= MAX);\r\n\r\n    return uint128(result);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
    },
    "contracts/helpers/Delegable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.5;\n\nimport \"../interfaces/IDelegable.sol\";\n\n\n/// @dev Delegable enables users to delegate their account management to other users.\n/// Delegable implements addDelegateBySignature, to add delegates using a signature instead of a separate transaction.\ncontract Delegable is IDelegable {\n    event Delegate(address indexed user, address indexed delegate, bool enabled);\n\n    // keccak256(\"Signature(address user,address delegate,uint256 nonce,uint256 deadline)\");\n    bytes32 public immutable SIGNATURE_TYPEHASH = 0x0d077601844dd17f704bafff948229d27f33b57445915754dfe3d095fda2beb7;\n    bytes32 public immutable DELEGABLE_DOMAIN;\n    mapping(address => uint) public signatureCount;\n\n    mapping(address => mapping(address => bool)) public delegated;\n\n    constructor () public {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n\n        DELEGABLE_DOMAIN = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes('Yield')),\n                keccak256(bytes('1')),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    /// @dev Require that msg.sender is the account holder or a delegate\n    modifier onlyHolderOrDelegate(address holder, string memory errorMessage) {\n        require(\n            msg.sender == holder || delegated[holder][msg.sender],\n            errorMessage\n        );\n        _;\n    }\n\n    /// @dev Enable a delegate to act on the behalf of caller\n    function addDelegate(address delegate) public override {\n        _addDelegate(msg.sender, delegate);\n    }\n\n    /// @dev Stop a delegate from acting on the behalf of caller\n    function revokeDelegate(address delegate) public {\n        _revokeDelegate(msg.sender, delegate);\n    }\n\n    /// @dev Add a delegate through an encoded signature\n    function addDelegateBySignature(address user, address delegate, uint deadline, uint8 v, bytes32 r, bytes32 s) public override {\n        require(deadline >= block.timestamp, 'Delegable: Signature expired');\n\n        bytes32 hashStruct = keccak256(\n            abi.encode(\n                SIGNATURE_TYPEHASH,\n                user,\n                delegate,\n                signatureCount[user]++,\n                deadline\n            )\n        );\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DELEGABLE_DOMAIN,\n                hashStruct\n            )\n        );\n        address signer = ecrecover(digest, v, r, s);\n        require(\n            signer != address(0) && signer == user,\n            'Delegable: Invalid signature'\n        );\n\n        _addDelegate(user, delegate);\n    }\n\n    /// @dev Enable a delegate to act on the behalf of an user\n    function _addDelegate(address user, address delegate) internal {\n        require(!delegated[user][delegate], \"Delegable: Already delegated\");\n        delegated[user][delegate] = true;\n        emit Delegate(user, delegate, true);\n    }\n\n    /// @dev Stop a delegate from acting on the behalf of an user\n    function _revokeDelegate(address user, address delegate) internal {\n        require(delegated[user][delegate], \"Delegable: Already undelegated\");\n        delegated[user][delegate] = false;\n        emit Delegate(user, delegate, false);\n    }\n}\n"
    },
    "contracts/helpers/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.5;\n\n\nlibrary SafeCast {\n    /// @dev Safe casting from uint256 to uint128\n    function toUint128(uint256 x) internal pure returns(uint128) {\n        require(\n            x <= type(uint128).max,\n            \"SafeCast: Cast overflow\"\n        );\n        return uint128(x);\n    }\n\n    /// @dev Safe casting from uint256 to int256\n    function toInt256(uint256 x) internal pure returns(int256) {\n        require(\n            x <= uint256(type(int256).max),\n            \"SafeCast: Cast overflow\"\n        );\n        return int256(x);\n    }\n}"
    },
    "contracts/helpers/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/53516bc555a454862470e7860a9b5254db4d00f5/contracts/token/ERC20/ERC20Permit.sol\npragma solidity ^0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../interfaces/IERC2612.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to use their tokens\n * without sending any transactions by setting {IERC20-allowance} with a\n * signature using the {permit} method, and then spend them via\n * {IERC20-transferFrom}.\n *\n * The {permit} signature mechanism conforms to the {IERC2612} interface.\n */\nabstract contract ERC20Permit is ERC20, IERC2612 {\n    mapping (address => uint256) public override nonces;\n\n    bytes32 public immutable PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public immutable DOMAIN_SEPARATOR;\n\n    constructor(string memory name_, string memory symbol_) internal ERC20(name_, symbol_) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name_)),\n                keccak256(bytes(\"1\")),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    /**\n     * @dev See {IERC2612-permit}.\n     *\n     * In cases where the free option is not a concern, deadline can simply be\n     * set to uint(-1), so it should be seen as an optional parameter\n     */\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\n        require(deadline >= block.timestamp, \"ERC20Permit: expired deadline\");\n\n        bytes32 hashStruct = keccak256(\n            abi.encode(\n                PERMIT_TYPEHASH,\n                owner,\n                spender,\n                amount,\n                nonces[owner]++,\n                deadline\n            )\n        );\n\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                hashStruct\n            )\n        );\n\n        address signer = ecrecover(hash, v, r, s);\n        require(\n            signer != address(0) && signer == owner,\n            \"ERC20Permit: invalid signature\"\n        );\n\n        _approve(owner, spender, amount);\n    }\n}\n"
    },
    "contracts/interfaces/IFYDai.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IERC2612.sol\";\n\ninterface IFYDai is IERC20, IERC2612 {\n    function isMature() external view returns(bool);\n    function maturity() external view returns(uint);\n    function chi0() external view returns(uint);\n    function rate0() external view returns(uint);\n    function chiGrowth() external view returns(uint);\n    function rateGrowth() external view returns(uint);\n    function mature() external;\n    function unlocked() external view returns (uint);\n    function mint(address, uint) external;\n    function burn(address, uint) external;\n    function flashMint(uint, bytes calldata) external;\n    function redeem(address, address, uint256) external returns (uint256);\n    // function transfer(address, uint) external returns (bool);\n    // function transferFrom(address, address, uint) external returns (bool);\n    // function approve(address, uint) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IDelegable.sol\";\nimport \"./IERC2612.sol\";\nimport \"./IFYDai.sol\";\n\ninterface IPool is IDelegable, IERC20, IERC2612 {\n    function dai() external view returns(IERC20);\n    function fyDai() external view returns(IFYDai);\n    function getDaiReserves() external view returns(uint128);\n    function getFYDaiReserves() external view returns(uint128);\n    function sellDai(address from, address to, uint128 daiIn) external returns(uint128);\n    function buyDai(address from, address to, uint128 daiOut) external returns(uint128);\n    function sellFYDai(address from, address to, uint128 fyDaiIn) external returns(uint128);\n    function buyFYDai(address from, address to, uint128 fyDaiOut) external returns(uint128);\n    function sellDaiPreview(uint128 daiIn) external view returns(uint128);\n    function buyDaiPreview(uint128 daiOut) external view returns(uint128);\n    function sellFYDaiPreview(uint128 fyDaiIn) external view returns(uint128);\n    function buyFYDaiPreview(uint128 fyDaiOut) external view returns(uint128);\n    function mint(address from, address to, uint256 daiOffered) external returns (uint256);\n    function burn(address from, address to, uint256 tokensBurned) external returns (uint256, uint256);\n}"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Math64x64.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n/*\r\n *  Math 64.64 Smart Contract Library.  Copyright © 2019 by  Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\npragma solidity ^0.7.5;\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with signed\r\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n * basically a simple fraction whose numerator is signed 128-bit integer and\r\n * denominator is 2^64.  As long as denominator is always the same, there is no\r\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n * represented by int128 type holding only the numerator.\r\n */\r\nlibrary Math64x64 {\r\n  /**\r\n   * @dev Minimum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\r\n\r\n  /**\r\n   * @dev Maximum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * @dev Convert signed 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromInt (int256 x) internal pure returns (int128) {\r\n    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\r\n    return int128 (x << 64);\r\n  }\r\n\r\n  /**\r\n   * @dev Convert signed 64.64 fixed point number into signed 64-bit integer number\r\n   * rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64-bit integer number\r\n   */\r\n  function toInt (int128 x) internal pure returns (int64) {\r\n    return int64 (x >> 64);\r\n  }\r\n\r\n  /**\r\n   * @dev Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromUInt (uint256 x) internal pure returns (int128) {\r\n    require (x <= 0x7FFFFFFFFFFFFFFF);\r\n    return int128 (x << 64);\r\n  }\r\n\r\n  /**\r\n   * @dev Convert signed 64.64 fixed point number into unsigned 64-bit integer\r\n   * number rounding down.  Revert on underflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return unsigned 64-bit integer number\r\n   */\r\n  function toUInt (int128 x) internal pure returns (uint64) {\r\n    require (x >= 0);\r\n    return uint64 (x >> 64);\r\n  }\r\n\r\n  /**\r\n   * @dev Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\r\n   * number rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 128.128-bin fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function from128x128 (int256 x) internal pure returns (int128) {\r\n    int256 result = x >> 64;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * @dev Convert signed 64.64 fixed point number into signed 128.128 fixed point\r\n   * number.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 128.128 fixed point number\r\n   */\r\n  function to128x128 (int128 x) internal pure returns (int256) {\r\n    return int256 (x) << 64;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate x + y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function add (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) + y;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate x - y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sub (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) - y;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate x * y rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function mul (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) * y >> 64;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\r\n   * number and y is signed 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 256-bit integer number\r\n   */\r\n  function muli (int128 x, int256 y) internal pure returns (int256) {\r\n    if (x == MIN_64x64) {\r\n      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\r\n        y <= 0x1000000000000000000000000000000000000000000000000);\r\n      return -y << 63;\r\n    } else {\r\n      bool negativeResult = false;\r\n      if (x < 0) {\r\n        x = -x;\r\n        negativeResult = true;\r\n      }\r\n      if (y < 0) {\r\n        y = -y; // We rely on overflow behavior here\r\n        negativeResult = !negativeResult;\r\n      }\r\n      uint256 absoluteResult = mulu (x, uint256 (y));\r\n      if (negativeResult) {\r\n        require (absoluteResult <=\r\n          0x8000000000000000000000000000000000000000000000000000000000000000);\r\n        return -int256 (absoluteResult); // We rely on overflow behavior here\r\n      } else {\r\n        require (absoluteResult <=\r\n          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int256 (absoluteResult);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate x * y rounding down, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 256-bit integer number\r\n   */\r\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\r\n    if (y == 0) return 0;\r\n\r\n    require (x >= 0);\r\n\r\n    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\r\n    uint256 hi = uint256 (x) * (y >> 128);\r\n\r\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    hi <<= 64;\r\n\r\n    require (hi <=\r\n      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\r\n    return hi + lo;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate x / y rounding towards zero.  Revert on overflow or when y is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function div (int128 x, int128 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n    int256 result = (int256 (x) << 64) / y;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate x / y rounding towards zero, where x and y are signed 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divi (int256 x, int256 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n\r\n    bool negativeResult = false;\r\n    if (x < 0) {\r\n      x = -x; // We rely on overflow behavior here\r\n      negativeResult = true;\r\n    }\r\n    if (y < 0) {\r\n      y = -y; // We rely on overflow behavior here\r\n      negativeResult = !negativeResult;\r\n    }\r\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\r\n    if (negativeResult) {\r\n      require (absoluteResult <= 0x80000000000000000000000000000000);\r\n      return -int128 (absoluteResult); // We rely on overflow behavior here\r\n    } else {\r\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int128 (absoluteResult); // We rely on overflow behavior here\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n    uint128 result = divuu (x, y);\r\n    require (result <= uint128 (MAX_64x64));\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate -x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function neg (int128 x) internal pure returns (int128) {\r\n    require (x != MIN_64x64);\r\n    return -x;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate |x|.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function abs (int128 x) internal pure returns (int128) {\r\n    require (x != MIN_64x64);\r\n    return x < 0 ? -x : x;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function inv (int128 x) internal pure returns (int128) {\r\n    require (x != 0);\r\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function avg (int128 x, int128 y) internal pure returns (int128) {\r\n    return int128 ((int256 (x) + int256 (y)) >> 1);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\r\n   * Revert on overflow or in case x * y is negative.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 m = int256 (x) * int256 (y);\r\n    require (m >= 0);\r\n    require (m <\r\n        0x4000000000000000000000000000000000000000000000000000000000000000);\r\n    return int128 (sqrtu (uint256 (m), uint256 (x) + uint256 (y) >> 1));\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\r\n    uint256 absoluteResult;\r\n    bool negativeResult = false;\r\n    if (x >= 0) {\r\n      absoluteResult = powu (uint256 (x) << 63, y);\r\n    } else {\r\n      // We rely on overflow behavior here\r\n      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\r\n      negativeResult = y & 1 > 0;\r\n    }\r\n\r\n    absoluteResult >>= 63;\r\n\r\n    if (negativeResult) {\r\n      require (absoluteResult <= 0x80000000000000000000000000000000);\r\n      return -int128 (absoluteResult); // We rely on overflow behavior here\r\n    } else {\r\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int128 (absoluteResult); // We rely on overflow behavior here\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate sqrt (x) rounding down.  Revert if x < 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sqrt (int128 x) internal pure returns (int128) {\r\n    require (x >= 0);\r\n    return int128 (sqrtu (uint256 (x) << 64, 0x10000000000000000));\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate binary logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function log_2 (int128 x) internal pure returns (int128) {\r\n    require (x > 0);\r\n\r\n    int256 msb = 0;\r\n    int256 xc = x;\r\n    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\r\n    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n    if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n    if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n    if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n    int256 result = msb - 64 << 64;\r\n    uint256 ux = uint256 (x) << uint256(127 - msb);\r\n    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n      ux *= ux;\r\n      uint256 b = ux >> 255;\r\n      ux >>= 127 + b;\r\n      result += bit * int256 (b);\r\n    }\r\n\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate natural logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function ln (int128 x) internal pure returns (int128) {\r\n    require (x > 0);\r\n\r\n    return int128 (\r\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate binary exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp_2 (int128 x) internal pure returns (int128) {\r\n    require (x < 0x400000000000000000); // Overflow\r\n\r\n    if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n    uint256 result = 0x80000000000000000000000000000000;\r\n\r\n    if (x & 0x8000000000000000 > 0)\r\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\r\n    if (x & 0x4000000000000000 > 0)\r\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\r\n    if (x & 0x2000000000000000 > 0)\r\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\r\n    if (x & 0x1000000000000000 > 0)\r\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\r\n    if (x & 0x800000000000000 > 0)\r\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\r\n    if (x & 0x400000000000000 > 0)\r\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\r\n    if (x & 0x200000000000000 > 0)\r\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\r\n    if (x & 0x100000000000000 > 0)\r\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\r\n    if (x & 0x80000000000000 > 0)\r\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\r\n    if (x & 0x40000000000000 > 0)\r\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\r\n    if (x & 0x20000000000000 > 0)\r\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\r\n    if (x & 0x10000000000000 > 0)\r\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\r\n    if (x & 0x8000000000000 > 0)\r\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\r\n    if (x & 0x4000000000000 > 0)\r\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\r\n    if (x & 0x2000000000000 > 0)\r\n      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\r\n    if (x & 0x1000000000000 > 0)\r\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\r\n    if (x & 0x800000000000 > 0)\r\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\r\n    if (x & 0x400000000000 > 0)\r\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\r\n    if (x & 0x200000000000 > 0)\r\n      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\r\n    if (x & 0x100000000000 > 0)\r\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\r\n    if (x & 0x80000000000 > 0)\r\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\r\n    if (x & 0x40000000000 > 0)\r\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\r\n    if (x & 0x20000000000 > 0)\r\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\r\n    if (x & 0x10000000000 > 0)\r\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\r\n    if (x & 0x8000000000 > 0)\r\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\r\n    if (x & 0x4000000000 > 0)\r\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\r\n    if (x & 0x2000000000 > 0)\r\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\r\n    if (x & 0x1000000000 > 0)\r\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\r\n    if (x & 0x800000000 > 0)\r\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\r\n    if (x & 0x400000000 > 0)\r\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\r\n    if (x & 0x200000000 > 0)\r\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\r\n    if (x & 0x100000000 > 0)\r\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\r\n    if (x & 0x80000000 > 0)\r\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\r\n    if (x & 0x40000000 > 0)\r\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\r\n    if (x & 0x20000000 > 0)\r\n      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\r\n    if (x & 0x10000000 > 0)\r\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\r\n    if (x & 0x8000000 > 0)\r\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\r\n    if (x & 0x4000000 > 0)\r\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\r\n    if (x & 0x2000000 > 0)\r\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\r\n    if (x & 0x1000000 > 0)\r\n      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\r\n    if (x & 0x800000 > 0)\r\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\r\n    if (x & 0x400000 > 0)\r\n      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\r\n    if (x & 0x200000 > 0)\r\n      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\r\n    if (x & 0x100000 > 0)\r\n      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\r\n    if (x & 0x80000 > 0)\r\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\r\n    if (x & 0x40000 > 0)\r\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\r\n    if (x & 0x20000 > 0)\r\n      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\r\n    if (x & 0x10000 > 0)\r\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\r\n    if (x & 0x8000 > 0)\r\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\r\n    if (x & 0x4000 > 0)\r\n      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\r\n    if (x & 0x2000 > 0)\r\n      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\r\n    if (x & 0x1000 > 0)\r\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\r\n    if (x & 0x800 > 0)\r\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\r\n    if (x & 0x400 > 0)\r\n      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\r\n    if (x & 0x200 > 0)\r\n      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\r\n    if (x & 0x100 > 0)\r\n      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\r\n    if (x & 0x80 > 0)\r\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\r\n    if (x & 0x40 > 0)\r\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\r\n    if (x & 0x20 > 0)\r\n      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\r\n    if (x & 0x10 > 0)\r\n      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\r\n    if (x & 0x8 > 0)\r\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\r\n    if (x & 0x4 > 0)\r\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\r\n    if (x & 0x2 > 0)\r\n      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\r\n    if (x & 0x1 > 0)\r\n      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\r\n\r\n    result >>= uint256(63 - (x >> 64));\r\n    require (result <= uint256 (MAX_64x64));\r\n\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate natural exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp (int128 x) internal pure returns (int128) {\r\n    require (x < 0x400000000000000000); // Overflow\r\n\r\n    if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n    return exp_2 (\r\n        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 64.64-bit fixed point number\r\n   */\r\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\r\n    require (y != 0);\r\n\r\n    uint256 result;\r\n\r\n    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n      result = (x << 64) / y;\r\n    else {\r\n      uint256 msb = 192;\r\n      uint256 xc = x >> 192;\r\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\r\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n      uint256 hi = result * (y >> 128);\r\n      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n      uint256 xh = x >> 192;\r\n      uint256 xl = x << 64;\r\n\r\n      if (xl < lo) xh -= 1;\r\n      xl -= lo; // We rely on overflow behavior here\r\n      lo = hi << 128;\r\n      if (xl < lo) xh -= 1;\r\n      xl -= lo; // We rely on overflow behavior here\r\n\r\n      assert (xh == hi >> 128);\r\n\r\n      result += xl / y;\r\n    }\r\n\r\n    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    return uint128 (result);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\r\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 129.127-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return unsigned 129.127-bit fixed point number\r\n   */\r\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\r\n    if (y == 0) return 0x80000000000000000000000000000000;\r\n    else if (x == 0) return 0;\r\n    else {\r\n      int256 msb = 0;\r\n      uint256 xc = x;\r\n      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\r\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\r\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      int256 xe = msb - 127;\r\n      if (xe > 0) x >>= uint256(xe);\r\n      else x <<= -uint256(xe);\r\n\r\n      uint256 result = 0x80000000000000000000000000000000;\r\n      int256 re = 0;\r\n\r\n      while (y > 0) {\r\n        if (y & 1 > 0) {\r\n          result = result * x;\r\n          y -= 1;\r\n          re += xe;\r\n          if (result >=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\r\n            result >>= 128;\r\n            re += 1;\r\n          } else result >>= 127;\r\n          if (re < -127) return 0; // Underflow\r\n          require (re < 128); // Overflow\r\n        } else {\r\n          x = x * x;\r\n          y >>= 1;\r\n          xe <<= 1;\r\n          if (x >=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\r\n            x >>= 128;\r\n            xe += 1;\r\n          } else x >>= 127;\r\n          if (xe < -127) return 0; // Underflow\r\n          require (xe < 128); // Overflow\r\n        }\r\n      }\r\n\r\n      if (re > 0) result <<= uint256(re);\r\n      else if (re < 0) result >>= -uint256(re);\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\r\n   * number.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return unsigned 128-bit integer number\r\n   */\r\n  function sqrtu (uint256 x, uint256 r) private pure returns (uint128) {\r\n    if (x == 0) return 0;\r\n    else {\r\n      require (r > 0);\r\n      while (true) {\r\n        uint256 rr = x / r;\r\n        if (r == rr || r + 1 == rr) return uint128 (r);\r\n        else if (r == rr + 1) return uint128 (rr);\r\n        r = r + rr + 1 >> 1;\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/interfaces/IDelegable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.5;\n\n\ninterface IDelegable {\n    function addDelegate(address) external;\n    function addDelegateBySignature(address, address, uint, uint8, bytes32, bytes32) external;\n}\n"
    },
    "contracts/interfaces/IERC2612.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\npragma solidity ^0.7.5;\n\n/**\n * @dev Interface of the ERC2612 standard as defined in the EIP.\n *\n * Adds the {permit} method, which can be used to change one's\n * {IERC20-allowance} without having to send a transaction, by signing a\n * message. This allows users to spend tokens without having to hold Ether.\n *\n * See https://eips.ethereum.org/EIPS/eip-2612.\n */\ninterface IERC2612 {\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n}\n"
    },
    "contracts/mocks/FYDaiMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.5;\n\nimport \"../interfaces/IDaiMock.sol\";\nimport \"../helpers/ERC20Permit.sol\";\n\ncontract FYDaiMock is ERC20Permit {\n    IDaiMock public dai;\n    uint256 public maturity;\n\n    constructor (IDaiMock dai_, uint256 maturity_) ERC20Permit(\"Test\", \"TST\") {\n        dai = dai_;\n        maturity = maturity_;\n    }\n\n    function mint(address to, uint256 amount) public {\n        _mint(to, amount);\n    }\n\n    function burn(address from, uint256 amount) public {\n        _burn(from, amount);\n    }\n\n    function redeem(address from, address to, uint256 amount) public {\n        _burn(from, amount);\n        dai.mint(to, amount);\n    }\n}\n"
    },
    "contracts/interfaces/IDaiMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.5;\n\nimport \"./IDai.sol\";\n\ninterface IDaiMock is IDai {\n    function mint(address to, uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IDai.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IDai is IERC20 {\n    function nonces(address user) external view returns (uint256);\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry,\n                    bool allowed, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "contracts/mocks/DaiMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.5;\n\nimport \"../helpers/ERC20Permit.sol\";\n\n\ncontract DaiMock is ERC20Permit(\"Dai\", \"DAI\") {\n  function mint(address to, uint256 amount) public {\n    _mint(to, amount);\n  }\n}"
    },
    "contracts/mocks/YieldMathWrapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.5;\n\nimport \"../YieldMath.sol\";\n\n/**\n * Wrapper for the  Yield Math Smart Contract Library.\n */\ncontract YieldMathWrapper {\n  /**\n   * Calculate the amount of fyDai a user would get for given amount of Dai.\n   *\n   * @param daiReserves Dai reserves amount\n   * @param fyDaiReserves fyDai reserves amount\n   * @param daiAmount Dai amount to be traded\n   * @param timeTillMaturity time till maturity in seconds\n   * @param k time till maturity coefficient, multiplied by 2^64\n   * @param g fee coefficient, multiplied by 2^64\n   * @return the amount of fyDai a user would get for given amount of Dai\n   */\n  function fyDaiOutForDaiIn(\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 daiAmount,\n    uint128 timeTillMaturity, int128 k, int128 g)\n  public pure returns(uint128) {\n    return YieldMath.fyDaiOutForDaiIn(\n      daiReserves, fyDaiReserves, daiAmount, timeTillMaturity, k, g\n    );\n  }\n\n  /**\n   * Calculate the amount of Dai a user would get for certain amount of fyDai.\n   *\n   * @param daiReserves Dai reserves amount\n   * @param fyDaiReserves fyDai reserves amount\n   * @param fyDaiAmount fyDai amount to be traded\n   * @param timeTillMaturity time till maturity in seconds\n   * @param k time till maturity coefficient, multiplied by 2^64\n   * @param g fee coefficient, multiplied by 2^64\n   * @return the amount of Dai a user would get for given amount of fyDai\n   */\n  function daiOutForFYDaiIn(\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 fyDaiAmount,\n    uint128 timeTillMaturity, int128 k, int128 g)\n  public pure returns(uint128) {\n    return YieldMath.daiOutForFYDaiIn(\n      daiReserves, fyDaiReserves, fyDaiAmount, timeTillMaturity, k, g\n    );\n  }\n\n  /**\n   * Calculate the amount of fyDai a user could sell for given amount of Dai.\n   *\n   * @param daiReserves Dai reserves amount\n   * @param fyDaiReserves fyDai reserves amount\n   * @param daiAmount Dai amount to be traded\n   * @param timeTillMaturity time till maturity in seconds\n   * @param k time till maturity coefficient, multiplied by 2^64\n   * @param g fee coefficient, multiplied by 2^64\n   * @return the amount of fyDai a user could sell for given amount of Dai\n   */\n  function fyDaiInForDaiOut(\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 daiAmount,\n    uint128 timeTillMaturity, int128 k, int128 g)\n  public pure returns(uint128) {\n    return YieldMath.fyDaiInForDaiOut(\n      daiReserves, fyDaiReserves, daiAmount, timeTillMaturity, k, g\n    );\n  }\n\n  /**\n   * Calculate the amount of Dai a user would have to pay for certain amount of\n   * fyDai.\n   *\n   * @param daiReserves Dai reserves amount\n   * @param fyDaiReserves fyDai reserves amount\n   * @param fyDaiAmount fyDai amount to be traded\n   * @param timeTillMaturity time till maturity in seconds\n   * @param k time till maturity coefficient, multiplied by 2^64\n   * @param g fee coefficient, multiplied by 2^64\n   * @return the amount of Dai a user would have to pay for given amount of\n   *         fyDai\n   */\n  function daiInForFYDaiOut(\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 fyDaiAmount,\n    uint128 timeTillMaturity, int128 k, int128 g)\n  public pure returns(uint128) {\n    return YieldMath.daiInForFYDaiOut(\n      daiReserves, fyDaiReserves, fyDaiAmount, timeTillMaturity, k, g\n    );\n  }\n\n  /**\n   * Raise given number x into power specified as a simple fraction y/z and then\n   * multiply the result by the normalization factor 2^(128 *(1 - y/z)).\n   * Revert if z is zero, or if both x and y are zeros.\n   *\n   * @param x number to raise into given power y/z\n   * @param y numerator of the power to raise x into\n   * @param z denominator of the power to raise x into\n   * @return x raised into power y/z and then multiplied by 2^(128 *(1 - y/z))\n   */\n  function pow(uint128 x, uint128 y, uint128 z)\n  public pure returns(bool, uint256) {\n    return(\n      true,\n      Exp64x64.pow(x, y, z));\n  }\n\n  /**\n   * Calculate base 2 logarithm of an unsigned 128-bit integer number.  Revert\n   * in case x is zero.\n   *\n   * @param x number to calculate 2-base logarithm of\n   * @return 2-base logarithm of x, multiplied by 2^121\n   */\n  function log_2(uint128 x)\n  public pure returns(bool, uint128) {\n    return(\n      true,\n      Exp64x64.log_2(x));\n  }\n\n  /**\n   * Calculate 2 raised into given power.\n   *\n   * @param x power to raise 2 into, multiplied by 2^121\n   * @return 2 raised into given power\n   */\n  function pow_2(uint128 x)\n  public pure returns(bool, uint128) {\n    return(\n      true,\n      Exp64x64.pow_2(x));\n  }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}