{
  "address": "0xb8c0D4Ee9380e476F409f496175D9082E6e1E58C",
  "abi": [
    {
      "inputs": [],
      "name": "MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "daiReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyDaiReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyDaiAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeTillMaturity",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "k",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "g",
          "type": "int128"
        }
      ],
      "name": "daiInForFYDaiOut",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "daiReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyDaiReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyDaiAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeTillMaturity",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "k",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "g",
          "type": "int128"
        }
      ],
      "name": "daiOutForFYDaiIn",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "daiReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyDaiReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "daiAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeTillMaturity",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "k",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "g",
          "type": "int128"
        }
      ],
      "name": "fyDaiInForDaiOut",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "daiReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyDaiReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "daiAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeTillMaturity",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "k",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "g",
          "type": "int128"
        }
      ],
      "name": "fyDaiOutForDaiIn",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "daiReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyDaiReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeTillMaturity",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "k",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "c0",
          "type": "int128"
        }
      ],
      "name": "initialReservesValue",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b3e07e7afadeb98d4f2e35dc49791349524fb3ada6afd60601efe15371f2790",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x5AD7799f02D5a829B2d6FA085e6bd69A872619D5",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "2171020",
    "logsBloom": "0x
    "blockHash": "0x4a706b35f2a85ab83178ca4511944eacbb6b8bf1c8604c9a1c0885f8a423b61d",
    "transactionHash": "0x6b3e07e7afadeb98d4f2e35dc49791349524fb3ada6afd60601efe15371f2790",
    "logs": [],
    "blockNumber": 23182665,
    "cumulativeGasUsed": "2216521",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "646e61c55b1195451ac18ef6ef31df79",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"daiReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyDaiReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyDaiAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"k\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"}],\"name\":\"daiInForFYDaiOut\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"daiReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyDaiReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyDaiAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"k\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"}],\"name\":\"daiOutForFYDaiIn\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"daiReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyDaiReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"daiAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"k\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"}],\"name\":\"fyDaiInForDaiOut\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"daiReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyDaiReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"daiAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"k\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"}],\"name\":\"fyDaiOutForDaiIn\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"daiReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyDaiReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"k\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"c0\",\"type\":\"int128\"}],\"name\":\"initialReservesValue\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"daiInForFYDaiOut(uint128,uint128,uint128,uint128,int128,int128)\":{\"params\":{\"daiReserves\":\"Dai reserves amount\",\"fyDaiAmount\":\"fyDai amount to be traded\",\"fyDaiReserves\":\"fyDai reserves amount\",\"g\":\"fee coefficient, multiplied by 2^64\",\"k\":\"time till maturity coefficient, multiplied by 2^64\",\"timeTillMaturity\":\"time till maturity in seconds\"},\"returns\":{\"_0\":\"the amount of dai a user would have to pay for given amount of         fyDai\"}},\"daiOutForFYDaiIn(uint128,uint128,uint128,uint128,int128,int128)\":{\"params\":{\"daiReserves\":\"dai reserves amount\",\"fyDaiAmount\":\"fyDai amount to be traded\",\"fyDaiReserves\":\"fyDai reserves amount\",\"g\":\"fee coefficient, multiplied by 2^64\",\"k\":\"time till maturity coefficient, multiplied by 2^64\",\"timeTillMaturity\":\"time till maturity in seconds\"},\"returns\":{\"_0\":\"the amount of Dai a user would get for given amount of fyDai\"}},\"fyDaiInForDaiOut(uint128,uint128,uint128,uint128,int128,int128)\":{\"params\":{\"daiAmount\":\"Dai amount to be traded\",\"daiReserves\":\"dai reserves amount\",\"fyDaiReserves\":\"fyDai reserves amount\",\"g\":\"fee coefficient, multiplied by 2^64\",\"k\":\"time till maturity coefficient, multiplied by 2^64\",\"timeTillMaturity\":\"time till maturity in seconds\"},\"returns\":{\"_0\":\"the amount of fyDai a user could sell for given amount of Dai\"}},\"fyDaiOutForDaiIn(uint128,uint128,uint128,uint128,int128,int128)\":{\"params\":{\"daiAmount\":\"dai amount to be traded\",\"daiReserves\":\"dai reserves amount\",\"fyDaiReserves\":\"fyDai reserves amount\",\"g\":\"fee coefficient, multiplied by 2^64\",\"k\":\"time till maturity coefficient, multiplied by 2^64\",\"timeTillMaturity\":\"time till maturity in seconds\"},\"returns\":{\"_0\":\"the amount of fyDai a user would get for given amount of Dai\"}},\"initialReservesValue(uint128,uint128,uint128,int128,int128)\":{\"params\":{\"c0\":\"price of dai in terms of Dai, multiplied by 2^64\",\"daiReserves\":\"dai reserves amount\",\"fyDaiReserves\":\"fyDai reserves amount\",\"k\":\"time till maturity coefficient, multiplied by 2^64\",\"timeTillMaturity\":\"time till maturity in seconds\"},\"returns\":{\"_0\":\"estimated value of reserves\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"daiInForFYDaiOut(uint128,uint128,uint128,uint128,int128,int128)\":{\"notice\":\"Calculate the amount of dai a user would have to pay for certain amount of fyDai. https://www.desmos.com/calculator/ws5oqj8x5i\"},\"daiOutForFYDaiIn(uint128,uint128,uint128,uint128,int128,int128)\":{\"notice\":\"Calculate the amount of dai a user would get for certain amount of fyDai. https://www.desmos.com/calculator/6jlrre7ybt\"},\"fyDaiInForDaiOut(uint128,uint128,uint128,uint128,int128,int128)\":{\"notice\":\"Calculate the amount of fyDai a user could sell for given amount of Dai. https://www.desmos.com/calculator/0rgnmtckvy\"},\"fyDaiOutForDaiIn(uint128,uint128,uint128,uint128,int128,int128)\":{\"notice\":\"Calculate the amount of fyDai a user would get for given amount of Dai. https://www.desmos.com/calculator/5nf2xuy6yb\"},\"initialReservesValue(uint128,uint128,uint128,int128,int128)\":{\"notice\":\"Estimate in Dai the value of reserves at protocol initialization time.\"}},\"notice\":\"Ethereum smart contract library implementing Yield Math model.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YieldMath.sol\":\"YieldMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"contracts/Math64x64.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n/*\\r\\n *  Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by  Consulting.\\r\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\r\\n */\\r\\npragma solidity ^0.7.5;\\r\\n\\r\\n/**\\r\\n * Smart contract library of mathematical functions operating with signed\\r\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\r\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\r\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\r\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\r\\n * represented by int128 type holding only the numerator.\\r\\n */\\r\\nlibrary Math64x64 {\\r\\n  /**\\r\\n   * @dev Minimum value signed 64.64-bit fixed point number may have. \\r\\n   */\\r\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\r\\n\\r\\n  /**\\r\\n   * @dev Maximum value signed 64.64-bit fixed point number may have. \\r\\n   */\\r\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n  /**\\r\\n   * @dev Convert signed 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromInt (int256 x) internal pure returns (int128) {\\r\\n    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\r\\n    return int128 (x << 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Convert signed 64.64 fixed point number into signed 64-bit integer number\\r\\n   * rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64-bit integer number\\r\\n   */\\r\\n  function toInt (int128 x) internal pure returns (int64) {\\r\\n    return int64 (x >> 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\r\\n    require (x <= 0x7FFFFFFFFFFFFFFF);\\r\\n    return int128 (x << 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Convert signed 64.64 fixed point number into unsigned 64-bit integer\\r\\n   * number rounding down.  Revert on underflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return unsigned 64-bit integer number\\r\\n   */\\r\\n  function toUInt (int128 x) internal pure returns (uint64) {\\r\\n    require (x >= 0);\\r\\n    return uint64 (x >> 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\r\\n   * number rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 128.128-bin fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function from128x128 (int256 x) internal pure returns (int128) {\\r\\n    int256 result = x >> 64;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Convert signed 64.64 fixed point number into signed 128.128 fixed point\\r\\n   * number.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 128.128 fixed point number\\r\\n   */\\r\\n  function to128x128 (int128 x) internal pure returns (int256) {\\r\\n    return int256 (x) << 64;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x + y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) + y;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x - y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) - y;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x * y rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) * y >> 64;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\r\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 256-bit integer number\\r\\n   */\\r\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\r\\n    if (x == MIN_64x64) {\\r\\n      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\r\\n        y <= 0x1000000000000000000000000000000000000000000000000);\\r\\n      return -y << 63;\\r\\n    } else {\\r\\n      bool negativeResult = false;\\r\\n      if (x < 0) {\\r\\n        x = -x;\\r\\n        negativeResult = true;\\r\\n      }\\r\\n      if (y < 0) {\\r\\n        y = -y; // We rely on overflow behavior here\\r\\n        negativeResult = !negativeResult;\\r\\n      }\\r\\n      uint256 absoluteResult = mulu (x, uint256 (y));\\r\\n      if (negativeResult) {\\r\\n        require (absoluteResult <=\\r\\n          0x8000000000000000000000000000000000000000000000000000000000000000);\\r\\n        return -int256 (absoluteResult); // We rely on overflow behavior here\\r\\n      } else {\\r\\n        require (absoluteResult <=\\r\\n          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n        return int256 (absoluteResult);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x * y rounding down, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 256-bit integer number\\r\\n   */\\r\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\r\\n    if (y == 0) return 0;\\r\\n\\r\\n    require (x >= 0);\\r\\n\\r\\n    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\r\\n    uint256 hi = uint256 (x) * (y >> 128);\\r\\n\\r\\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n    hi <<= 64;\\r\\n\\r\\n    require (hi <=\\r\\n      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\r\\n    return hi + lo;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x / y rounding towards zero.  Revert on overflow or when y is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n    int256 result = (int256 (x) << 64) / y;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x / y rounding towards zero, where x and y are signed 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n\\r\\n    bool negativeResult = false;\\r\\n    if (x < 0) {\\r\\n      x = -x; // We rely on overflow behavior here\\r\\n      negativeResult = true;\\r\\n    }\\r\\n    if (y < 0) {\\r\\n      y = -y; // We rely on overflow behavior here\\r\\n      negativeResult = !negativeResult;\\r\\n    }\\r\\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\r\\n    if (negativeResult) {\\r\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\r\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    } else {\\r\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n    uint128 result = divuu (x, y);\\r\\n    require (result <= uint128 (MAX_64x64));\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate -x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function neg (int128 x) internal pure returns (int128) {\\r\\n    require (x != MIN_64x64);\\r\\n    return -x;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate |x|.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function abs (int128 x) internal pure returns (int128) {\\r\\n    require (x != MIN_64x64);\\r\\n    return x < 0 ? -x : x;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function inv (int128 x) internal pure returns (int128) {\\r\\n    require (x != 0);\\r\\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    return int128 ((int256 (x) + int256 (y)) >> 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\r\\n   * Revert on overflow or in case x * y is negative.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 m = int256 (x) * int256 (y);\\r\\n    require (m >= 0);\\r\\n    require (m <\\r\\n        0x4000000000000000000000000000000000000000000000000000000000000000);\\r\\n    return int128 (sqrtu (uint256 (m), uint256 (x) + uint256 (y) >> 1));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\r\\n    uint256 absoluteResult;\\r\\n    bool negativeResult = false;\\r\\n    if (x >= 0) {\\r\\n      absoluteResult = powu (uint256 (x) << 63, y);\\r\\n    } else {\\r\\n      // We rely on overflow behavior here\\r\\n      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\\r\\n      negativeResult = y & 1 > 0;\\r\\n    }\\r\\n\\r\\n    absoluteResult >>= 63;\\r\\n\\r\\n    if (negativeResult) {\\r\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\r\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    } else {\\r\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate sqrt (x) rounding down.  Revert if x < 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sqrt (int128 x) internal pure returns (int128) {\\r\\n    require (x >= 0);\\r\\n    return int128 (sqrtu (uint256 (x) << 64, 0x10000000000000000));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate binary logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function log_2 (int128 x) internal pure returns (int128) {\\r\\n    require (x > 0);\\r\\n\\r\\n    int256 msb = 0;\\r\\n    int256 xc = x;\\r\\n    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\r\\n    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n    if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n    if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n    if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n    int256 result = msb - 64 << 64;\\r\\n    uint256 ux = uint256 (x) << uint256(127 - msb);\\r\\n    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\r\\n      ux *= ux;\\r\\n      uint256 b = ux >> 255;\\r\\n      ux >>= 127 + b;\\r\\n      result += bit * int256 (b);\\r\\n    }\\r\\n\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate natural logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function ln (int128 x) internal pure returns (int128) {\\r\\n    require (x > 0);\\r\\n\\r\\n    return int128 (\\r\\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate binary exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp_2 (int128 x) internal pure returns (int128) {\\r\\n    require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n    if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n    uint256 result = 0x80000000000000000000000000000000;\\r\\n\\r\\n    if (x & 0x8000000000000000 > 0)\\r\\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\r\\n    if (x & 0x4000000000000000 > 0)\\r\\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\r\\n    if (x & 0x2000000000000000 > 0)\\r\\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\r\\n    if (x & 0x1000000000000000 > 0)\\r\\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\r\\n    if (x & 0x800000000000000 > 0)\\r\\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\r\\n    if (x & 0x400000000000000 > 0)\\r\\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\r\\n    if (x & 0x200000000000000 > 0)\\r\\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\r\\n    if (x & 0x100000000000000 > 0)\\r\\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\r\\n    if (x & 0x80000000000000 > 0)\\r\\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\r\\n    if (x & 0x40000000000000 > 0)\\r\\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\r\\n    if (x & 0x20000000000000 > 0)\\r\\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\r\\n    if (x & 0x10000000000000 > 0)\\r\\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\r\\n    if (x & 0x8000000000000 > 0)\\r\\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\r\\n    if (x & 0x4000000000000 > 0)\\r\\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\r\\n    if (x & 0x2000000000000 > 0)\\r\\n      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\r\\n    if (x & 0x1000000000000 > 0)\\r\\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\r\\n    if (x & 0x800000000000 > 0)\\r\\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\r\\n    if (x & 0x400000000000 > 0)\\r\\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\r\\n    if (x & 0x200000000000 > 0)\\r\\n      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\r\\n    if (x & 0x100000000000 > 0)\\r\\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\r\\n    if (x & 0x80000000000 > 0)\\r\\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\r\\n    if (x & 0x40000000000 > 0)\\r\\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\r\\n    if (x & 0x20000000000 > 0)\\r\\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\r\\n    if (x & 0x10000000000 > 0)\\r\\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\r\\n    if (x & 0x8000000000 > 0)\\r\\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\r\\n    if (x & 0x4000000000 > 0)\\r\\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\r\\n    if (x & 0x2000000000 > 0)\\r\\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\r\\n    if (x & 0x1000000000 > 0)\\r\\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\r\\n    if (x & 0x800000000 > 0)\\r\\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\r\\n    if (x & 0x400000000 > 0)\\r\\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\r\\n    if (x & 0x200000000 > 0)\\r\\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\r\\n    if (x & 0x100000000 > 0)\\r\\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\r\\n    if (x & 0x80000000 > 0)\\r\\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\r\\n    if (x & 0x40000000 > 0)\\r\\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\r\\n    if (x & 0x20000000 > 0)\\r\\n      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\r\\n    if (x & 0x10000000 > 0)\\r\\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\r\\n    if (x & 0x8000000 > 0)\\r\\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\r\\n    if (x & 0x4000000 > 0)\\r\\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\r\\n    if (x & 0x2000000 > 0)\\r\\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\r\\n    if (x & 0x1000000 > 0)\\r\\n      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\r\\n    if (x & 0x800000 > 0)\\r\\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\r\\n    if (x & 0x400000 > 0)\\r\\n      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\r\\n    if (x & 0x200000 > 0)\\r\\n      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\r\\n    if (x & 0x100000 > 0)\\r\\n      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\r\\n    if (x & 0x80000 > 0)\\r\\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\r\\n    if (x & 0x40000 > 0)\\r\\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\r\\n    if (x & 0x20000 > 0)\\r\\n      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\r\\n    if (x & 0x10000 > 0)\\r\\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\r\\n    if (x & 0x8000 > 0)\\r\\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\r\\n    if (x & 0x4000 > 0)\\r\\n      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\r\\n    if (x & 0x2000 > 0)\\r\\n      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\r\\n    if (x & 0x1000 > 0)\\r\\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\r\\n    if (x & 0x800 > 0)\\r\\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\r\\n    if (x & 0x400 > 0)\\r\\n      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\r\\n    if (x & 0x200 > 0)\\r\\n      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\r\\n    if (x & 0x100 > 0)\\r\\n      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\r\\n    if (x & 0x80 > 0)\\r\\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\r\\n    if (x & 0x40 > 0)\\r\\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\r\\n    if (x & 0x20 > 0)\\r\\n      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\r\\n    if (x & 0x10 > 0)\\r\\n      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\r\\n    if (x & 0x8 > 0)\\r\\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\r\\n    if (x & 0x4 > 0)\\r\\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\r\\n    if (x & 0x2 > 0)\\r\\n      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\r\\n    if (x & 0x1 > 0)\\r\\n      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\r\\n\\r\\n    result >>= uint256(63 - (x >> 64));\\r\\n    require (result <= uint256 (MAX_64x64));\\r\\n\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate natural exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp (int128 x) internal pure returns (int128) {\\r\\n    require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n    if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n    return exp_2 (\\r\\n        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 64.64-bit fixed point number\\r\\n   */\\r\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\r\\n    require (y != 0);\\r\\n\\r\\n    uint256 result;\\r\\n\\r\\n    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\r\\n      result = (x << 64) / y;\\r\\n    else {\\r\\n      uint256 msb = 192;\\r\\n      uint256 xc = x >> 192;\\r\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\r\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n      uint256 hi = result * (y >> 128);\\r\\n      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n      uint256 xh = x >> 192;\\r\\n      uint256 xl = x << 64;\\r\\n\\r\\n      if (xl < lo) xh -= 1;\\r\\n      xl -= lo; // We rely on overflow behavior here\\r\\n      lo = hi << 128;\\r\\n      if (xl < lo) xh -= 1;\\r\\n      xl -= lo; // We rely on overflow behavior here\\r\\n\\r\\n      assert (xh == hi >> 128);\\r\\n\\r\\n      result += xl / y;\\r\\n    }\\r\\n\\r\\n    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n    return uint128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\\r\\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x unsigned 129.127-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return unsigned 129.127-bit fixed point number\\r\\n   */\\r\\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\\r\\n    if (y == 0) return 0x80000000000000000000000000000000;\\r\\n    else if (x == 0) return 0;\\r\\n    else {\\r\\n      int256 msb = 0;\\r\\n      uint256 xc = x;\\r\\n      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\\r\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\r\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n      int256 xe = msb - 127;\\r\\n      if (xe > 0) x >>= uint256(xe);\\r\\n      else x <<= -uint256(xe);\\r\\n\\r\\n      uint256 result = 0x80000000000000000000000000000000;\\r\\n      int256 re = 0;\\r\\n\\r\\n      while (y > 0) {\\r\\n        if (y & 1 > 0) {\\r\\n          result = result * x;\\r\\n          y -= 1;\\r\\n          re += xe;\\r\\n          if (result >=\\r\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\r\\n            result >>= 128;\\r\\n            re += 1;\\r\\n          } else result >>= 127;\\r\\n          if (re < -127) return 0; // Underflow\\r\\n          require (re < 128); // Overflow\\r\\n        } else {\\r\\n          x = x * x;\\r\\n          y >>= 1;\\r\\n          xe <<= 1;\\r\\n          if (x >=\\r\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\r\\n            x >>= 128;\\r\\n            xe += 1;\\r\\n          } else x >>= 127;\\r\\n          if (xe < -127) return 0; // Underflow\\r\\n          require (xe < 128); // Overflow\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (re > 0) result <<= uint256(re);\\r\\n      else if (re < 0) result >>= -uint256(re);\\r\\n\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\r\\n   * number.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return unsigned 128-bit integer number\\r\\n   */\\r\\n  function sqrtu (uint256 x, uint256 r) private pure returns (uint128) {\\r\\n    if (x == 0) return 0;\\r\\n    else {\\r\\n      require (r > 0);\\r\\n      while (true) {\\r\\n        uint256 rr = x / r;\\r\\n        if (r == rr || r + 1 == rr) return uint128 (r);\\r\\n        else if (r == rr + 1) return uint128 (rr);\\r\\n        r = r + rr + 1 >> 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xc6b742c224d4ac0385b58d5a672155c7b20b570e6cea612a021276184820c22b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/YieldMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.7.5;\\r\\n\\r\\nimport \\\"./Math64x64.sol\\\";\\r\\n\\r\\nlibrary Exp64x64 {\\r\\n  /**\\r\\n   * Raise given number x into power specified as a simple fraction y/z and then\\r\\n   * multiply the result by the normalization factor 2^(128 * (1 - y/z)).\\r\\n   * Revert if z is zero, or if both x and y are zeros.\\r\\n   *\\r\\n   * @param x number to raise into given power y/z\\r\\n   * @param y numerator of the power to raise x into\\r\\n   * @param z denominator of the power to raise x into\\r\\n   * @return x raised into power y/z and then multiplied by 2^(128 * (1 - y/z))\\r\\n   */\\r\\n  function pow(uint128 x, uint128 y, uint128 z)\\r\\n  internal pure returns(uint128) {\\r\\n    require(z != 0);\\r\\n\\r\\n    if(x == 0) {\\r\\n      require(y != 0);\\r\\n      return 0;\\r\\n    } else {\\r\\n      uint256 l =\\r\\n        uint256(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - log_2(x)) * y / z;\\r\\n      if(l > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) return 0;\\r\\n      else return pow_2(uint128(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - l));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate base 2 logarithm of an unsigned 128-bit integer number.  Revert\\r\\n   * in case x is zero.\\r\\n   *\\r\\n   * @param x number to calculate base 2 logarithm of\\r\\n   * @return base 2 logarithm of x, multiplied by 2^121\\r\\n   */\\r\\n  function log_2(uint128 x)\\r\\n  internal pure returns(uint128) {\\r\\n    require(x != 0);\\r\\n\\r\\n    uint b = x;\\r\\n\\r\\n    uint l = 0xFE000000000000000000000000000000;\\r\\n\\r\\n    if(b < 0x10000000000000000) {l -= 0x80000000000000000000000000000000; b <<= 64;}\\r\\n    if(b < 0x1000000000000000000000000) {l -= 0x40000000000000000000000000000000; b <<= 32;}\\r\\n    if(b < 0x10000000000000000000000000000) {l -= 0x20000000000000000000000000000000; b <<= 16;}\\r\\n    if(b < 0x1000000000000000000000000000000) {l -= 0x10000000000000000000000000000000; b <<= 8;}\\r\\n    if(b < 0x10000000000000000000000000000000) {l -= 0x8000000000000000000000000000000; b <<= 4;}\\r\\n    if(b < 0x40000000000000000000000000000000) {l -= 0x4000000000000000000000000000000; b <<= 2;}\\r\\n    if(b < 0x80000000000000000000000000000000) {l -= 0x2000000000000000000000000000000; b <<= 1;}\\r\\n\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000;} /*\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) l |= 0x1; */\\r\\n\\r\\n    return uint128(l);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate 2 raised into given power.\\r\\n   *\\r\\n   * @param x power to raise 2 into, multiplied by 2^121\\r\\n   * @return 2 raised into given power\\r\\n   */\\r\\n  function pow_2(uint128 x)\\r\\n  internal pure returns(uint128) {\\r\\n    uint r = 0x80000000000000000000000000000000;\\r\\n    if(x & 0x1000000000000000000000000000000 > 0) r = r * 0xb504f333f9de6484597d89b3754abe9f >> 127;\\r\\n    if(x & 0x800000000000000000000000000000 > 0) r = r * 0x9837f0518db8a96f46ad23182e42f6f6 >> 127;\\r\\n    if(x & 0x400000000000000000000000000000 > 0) r = r * 0x8b95c1e3ea8bd6e6fbe4628758a53c90 >> 127;\\r\\n    if(x & 0x200000000000000000000000000000 > 0) r = r * 0x85aac367cc487b14c5c95b8c2154c1b2 >> 127;\\r\\n    if(x & 0x100000000000000000000000000000 > 0) r = r * 0x82cd8698ac2ba1d73e2a475b46520bff >> 127;\\r\\n    if(x & 0x80000000000000000000000000000 > 0) r = r * 0x8164d1f3bc0307737be56527bd14def4 >> 127;\\r\\n    if(x & 0x40000000000000000000000000000 > 0) r = r * 0x80b1ed4fd999ab6c25335719b6e6fd20 >> 127;\\r\\n    if(x & 0x20000000000000000000000000000 > 0) r = r * 0x8058d7d2d5e5f6b094d589f608ee4aa2 >> 127;\\r\\n    if(x & 0x10000000000000000000000000000 > 0) r = r * 0x802c6436d0e04f50ff8ce94a6797b3ce >> 127;\\r\\n    if(x & 0x8000000000000000000000000000 > 0) r = r * 0x8016302f174676283690dfe44d11d008 >> 127;\\r\\n    if(x & 0x4000000000000000000000000000 > 0) r = r * 0x800b179c82028fd0945e54e2ae18f2f0 >> 127;\\r\\n    if(x & 0x2000000000000000000000000000 > 0) r = r * 0x80058baf7fee3b5d1c718b38e549cb93 >> 127;\\r\\n    if(x & 0x1000000000000000000000000000 > 0) r = r * 0x8002c5d00fdcfcb6b6566a58c048be1f >> 127;\\r\\n    if(x & 0x800000000000000000000000000 > 0) r = r * 0x800162e61bed4a48e84c2e1a463473d9 >> 127;\\r\\n    if(x & 0x400000000000000000000000000 > 0) r = r * 0x8000b17292f702a3aa22beacca949013 >> 127;\\r\\n    if(x & 0x200000000000000000000000000 > 0) r = r * 0x800058b92abbae02030c5fa5256f41fe >> 127;\\r\\n    if(x & 0x100000000000000000000000000 > 0) r = r * 0x80002c5c8dade4d71776c0f4dbea67d6 >> 127;\\r\\n    if(x & 0x80000000000000000000000000 > 0) r = r * 0x8000162e44eaf636526be456600bdbe4 >> 127;\\r\\n    if(x & 0x40000000000000000000000000 > 0) r = r * 0x80000b1721fa7c188307016c1cd4e8b6 >> 127;\\r\\n    if(x & 0x20000000000000000000000000 > 0) r = r * 0x8000058b90de7e4cecfc487503488bb1 >> 127;\\r\\n    if(x & 0x10000000000000000000000000 > 0) r = r * 0x800002c5c8678f36cbfce50a6de60b14 >> 127;\\r\\n    if(x & 0x8000000000000000000000000 > 0) r = r * 0x80000162e431db9f80b2347b5d62e516 >> 127;\\r\\n    if(x & 0x4000000000000000000000000 > 0) r = r * 0x800000b1721872d0c7b08cf1e0114152 >> 127;\\r\\n    if(x & 0x2000000000000000000000000 > 0) r = r * 0x80000058b90c1aa8a5c3736cb77e8dff >> 127;\\r\\n    if(x & 0x1000000000000000000000000 > 0) r = r * 0x8000002c5c8605a4635f2efc2362d978 >> 127;\\r\\n    if(x & 0x800000000000000000000000 > 0) r = r * 0x800000162e4300e635cf4a109e3939bd >> 127;\\r\\n    if(x & 0x400000000000000000000000 > 0) r = r * 0x8000000b17217ff81bef9c551590cf83 >> 127;\\r\\n    if(x & 0x200000000000000000000000 > 0) r = r * 0x800000058b90bfdd4e39cd52c0cfa27c >> 127;\\r\\n    if(x & 0x100000000000000000000000 > 0) r = r * 0x80000002c5c85fe6f72d669e0e76e411 >> 127;\\r\\n    if(x & 0x80000000000000000000000 > 0) r = r * 0x8000000162e42ff18f9ad35186d0df28 >> 127;\\r\\n    if(x & 0x40000000000000000000000 > 0) r = r * 0x80000000b17217f84cce71aa0dcfffe7 >> 127;\\r\\n    if(x & 0x20000000000000000000000 > 0) r = r * 0x8000000058b90bfc07a77ad56ed22aaa >> 127;\\r\\n    if(x & 0x10000000000000000000000 > 0) r = r * 0x800000002c5c85fdfc23cdead40da8d6 >> 127;\\r\\n    if(x & 0x8000000000000000000000 > 0) r = r * 0x80000000162e42fefc25eb1571853a66 >> 127;\\r\\n    if(x & 0x4000000000000000000000 > 0) r = r * 0x800000000b17217f7d97f692baacded5 >> 127;\\r\\n    if(x & 0x2000000000000000000000 > 0) r = r * 0x80000000058b90bfbead3b8b5dd254d7 >> 127;\\r\\n    if(x & 0x1000000000000000000000 > 0) r = r * 0x8000000002c5c85fdf4eedd62f084e67 >> 127;\\r\\n    if(x & 0x800000000000000000000 > 0) r = r * 0x800000000162e42fefa58aef378bf586 >> 127;\\r\\n    if(x & 0x400000000000000000000 > 0) r = r * 0x8000000000b17217f7d24a78a3c7ef02 >> 127;\\r\\n    if(x & 0x200000000000000000000 > 0) r = r * 0x800000000058b90bfbe9067c93e474a6 >> 127;\\r\\n    if(x & 0x100000000000000000000 > 0) r = r * 0x80000000002c5c85fdf47b8e5a72599f >> 127;\\r\\n    if(x & 0x80000000000000000000 > 0) r = r * 0x8000000000162e42fefa3bdb315934a2 >> 127;\\r\\n    if(x & 0x40000000000000000000 > 0) r = r * 0x80000000000b17217f7d1d7299b49c46 >> 127;\\r\\n    if(x & 0x20000000000000000000 > 0) r = r * 0x8000000000058b90bfbe8e9a8d1c4ea0 >> 127;\\r\\n    if(x & 0x10000000000000000000 > 0) r = r * 0x800000000002c5c85fdf4745969ea76f >> 127;\\r\\n    if(x & 0x8000000000000000000 > 0) r = r * 0x80000000000162e42fefa3a0df5373bf >> 127;\\r\\n    if(x & 0x4000000000000000000 > 0) r = r * 0x800000000000b17217f7d1cff4aac1e1 >> 127;\\r\\n    if(x & 0x2000000000000000000 > 0) r = r * 0x80000000000058b90bfbe8e7db95a2f1 >> 127;\\r\\n    if(x & 0x1000000000000000000 > 0) r = r * 0x8000000000002c5c85fdf473e61ae1f8 >> 127;\\r\\n    if(x & 0x800000000000000000 > 0) r = r * 0x800000000000162e42fefa39f121751c >> 127;\\r\\n    if(x & 0x400000000000000000 > 0) r = r * 0x8000000000000b17217f7d1cf815bb96 >> 127;\\r\\n    if(x & 0x200000000000000000 > 0) r = r * 0x800000000000058b90bfbe8e7bec1e0d >> 127;\\r\\n    if(x & 0x100000000000000000 > 0) r = r * 0x80000000000002c5c85fdf473dee5f17 >> 127;\\r\\n    if(x & 0x80000000000000000 > 0) r = r * 0x8000000000000162e42fefa39ef5438f >> 127;\\r\\n    if(x & 0x40000000000000000 > 0) r = r * 0x80000000000000b17217f7d1cf7a26c8 >> 127;\\r\\n    if(x & 0x20000000000000000 > 0) r = r * 0x8000000000000058b90bfbe8e7bcf4a4 >> 127;\\r\\n    if(x & 0x10000000000000000 > 0) r = r * 0x800000000000002c5c85fdf473de72a2 >> 127; /*\\r\\n    if(x & 0x8000000000000000 > 0) r = r * 0x80000000000000162e42fefa39ef3765 >> 127;\\r\\n    if(x & 0x4000000000000000 > 0) r = r * 0x800000000000000b17217f7d1cf79b37 >> 127;\\r\\n    if(x & 0x2000000000000000 > 0) r = r * 0x80000000000000058b90bfbe8e7bcd7d >> 127;\\r\\n    if(x & 0x1000000000000000 > 0) r = r * 0x8000000000000002c5c85fdf473de6b6 >> 127;\\r\\n    if(x & 0x800000000000000 > 0) r = r * 0x800000000000000162e42fefa39ef359 >> 127;\\r\\n    if(x & 0x400000000000000 > 0) r = r * 0x8000000000000000b17217f7d1cf79ac >> 127;\\r\\n    if(x & 0x200000000000000 > 0) r = r * 0x800000000000000058b90bfbe8e7bcd6 >> 127;\\r\\n    if(x & 0x100000000000000 > 0) r = r * 0x80000000000000002c5c85fdf473de6a >> 127;\\r\\n    if(x & 0x80000000000000 > 0) r = r * 0x8000000000000000162e42fefa39ef35 >> 127;\\r\\n    if(x & 0x40000000000000 > 0) r = r * 0x80000000000000000b17217f7d1cf79a >> 127;\\r\\n    if(x & 0x20000000000000 > 0) r = r * 0x8000000000000000058b90bfbe8e7bcd >> 127;\\r\\n    if(x & 0x10000000000000 > 0) r = r * 0x800000000000000002c5c85fdf473de6 >> 127;\\r\\n    if(x & 0x8000000000000 > 0) r = r * 0x80000000000000000162e42fefa39ef3 >> 127;\\r\\n    if(x & 0x4000000000000 > 0) r = r * 0x800000000000000000b17217f7d1cf79 >> 127;\\r\\n    if(x & 0x2000000000000 > 0) r = r * 0x80000000000000000058b90bfbe8e7bc >> 127;\\r\\n    if(x & 0x1000000000000 > 0) r = r * 0x8000000000000000002c5c85fdf473de >> 127;\\r\\n    if(x & 0x800000000000 > 0) r = r * 0x800000000000000000162e42fefa39ef >> 127;\\r\\n    if(x & 0x400000000000 > 0) r = r * 0x8000000000000000000b17217f7d1cf7 >> 127;\\r\\n    if(x & 0x200000000000 > 0) r = r * 0x800000000000000000058b90bfbe8e7b >> 127;\\r\\n    if(x & 0x100000000000 > 0) r = r * 0x80000000000000000002c5c85fdf473d >> 127;\\r\\n    if(x & 0x80000000000 > 0) r = r * 0x8000000000000000000162e42fefa39e >> 127;\\r\\n    if(x & 0x40000000000 > 0) r = r * 0x80000000000000000000b17217f7d1cf >> 127;\\r\\n    if(x & 0x20000000000 > 0) r = r * 0x8000000000000000000058b90bfbe8e7 >> 127;\\r\\n    if(x & 0x10000000000 > 0) r = r * 0x800000000000000000002c5c85fdf473 >> 127;\\r\\n    if(x & 0x8000000000 > 0) r = r * 0x80000000000000000000162e42fefa39 >> 127;\\r\\n    if(x & 0x4000000000 > 0) r = r * 0x800000000000000000000b17217f7d1c >> 127;\\r\\n    if(x & 0x2000000000 > 0) r = r * 0x80000000000000000000058b90bfbe8e >> 127;\\r\\n    if(x & 0x1000000000 > 0) r = r * 0x8000000000000000000002c5c85fdf47 >> 127;\\r\\n    if(x & 0x800000000 > 0) r = r * 0x800000000000000000000162e42fefa3 >> 127;\\r\\n    if(x & 0x400000000 > 0) r = r * 0x8000000000000000000000b17217f7d1 >> 127;\\r\\n    if(x & 0x200000000 > 0) r = r * 0x800000000000000000000058b90bfbe8 >> 127;\\r\\n    if(x & 0x100000000 > 0) r = r * 0x80000000000000000000002c5c85fdf4 >> 127;\\r\\n    if(x & 0x80000000 > 0) r = r * 0x8000000000000000000000162e42fefa >> 127;\\r\\n    if(x & 0x40000000 > 0) r = r * 0x80000000000000000000000b17217f7d >> 127;\\r\\n    if(x & 0x20000000 > 0) r = r * 0x8000000000000000000000058b90bfbe >> 127;\\r\\n    if(x & 0x10000000 > 0) r = r * 0x800000000000000000000002c5c85fdf >> 127;\\r\\n    if(x & 0x8000000 > 0) r = r * 0x80000000000000000000000162e42fef >> 127;\\r\\n    if(x & 0x4000000 > 0) r = r * 0x800000000000000000000000b17217f7 >> 127;\\r\\n    if(x & 0x2000000 > 0) r = r * 0x80000000000000000000000058b90bfb >> 127;\\r\\n    if(x & 0x1000000 > 0) r = r * 0x8000000000000000000000002c5c85fd >> 127;\\r\\n    if(x & 0x800000 > 0) r = r * 0x800000000000000000000000162e42fe >> 127;\\r\\n    if(x & 0x400000 > 0) r = r * 0x8000000000000000000000000b17217f >> 127;\\r\\n    if(x & 0x200000 > 0) r = r * 0x800000000000000000000000058b90bf >> 127;\\r\\n    if(x & 0x100000 > 0) r = r * 0x80000000000000000000000002c5c85f >> 127;\\r\\n    if(x & 0x80000 > 0) r = r * 0x8000000000000000000000000162e42f >> 127;\\r\\n    if(x & 0x40000 > 0) r = r * 0x80000000000000000000000000b17217 >> 127;\\r\\n    if(x & 0x20000 > 0) r = r * 0x8000000000000000000000000058b90b >> 127;\\r\\n    if(x & 0x10000 > 0) r = r * 0x800000000000000000000000002c5c85 >> 127;\\r\\n    if(x & 0x8000 > 0) r = r * 0x80000000000000000000000000162e42 >> 127;\\r\\n    if(x & 0x4000 > 0) r = r * 0x800000000000000000000000000b1721 >> 127;\\r\\n    if(x & 0x2000 > 0) r = r * 0x80000000000000000000000000058b90 >> 127;\\r\\n    if(x & 0x1000 > 0) r = r * 0x8000000000000000000000000002c5c8 >> 127;\\r\\n    if(x & 0x800 > 0) r = r * 0x800000000000000000000000000162e4 >> 127;\\r\\n    if(x & 0x400 > 0) r = r * 0x8000000000000000000000000000b172 >> 127;\\r\\n    if(x & 0x200 > 0) r = r * 0x800000000000000000000000000058b9 >> 127;\\r\\n    if(x & 0x100 > 0) r = r * 0x80000000000000000000000000002c5c >> 127;\\r\\n    if(x & 0x80 > 0) r = r * 0x8000000000000000000000000000162e >> 127;\\r\\n    if(x & 0x40 > 0) r = r * 0x80000000000000000000000000000b17 >> 127;\\r\\n    if(x & 0x20 > 0) r = r * 0x8000000000000000000000000000058b >> 127;\\r\\n    if(x & 0x10 > 0) r = r * 0x800000000000000000000000000002c5 >> 127;\\r\\n    if(x & 0x8 > 0) r = r * 0x80000000000000000000000000000162 >> 127;\\r\\n    if(x & 0x4 > 0) r = r * 0x800000000000000000000000000000b1 >> 127;\\r\\n    if(x & 0x2 > 0) r = r * 0x80000000000000000000000000000058 >> 127;\\r\\n    if(x & 0x1 > 0) r = r * 0x8000000000000000000000000000002c >> 127; */\\r\\n\\r\\n    r >>= 127 -(x >> 121);\\r\\n\\r\\n    return uint128(r);\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Ethereum smart contract library implementing Yield Math model.\\r\\n */\\r\\nlibrary YieldMath {\\r\\n  using Math64x64 for int128;\\r\\n  using Math64x64 for uint128;\\r\\n  using Math64x64 for int256;\\r\\n  using Math64x64 for uint256;\\r\\n  using Exp64x64 for uint128;\\r\\n\\r\\n  uint128 public constant ONE = 0x10000000000000000; // In 64.64\\r\\n  uint256 public constant MAX = type(uint128).max;   // Used for overflow checks\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of fyDai a user would get for given amount of Dai.\\r\\n   * https://www.desmos.com/calculator/5nf2xuy6yb\\r\\n   * @param daiReserves dai reserves amount\\r\\n   * @param fyDaiReserves fyDai reserves amount\\r\\n   * @param daiAmount dai amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param k time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of fyDai a user would get for given amount of Dai\\r\\n   */\\r\\n  function fyDaiOutForDaiIn(\\r\\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 daiAmount,\\r\\n    uint128 timeTillMaturity, int128 k, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    uint128 a = _computeA(timeTillMaturity, k, g);\\r\\n\\r\\n    // za = daiReserves ** a\\r\\n    uint256 za = daiReserves.pow(a, ONE);\\r\\n\\r\\n    // ya = fyDaiReserves ** a\\r\\n    uint256 ya = fyDaiReserves.pow(a, ONE);\\r\\n\\r\\n    // zx = daiReserves + daiAmount\\r\\n    uint256 zx = uint256(daiReserves) + uint256(daiAmount);\\r\\n    require(zx <= MAX, \\\"YieldMath: Too much dai in\\\");\\r\\n\\r\\n    // zxa = zx ** a\\r\\n    uint256 zxa = uint128(zx).pow(a, ONE);\\r\\n\\r\\n    // sum = za + ya - zxa\\r\\n    uint256 sum = za + ya - zxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n    require(sum <= MAX, \\\"YieldMath: Insufficient fyDai reserves\\\");\\r\\n\\r\\n    // result = fyDaiReserves - (sum ** (1/a))\\r\\n    uint256 result = uint256(fyDaiReserves) - uint256(uint128(sum).pow(ONE, a));\\r\\n    require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n    result = result > 1e12 ? result - 1e12 : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n    return uint128(result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of dai a user would get for certain amount of fyDai.\\r\\n   * https://www.desmos.com/calculator/6jlrre7ybt\\r\\n   * @param daiReserves dai reserves amount\\r\\n   * @param fyDaiReserves fyDai reserves amount\\r\\n   * @param fyDaiAmount fyDai amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param k time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of Dai a user would get for given amount of fyDai\\r\\n   */\\r\\n  function daiOutForFYDaiIn(\\r\\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 fyDaiAmount,\\r\\n    uint128 timeTillMaturity, int128 k, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    uint128 a = _computeA(timeTillMaturity, k, g);\\r\\n\\r\\n    // za = daiReserves ** a\\r\\n    uint256 za = daiReserves.pow(a, ONE);\\r\\n\\r\\n    // ya = fyDaiReserves ** a\\r\\n    uint256 ya = fyDaiReserves.pow(a, ONE);\\r\\n\\r\\n    // yx = fyDayReserves + fyDaiAmount\\r\\n    uint256 yx = uint256(fyDaiReserves) + uint256(fyDaiAmount);\\r\\n    require(yx <= MAX, \\\"YieldMath: Too much fyDai in\\\");\\r\\n\\r\\n    // yxa = yx ** a\\r\\n    uint256 yxa = uint128(yx).pow(a, ONE);\\r\\n\\r\\n    // sum = za + ya - yxa\\r\\n    uint256 sum = za + ya - yxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n    require(sum <= MAX, \\\"YieldMath: Insufficient dai reserves\\\");\\r\\n\\r\\n    // result = daiReserves - (sum ** (1/a))\\r\\n    uint256 result = uint256(daiReserves) - uint256(uint128(sum).pow(ONE, a));\\r\\n    require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n    result = result > 1e12 ? result - 1e12 : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n    return uint128(result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of fyDai a user could sell for given amount of Dai.\\r\\n   * https://www.desmos.com/calculator/0rgnmtckvy\\r\\n   * @param daiReserves dai reserves amount\\r\\n   * @param fyDaiReserves fyDai reserves amount\\r\\n   * @param daiAmount Dai amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param k time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of fyDai a user could sell for given amount of Dai\\r\\n   */\\r\\n  function fyDaiInForDaiOut(\\r\\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 daiAmount,\\r\\n    uint128 timeTillMaturity, int128 k, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    uint128 a = _computeA(timeTillMaturity, k, g);\\r\\n\\r\\n    // za = daiReserves ** a\\r\\n    uint256 za = daiReserves.pow(a, ONE);\\r\\n\\r\\n    // ya = fyDaiReserves ** a\\r\\n    uint256 ya = fyDaiReserves.pow(a, ONE);\\r\\n\\r\\n    // zx = daiReserves - daiAmount\\r\\n    uint256 zx = uint256(daiReserves) - uint256(daiAmount);\\r\\n    require(zx <= MAX, \\\"YieldMath: Too much dai out\\\");\\r\\n\\r\\n    // zxa = zx ** a\\r\\n    uint256 zxa = uint128(zx).pow(a, ONE);\\r\\n\\r\\n    // sum = za + ya - zxa\\r\\n    uint256 sum = za + ya - zxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n    require(sum <= MAX, \\\"YieldMath: Resulting fyDai reserves too high\\\");\\r\\n\\r\\n    // result = (sum ** (1/a)) - fyDaiReserves\\r\\n    uint256 result = uint256(uint128(sum).pow(ONE, a)) - uint256(fyDaiReserves);\\r\\n    require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n    result = result < MAX - 1e12 ? result + 1e12 : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n    return uint128(result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of dai a user would have to pay for certain amount of fyDai.\\r\\n   * https://www.desmos.com/calculator/ws5oqj8x5i\\r\\n   * @param daiReserves Dai reserves amount\\r\\n   * @param fyDaiReserves fyDai reserves amount\\r\\n   * @param fyDaiAmount fyDai amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param k time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of dai a user would have to pay for given amount of\\r\\n   *         fyDai\\r\\n   */\\r\\n  function daiInForFYDaiOut(\\r\\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 fyDaiAmount,\\r\\n    uint128 timeTillMaturity, int128 k, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    uint128 a = _computeA(timeTillMaturity, k, g);\\r\\n\\r\\n    // za = daiReserves ** a\\r\\n    uint256 za = daiReserves.pow(a, ONE);\\r\\n\\r\\n    // ya = fyDaiReserves ** a\\r\\n    uint256 ya = fyDaiReserves.pow(a, ONE);\\r\\n\\r\\n    // yx = daiReserves - daiAmount\\r\\n    uint256 yx = uint256(fyDaiReserves) - uint256(fyDaiAmount);\\r\\n    require(yx <= MAX, \\\"YieldMath: Too much fyDai out\\\");\\r\\n\\r\\n    // yxa = yx ** a\\r\\n    uint256 yxa = uint128(yx).pow(a, ONE);\\r\\n\\r\\n    // sum = za + ya - yxa\\r\\n    uint256 sum = za + ya - yxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n    require(sum <= MAX, \\\"YieldMath: Resulting dai reserves too high\\\");\\r\\n\\r\\n    // result = (sum ** (1/a)) - daiReserves\\r\\n    uint256 result = uint256(uint128(sum).pow(ONE, a)) - uint256(daiReserves);\\r\\n    require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n    result = result < MAX - 1e12 ? result + 1e12 : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n    return uint128(result);\\r\\n  }\\r\\n\\r\\n  function _computeA(uint128 timeTillMaturity, int128 k, int128 g) private pure returns (uint128) {\\r\\n    // t = k * timeTillMaturity\\r\\n    int128 t = k.mul(timeTillMaturity.fromUInt());\\r\\n    require(t >= 0, \\\"YieldMath: t must be positive\\\"); // Meaning neither T or k can be negative\\r\\n\\r\\n    // a = (1 - gt)\\r\\n    int128 a = int128(ONE).sub(g.mul(t));\\r\\n    require(a > 0, \\\"YieldMath: Too far from maturity\\\");\\r\\n    require(a <= int128(ONE), \\\"YieldMath: g must be positive\\\");\\r\\n\\r\\n    return uint128(a);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Estimate in Dai the value of reserves at protocol initialization time.\\r\\n   *\\r\\n   * @param daiReserves dai reserves amount\\r\\n   * @param fyDaiReserves fyDai reserves amount\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param k time till maturity coefficient, multiplied by 2^64\\r\\n   * @param c0 price of dai in terms of Dai, multiplied by 2^64\\r\\n   * @return estimated value of reserves\\r\\n   */\\r\\n  function initialReservesValue(\\r\\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 timeTillMaturity,\\r\\n    int128 k, int128 c0)\\r\\n  external pure returns(uint128) {\\r\\n    uint256 normalizedDaiReserves = c0.mulu(daiReserves);\\r\\n    require(normalizedDaiReserves <= MAX);\\r\\n\\r\\n    // a = (1 - k * timeTillMaturity)\\r\\n    int128 a = int128(ONE).sub(k.mul(timeTillMaturity.fromUInt()));\\r\\n    require(a > 0);\\r\\n\\r\\n    uint256 sum =\\r\\n      uint256(uint128(normalizedDaiReserves).pow(uint128(a), ONE)) +\\r\\n      uint256(fyDaiReserves.pow(uint128(a), ONE)) >> 1;\\r\\n    require(sum <= MAX);\\r\\n\\r\\n    uint256 result = uint256(uint128(sum).pow(ONE, uint128(a))) << 1;\\r\\n    require(result <= MAX);\\r\\n\\r\\n    return uint128(result);\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x0b618f1fab9e33cd0fdc0383170c39a5174c7aa233b4c339b6589116638712d7\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6126b1610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c8063c2ee3a0811610065578063c2ee3a08146101bb578063d49d5181146101c3578063d536aadd146101dd578063e5cd1e731461023957610087565b80631d385c1f1461008c578063420df2f41461010d578063763dc40514610169575b600080fd5b6100e8600480360360c08110156100a257600080fd5b506fffffffffffffffffffffffffffffffff8135811691602081013582169160408201358116916060810135909116906080810135600f90810b9160a00135900b610295565b604080516fffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100e8600480360360c081101561012357600080fd5b506fffffffffffffffffffffffffffffffff8135811691602081013582169160408201358116916060810135909116906080810135600f90810b9160a00135900b6104ed565b6100e8600480360360a081101561017f57600080fd5b506fffffffffffffffffffffffffffffffff81358116916020810135821691604082013516906060810135600f90810b9160800135900b61076f565b6100e86108f8565b6101cb610905565b60408051918252519081900360200190f35b6100e8600480360360c08110156101f357600080fd5b506fffffffffffffffffffffffffffffffff8135811691602081013582169160408201358116916060810135909116906080810135600f90810b9160a00135900b610919565b6100e8600480360360c081101561024f57600080fd5b506fffffffffffffffffffffffffffffffff8135811691602081013582169160408201358116916060810135909116906080810135600f90810b9160a00135900b610ad6565b6000806102a3858585610d00565b905060006102cd6fffffffffffffffffffffffffffffffff8a168368010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff90811691506000906102fc908a168468010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff90811691508a8116898216019081111561038857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5969656c644d6174683a20546f6f206d7563682064616920696e000000000000604482015290519081900360640190fd5b60006103b06fffffffffffffffffffffffffffffffff83168668010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff908116915084840182900390811115610425576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806125bb6026913960400191505060405180910390fd5b600061044d6fffffffffffffffffffffffffffffffff83166801000000000000000089610eaf565b6fffffffffffffffffffffffffffffffff9081168e82160391508111156104bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061265b6021913960400191505060405180910390fd5b64e8d4a5100081116104d25760006104db565b64e8d4a5100081035b9e9d5050505050505050505050505050565b6000806104fb858585610d00565b905060006105256fffffffffffffffffffffffffffffffff8a168368010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff9081169150600090610554908a168468010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff90811691508881168b821603908111156105e057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5969656c644d6174683a20546f6f206d75636820646169206f75740000000000604482015290519081900360640190fd5b60006106086fffffffffffffffffffffffffffffffff83168668010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff90811691508484018290039081111561067d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806125e1602c913960400191505060405180910390fd5b60006fffffffffffffffffffffffffffffffff808e16906106aa908416680100000000000000008a610eaf565b6fffffffffffffffffffffffffffffffff160390506fffffffffffffffffffffffffffffffff801681111561072a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061265b6021913960400191505060405180910390fd5b6fffffffffffffffffffffff172b5aefff8110610757576fffffffffffffffffffffffffffffffff6104db565b64e8d4a51000019d9c50505050505050505050505050565b600080610792600f84900b6fffffffffffffffffffffffffffffffff8916610fad565b90506fffffffffffffffffffffffffffffffff8111156107b157600080fd5b60006107ef6107df6107d4886fffffffffffffffffffffffffffffffff16611031565b600f88900b9061104f565b68010000000000000000906110a7565b9050600081600f0b1361080157600080fd5b6000600161082b6fffffffffffffffffffffffffffffffff8a168468010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff908116906108569086168568010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff1601901c90506fffffffffffffffffffffffffffffffff801681111561088c57600080fd5b600060016108b66fffffffffffffffffffffffffffffffff84166801000000000000000086610eaf565b6fffffffffffffffffffffffffffffffff16901b90506fffffffffffffffffffffffffffffffff80168111156108eb57600080fd5b9998505050505050505050565b6801000000000000000081565b6fffffffffffffffffffffffffffffffff81565b600080610927858585610d00565b905060006109516fffffffffffffffffffffffffffffffff8a168368010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff9081169150600090610980908a168468010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff90811691508881168a82160390811115610a0c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5969656c644d6174683a20546f6f206d756368206679446169206f7574000000604482015290519081900360640190fd5b6000610a346fffffffffffffffffffffffffffffffff83168668010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff908116915084840182900390811115610aa9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612631602a913960400191505060405180910390fd5b60006fffffffffffffffffffffffffffffffff808f16906106aa908416680100000000000000008a610eaf565b600080610ae4858585610d00565b90506000610b0e6fffffffffffffffffffffffffffffffff8a168368010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff9081169150600090610b3d908a168468010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff90811691508981168982160190811115610bc957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5969656c644d6174683a20546f6f206d75636820667944616920696e00000000604482015290519081900360640190fd5b6000610bf16fffffffffffffffffffffffffffffffff83168668010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff908116915084840182900390811115610c66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061260d6024913960400191505060405180910390fd5b6000610c8e6fffffffffffffffffffffffffffffffff83166801000000000000000089610eaf565b6fffffffffffffffffffffffffffffffff9081168f82160391508111156104bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061265b6021913960400191505060405180910390fd5b600080610d2c610d21866fffffffffffffffffffffffffffffffff16611031565b600f86900b9061104f565b9050600081600f0b1215610da157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5969656c644d6174683a2074206d75737420626520706f736974697665000000604482015290519081900360640190fd5b6000610db46107df600f86900b8461104f565b9050600081600f0b13610e2857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5969656c644d6174683a20546f6f206661722066726f6d206d61747572697479604482015290519081900360640190fd5b68010000000000000000600f82900b1315610ea457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5969656c644d6174683a2067206d75737420626520706f736974697665000000604482015290519081900360640190fd5b9150505b9392505050565b60006fffffffffffffffffffffffffffffffff8216610ecd57600080fd5b6fffffffffffffffffffffffffffffffff8416610f08576fffffffffffffffffffffffffffffffff8316610f0057600080fd5b506000610ea8565b6000826fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff16610f39876110fb565b6fffffffffffffffffffffffffffffffff036fffffffffffffffffffffffffffffffff160281610f6557fe5b0490506fffffffffffffffffffffffffffffffff811115610f8a576000915050610ea8565b610fa5816fffffffffffffffffffffffffffffffff03611c24565b915050610ea8565b600081610fbc5750600061102b565b600083600f0b1215610fcd57600080fd5b600f83900b6fffffffffffffffffffffffffffffffff8316810260401c90608084901c0277ffffffffffffffffffffffffffffffffffffffffffffffff81111561101657600080fd5b60401b811981111561102757600080fd5b0190505b92915050565b6000677fffffffffffffff82111561104857600080fd5b5060401b90565b6000600f83810b9083900b0260401d7fffffffffffffffffffffffffffffffff80000000000000000000000000000000811280159061109e57506f7fffffffffffffffffffffffffffffff8113155b610ea857600080fd5b6000600f82810b9084900b037fffffffffffffffffffffffffffffffff80000000000000000000000000000000811280159061109e57506f7fffffffffffffffffffffffffffffff811315610ea857600080fd5b60006fffffffffffffffffffffffffffffffff821661111957600080fd5b6fffffffffffffffffffffffffffffffff82166ffe000000000000000000000000000000680100000000000000008210156111785760409190911b907fffffffffffffffffffffffffffffffff80000000000000000000000000000000015b6c010000000000000000000000008210156111b75760209190911b907fffffffffffffffffffffffffffffffffc0000000000000000000000000000000015b6e0100000000000000000000000000008210156111f85760109190911b907fffffffffffffffffffffffffffffffffe0000000000000000000000000000000015b6f0100000000000000000000000000000082101561123a5760089190911b907ffffffffffffffffffffffffffffffffff0000000000000000000000000000000015b6f1000000000000000000000000000000082101561127c5760049190911b907ffffffffffffffffffffffffffffffffff8000000000000000000000000000000015b6f400000000000000000000000000000008210156112be5760029190911b907ffffffffffffffffffffffffffffffffffc000000000000000000000000000000015b6f800000000000000000000000000000008210156113005760019190911b907ffffffffffffffffffffffffffffffffffe000000000000000000000000000000015b908002607f1c90600160801b82111561132d5760019190911c906f01000000000000000000000000000000175b908002607f1c90600160801b8211156113595760019190911c906e800000000000000000000000000000175b908002607f1c90600160801b8211156113855760019190911c906e400000000000000000000000000000175b908002607f1c90600160801b8211156113b15760019190911c906e200000000000000000000000000000175b908002607f1c90600160801b8211156113dd5760019190911c906e100000000000000000000000000000175b908002607f1c90600160801b8211156114095760019190911c906e080000000000000000000000000000175b908002607f1c90600160801b8211156114355760019190911c906e040000000000000000000000000000175b908002607f1c90600160801b8211156114615760019190911c906e020000000000000000000000000000175b908002607f1c90600160801b82111561148d5760019190911c906e010000000000000000000000000000175b908002607f1c90600160801b8211156114b85760019190911c906d8000000000000000000000000000175b908002607f1c90600160801b8211156114e35760019190911c906d4000000000000000000000000000175b908002607f1c90600160801b82111561150e5760019190911c906d2000000000000000000000000000175b908002607f1c90600160801b8211156115395760019190911c906d1000000000000000000000000000175b908002607f1c90600160801b8211156115645760019190911c906d0800000000000000000000000000175b908002607f1c90600160801b82111561158f5760019190911c906d0400000000000000000000000000175b908002607f1c90600160801b8211156115ba5760019190911c906d0200000000000000000000000000175b908002607f1c90600160801b8211156115e55760019190911c906d0100000000000000000000000000175b908002607f1c90600160801b82111561160f5760019190911c906c80000000000000000000000000175b908002607f1c90600160801b8211156116395760019190911c906c40000000000000000000000000175b908002607f1c90600160801b8211156116635760019190911c906c20000000000000000000000000175b908002607f1c90600160801b82111561168d5760019190911c906c10000000000000000000000000175b908002607f1c90600160801b8211156116b75760019190911c906c08000000000000000000000000175b908002607f1c90600160801b8211156116e15760019190911c906c04000000000000000000000000175b908002607f1c90600160801b82111561170b5760019190911c906c02000000000000000000000000175b908002607f1c90600160801b8211156117355760019190911c906c01000000000000000000000000175b908002607f1c90600160801b82111561175e5760019190911c906b800000000000000000000000175b908002607f1c90600160801b8211156117875760019190911c906b400000000000000000000000175b908002607f1c90600160801b8211156117b05760019190911c906b200000000000000000000000175b908002607f1c90600160801b8211156117d95760019190911c906b100000000000000000000000175b908002607f1c90600160801b8211156118025760019190911c906b080000000000000000000000175b908002607f1c90600160801b82111561182b5760019190911c906b040000000000000000000000175b908002607f1c90600160801b8211156118545760019190911c906b020000000000000000000000175b908002607f1c90600160801b82111561187d5760019190911c906b010000000000000000000000175b908002607f1c90600160801b8211156118a55760019190911c906a8000000000000000000000175b908002607f1c90600160801b8211156118cd5760019190911c906a4000000000000000000000175b908002607f1c90600160801b8211156118f55760019190911c906a2000000000000000000000175b908002607f1c90600160801b82111561191d5760019190911c906a1000000000000000000000175b908002607f1c90600160801b8211156119455760019190911c906a0800000000000000000000175b908002607f1c90600160801b82111561196d5760019190911c906a0400000000000000000000175b908002607f1c90600160801b8211156119955760019190911c906a0200000000000000000000175b908002607f1c90600160801b8211156119bd5760019190911c906a0100000000000000000000175b908002607f1c90600160801b8211156119e45760019190911c906980000000000000000000175b908002607f1c90600160801b821115611a0b5760019190911c906940000000000000000000175b908002607f1c90600160801b821115611a325760019190911c906920000000000000000000175b908002607f1c90600160801b821115611a595760019190911c906910000000000000000000175b908002607f1c90600160801b821115611a805760019190911c906908000000000000000000175b908002607f1c90600160801b821115611aa75760019190911c906904000000000000000000175b908002607f1c90600160801b821115611ace5760019190911c906902000000000000000000175b908002607f1c90600160801b821115611af55760019190911c906901000000000000000000175b908002607f1c90600160801b821115611b1b5760019190911c9068800000000000000000175b908002607f1c90600160801b821115611b415760019190911c9068400000000000000000175b908002607f1c90600160801b821115611b675760019190911c9068200000000000000000175b908002607f1c90600160801b821115611b8d5760019190911c9068100000000000000000175b908002607f1c90600160801b821115611bb35760019190911c9068080000000000000000175b908002607f1c90600160801b821115611bd95760019190911c9068040000000000000000175b908002607f1c90600160801b821115611bff5760019190911c9068020000000000000000175b908002607f1c90600160801b821115610ea85768010000000000000000179392505050565b60006f800000000000000000000000000000006f01000000000000000000000000000000831615611c65576fb504f333f9de6484597d89b3754abe9f02607f1c5b6e800000000000000000000000000000831615611c92576f9837f0518db8a96f46ad23182e42f6f602607f1c5b6e400000000000000000000000000000831615611cbf576f8b95c1e3ea8bd6e6fbe4628758a53c9002607f1c5b6e200000000000000000000000000000831615611cec576f85aac367cc487b14c5c95b8c2154c1b202607f1c5b6e100000000000000000000000000000831615611d19576f82cd8698ac2ba1d73e2a475b46520bff02607f1c5b6e080000000000000000000000000000831615611d46576f8164d1f3bc0307737be56527bd14def402607f1c5b6e040000000000000000000000000000831615611d73576f80b1ed4fd999ab6c25335719b6e6fd2002607f1c5b6e020000000000000000000000000000831615611da0576f8058d7d2d5e5f6b094d589f608ee4aa202607f1c5b6e010000000000000000000000000000831615611dcd576f802c6436d0e04f50ff8ce94a6797b3ce02607f1c5b6d8000000000000000000000000000831615611df9576f8016302f174676283690dfe44d11d00802607f1c5b6d4000000000000000000000000000831615611e25576f800b179c82028fd0945e54e2ae18f2f002607f1c5b6d2000000000000000000000000000831615611e51576f80058baf7fee3b5d1c718b38e549cb9302607f1c5b6d1000000000000000000000000000831615611e7d576f8002c5d00fdcfcb6b6566a58c048be1f02607f1c5b6d0800000000000000000000000000831615611ea9576f800162e61bed4a48e84c2e1a463473d902607f1c5b6d0400000000000000000000000000831615611ed5576f8000b17292f702a3aa22beacca94901302607f1c5b6d0200000000000000000000000000831615611f01576f800058b92abbae02030c5fa5256f41fe02607f1c5b6d0100000000000000000000000000831615611f2d576f80002c5c8dade4d71776c0f4dbea67d602607f1c5b6c80000000000000000000000000831615611f58576f8000162e44eaf636526be456600bdbe402607f1c5b6c40000000000000000000000000831615611f83576f80000b1721fa7c188307016c1cd4e8b602607f1c5b6c20000000000000000000000000831615611fae576f8000058b90de7e4cecfc487503488bb102607f1c5b6c10000000000000000000000000831615611fd9576f800002c5c8678f36cbfce50a6de60b1402607f1c5b6c08000000000000000000000000831615612004576f80000162e431db9f80b2347b5d62e51602607f1c5b6c0400000000000000000000000083161561202f576f800000b1721872d0c7b08cf1e011415202607f1c5b6c0200000000000000000000000083161561205a576f80000058b90c1aa8a5c3736cb77e8dff02607f1c5b6c01000000000000000000000000831615612085576f8000002c5c8605a4635f2efc2362d97802607f1c5b6b8000000000000000000000008316156120af576f800000162e4300e635cf4a109e3939bd02607f1c5b6b4000000000000000000000008316156120d9576f8000000b17217ff81bef9c551590cf8302607f1c5b6b200000000000000000000000831615612103576f800000058b90bfdd4e39cd52c0cfa27c02607f1c5b6b10000000000000000000000083161561212d576f80000002c5c85fe6f72d669e0e76e41102607f1c5b6b080000000000000000000000831615612157576f8000000162e42ff18f9ad35186d0df2802607f1c5b6b040000000000000000000000831615612181576f80000000b17217f84cce71aa0dcfffe702607f1c5b6b0200000000000000000000008316156121ab576f8000000058b90bfc07a77ad56ed22aaa02607f1c5b6b0100000000000000000000008316156121d5576f800000002c5c85fdfc23cdead40da8d602607f1c5b6a80000000000000000000008316156121fe576f80000000162e42fefc25eb1571853a6602607f1c5b6a4000000000000000000000831615612227576f800000000b17217f7d97f692baacded502607f1c5b6a2000000000000000000000831615612250576f80000000058b90bfbead3b8b5dd254d702607f1c5b6a1000000000000000000000831615612279576f8000000002c5c85fdf4eedd62f084e6702607f1c5b6a08000000000000000000008316156122a2576f800000000162e42fefa58aef378bf58602607f1c5b6a04000000000000000000008316156122cb576f8000000000b17217f7d24a78a3c7ef0202607f1c5b6a02000000000000000000008316156122f4576f800000000058b90bfbe9067c93e474a602607f1c5b6a010000000000000000000083161561231d576f80000000002c5c85fdf47b8e5a72599f02607f1c5b6980000000000000000000831615612345576f8000000000162e42fefa3bdb315934a202607f1c5b694000000000000000000083161561236d576f80000000000b17217f7d1d7299b49c4602607f1c5b6920000000000000000000831615612395576f8000000000058b90bfbe8e9a8d1c4ea002607f1c5b69100000000000000000008316156123bd576f800000000002c5c85fdf4745969ea76f02607f1c5b69080000000000000000008316156123e5576f80000000000162e42fefa3a0df5373bf02607f1c5b690400000000000000000083161561240d576f800000000000b17217f7d1cff4aac1e102607f1c5b6902000000000000000000831615612435576f80000000000058b90bfbe8e7db95a2f102607f1c5b690100000000000000000083161561245d576f8000000000002c5c85fdf473e61ae1f802607f1c5b68800000000000000000831615612484576f800000000000162e42fefa39f121751c02607f1c5b684000000000000000008316156124ab576f8000000000000b17217f7d1cf815bb9602607f1c5b682000000000000000008316156124d2576f800000000000058b90bfbe8e7bec1e0d02607f1c5b681000000000000000008316156124f9576f80000000000002c5c85fdf473dee5f1702607f1c5b68080000000000000000831615612520576f8000000000000162e42fefa39ef5438f02607f1c5b68040000000000000000831615612547576f80000000000000b17217f7d1cf7a26c802607f1c5b6802000000000000000083161561256e576f8000000000000058b90bfbe8e7bcf4a402607f1c5b68010000000000000000831615612595576f800000000000002c5c85fdf473de72a202607f1c5b607f607984901c811690036fffffffffffffffffffffffffffffffff161c905091905056fe5969656c644d6174683a20496e73756666696369656e742066794461692072657365727665735969656c644d6174683a20526573756c74696e6720667944616920726573657276657320746f6f20686967685969656c644d6174683a20496e73756666696369656e74206461692072657365727665735969656c644d6174683a20526573756c74696e672064616920726573657276657320746f6f20686967685969656c644d6174683a20526f756e64696e6720696e6475636564206572726f72a2646970667358221220d5fa920c90e5ac68090308bac9d197837ac16bbf5fa9587894a2a440a3ffc5ec64736f6c63430007050033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c8063c2ee3a0811610065578063c2ee3a08146101bb578063d49d5181146101c3578063d536aadd146101dd578063e5cd1e731461023957610087565b80631d385c1f1461008c578063420df2f41461010d578063763dc40514610169575b600080fd5b6100e8600480360360c08110156100a257600080fd5b506fffffffffffffffffffffffffffffffff8135811691602081013582169160408201358116916060810135909116906080810135600f90810b9160a00135900b610295565b604080516fffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100e8600480360360c081101561012357600080fd5b506fffffffffffffffffffffffffffffffff8135811691602081013582169160408201358116916060810135909116906080810135600f90810b9160a00135900b6104ed565b6100e8600480360360a081101561017f57600080fd5b506fffffffffffffffffffffffffffffffff81358116916020810135821691604082013516906060810135600f90810b9160800135900b61076f565b6100e86108f8565b6101cb610905565b60408051918252519081900360200190f35b6100e8600480360360c08110156101f357600080fd5b506fffffffffffffffffffffffffffffffff8135811691602081013582169160408201358116916060810135909116906080810135600f90810b9160a00135900b610919565b6100e8600480360360c081101561024f57600080fd5b506fffffffffffffffffffffffffffffffff8135811691602081013582169160408201358116916060810135909116906080810135600f90810b9160a00135900b610ad6565b6000806102a3858585610d00565b905060006102cd6fffffffffffffffffffffffffffffffff8a168368010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff90811691506000906102fc908a168468010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff90811691508a8116898216019081111561038857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5969656c644d6174683a20546f6f206d7563682064616920696e000000000000604482015290519081900360640190fd5b60006103b06fffffffffffffffffffffffffffffffff83168668010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff908116915084840182900390811115610425576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806125bb6026913960400191505060405180910390fd5b600061044d6fffffffffffffffffffffffffffffffff83166801000000000000000089610eaf565b6fffffffffffffffffffffffffffffffff9081168e82160391508111156104bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061265b6021913960400191505060405180910390fd5b64e8d4a5100081116104d25760006104db565b64e8d4a5100081035b9e9d5050505050505050505050505050565b6000806104fb858585610d00565b905060006105256fffffffffffffffffffffffffffffffff8a168368010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff9081169150600090610554908a168468010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff90811691508881168b821603908111156105e057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5969656c644d6174683a20546f6f206d75636820646169206f75740000000000604482015290519081900360640190fd5b60006106086fffffffffffffffffffffffffffffffff83168668010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff90811691508484018290039081111561067d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806125e1602c913960400191505060405180910390fd5b60006fffffffffffffffffffffffffffffffff808e16906106aa908416680100000000000000008a610eaf565b6fffffffffffffffffffffffffffffffff160390506fffffffffffffffffffffffffffffffff801681111561072a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061265b6021913960400191505060405180910390fd5b6fffffffffffffffffffffff172b5aefff8110610757576fffffffffffffffffffffffffffffffff6104db565b64e8d4a51000019d9c50505050505050505050505050565b600080610792600f84900b6fffffffffffffffffffffffffffffffff8916610fad565b90506fffffffffffffffffffffffffffffffff8111156107b157600080fd5b60006107ef6107df6107d4886fffffffffffffffffffffffffffffffff16611031565b600f88900b9061104f565b68010000000000000000906110a7565b9050600081600f0b1361080157600080fd5b6000600161082b6fffffffffffffffffffffffffffffffff8a168468010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff908116906108569086168568010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff1601901c90506fffffffffffffffffffffffffffffffff801681111561088c57600080fd5b600060016108b66fffffffffffffffffffffffffffffffff84166801000000000000000086610eaf565b6fffffffffffffffffffffffffffffffff16901b90506fffffffffffffffffffffffffffffffff80168111156108eb57600080fd5b9998505050505050505050565b6801000000000000000081565b6fffffffffffffffffffffffffffffffff81565b600080610927858585610d00565b905060006109516fffffffffffffffffffffffffffffffff8a168368010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff9081169150600090610980908a168468010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff90811691508881168a82160390811115610a0c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5969656c644d6174683a20546f6f206d756368206679446169206f7574000000604482015290519081900360640190fd5b6000610a346fffffffffffffffffffffffffffffffff83168668010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff908116915084840182900390811115610aa9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612631602a913960400191505060405180910390fd5b60006fffffffffffffffffffffffffffffffff808f16906106aa908416680100000000000000008a610eaf565b600080610ae4858585610d00565b90506000610b0e6fffffffffffffffffffffffffffffffff8a168368010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff9081169150600090610b3d908a168468010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff90811691508981168982160190811115610bc957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5969656c644d6174683a20546f6f206d75636820667944616920696e00000000604482015290519081900360640190fd5b6000610bf16fffffffffffffffffffffffffffffffff83168668010000000000000000610eaf565b6fffffffffffffffffffffffffffffffff908116915084840182900390811115610c66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061260d6024913960400191505060405180910390fd5b6000610c8e6fffffffffffffffffffffffffffffffff83166801000000000000000089610eaf565b6fffffffffffffffffffffffffffffffff9081168f82160391508111156104bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061265b6021913960400191505060405180910390fd5b600080610d2c610d21866fffffffffffffffffffffffffffffffff16611031565b600f86900b9061104f565b9050600081600f0b1215610da157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5969656c644d6174683a2074206d75737420626520706f736974697665000000604482015290519081900360640190fd5b6000610db46107df600f86900b8461104f565b9050600081600f0b13610e2857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f5969656c644d6174683a20546f6f206661722066726f6d206d61747572697479604482015290519081900360640190fd5b68010000000000000000600f82900b1315610ea457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5969656c644d6174683a2067206d75737420626520706f736974697665000000604482015290519081900360640190fd5b9150505b9392505050565b60006fffffffffffffffffffffffffffffffff8216610ecd57600080fd5b6fffffffffffffffffffffffffffffffff8416610f08576fffffffffffffffffffffffffffffffff8316610f0057600080fd5b506000610ea8565b6000826fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff16610f39876110fb565b6fffffffffffffffffffffffffffffffff036fffffffffffffffffffffffffffffffff160281610f6557fe5b0490506fffffffffffffffffffffffffffffffff811115610f8a576000915050610ea8565b610fa5816fffffffffffffffffffffffffffffffff03611c24565b915050610ea8565b600081610fbc5750600061102b565b600083600f0b1215610fcd57600080fd5b600f83900b6fffffffffffffffffffffffffffffffff8316810260401c90608084901c0277ffffffffffffffffffffffffffffffffffffffffffffffff81111561101657600080fd5b60401b811981111561102757600080fd5b0190505b92915050565b6000677fffffffffffffff82111561104857600080fd5b5060401b90565b6000600f83810b9083900b0260401d7fffffffffffffffffffffffffffffffff80000000000000000000000000000000811280159061109e57506f7fffffffffffffffffffffffffffffff8113155b610ea857600080fd5b6000600f82810b9084900b037fffffffffffffffffffffffffffffffff80000000000000000000000000000000811280159061109e57506f7fffffffffffffffffffffffffffffff811315610ea857600080fd5b60006fffffffffffffffffffffffffffffffff821661111957600080fd5b6fffffffffffffffffffffffffffffffff82166ffe000000000000000000000000000000680100000000000000008210156111785760409190911b907fffffffffffffffffffffffffffffffff80000000000000000000000000000000015b6c010000000000000000000000008210156111b75760209190911b907fffffffffffffffffffffffffffffffffc0000000000000000000000000000000015b6e0100000000000000000000000000008210156111f85760109190911b907fffffffffffffffffffffffffffffffffe0000000000000000000000000000000015b6f0100000000000000000000000000000082101561123a5760089190911b907ffffffffffffffffffffffffffffffffff0000000000000000000000000000000015b6f1000000000000000000000000000000082101561127c5760049190911b907ffffffffffffffffffffffffffffffffff8000000000000000000000000000000015b6f400000000000000000000000000000008210156112be5760029190911b907ffffffffffffffffffffffffffffffffffc000000000000000000000000000000015b6f800000000000000000000000000000008210156113005760019190911b907ffffffffffffffffffffffffffffffffffe000000000000000000000000000000015b908002607f1c90600160801b82111561132d5760019190911c906f01000000000000000000000000000000175b908002607f1c90600160801b8211156113595760019190911c906e800000000000000000000000000000175b908002607f1c90600160801b8211156113855760019190911c906e400000000000000000000000000000175b908002607f1c90600160801b8211156113b15760019190911c906e200000000000000000000000000000175b908002607f1c90600160801b8211156113dd5760019190911c906e100000000000000000000000000000175b908002607f1c90600160801b8211156114095760019190911c906e080000000000000000000000000000175b908002607f1c90600160801b8211156114355760019190911c906e040000000000000000000000000000175b908002607f1c90600160801b8211156114615760019190911c906e020000000000000000000000000000175b908002607f1c90600160801b82111561148d5760019190911c906e010000000000000000000000000000175b908002607f1c90600160801b8211156114b85760019190911c906d8000000000000000000000000000175b908002607f1c90600160801b8211156114e35760019190911c906d4000000000000000000000000000175b908002607f1c90600160801b82111561150e5760019190911c906d2000000000000000000000000000175b908002607f1c90600160801b8211156115395760019190911c906d1000000000000000000000000000175b908002607f1c90600160801b8211156115645760019190911c906d0800000000000000000000000000175b908002607f1c90600160801b82111561158f5760019190911c906d0400000000000000000000000000175b908002607f1c90600160801b8211156115ba5760019190911c906d0200000000000000000000000000175b908002607f1c90600160801b8211156115e55760019190911c906d0100000000000000000000000000175b908002607f1c90600160801b82111561160f5760019190911c906c80000000000000000000000000175b908002607f1c90600160801b8211156116395760019190911c906c40000000000000000000000000175b908002607f1c90600160801b8211156116635760019190911c906c20000000000000000000000000175b908002607f1c90600160801b82111561168d5760019190911c906c10000000000000000000000000175b908002607f1c90600160801b8211156116b75760019190911c906c08000000000000000000000000175b908002607f1c90600160801b8211156116e15760019190911c906c04000000000000000000000000175b908002607f1c90600160801b82111561170b5760019190911c906c02000000000000000000000000175b908002607f1c90600160801b8211156117355760019190911c906c01000000000000000000000000175b908002607f1c90600160801b82111561175e5760019190911c906b800000000000000000000000175b908002607f1c90600160801b8211156117875760019190911c906b400000000000000000000000175b908002607f1c90600160801b8211156117b05760019190911c906b200000000000000000000000175b908002607f1c90600160801b8211156117d95760019190911c906b100000000000000000000000175b908002607f1c90600160801b8211156118025760019190911c906b080000000000000000000000175b908002607f1c90600160801b82111561182b5760019190911c906b040000000000000000000000175b908002607f1c90600160801b8211156118545760019190911c906b020000000000000000000000175b908002607f1c90600160801b82111561187d5760019190911c906b010000000000000000000000175b908002607f1c90600160801b8211156118a55760019190911c906a8000000000000000000000175b908002607f1c90600160801b8211156118cd5760019190911c906a4000000000000000000000175b908002607f1c90600160801b8211156118f55760019190911c906a2000000000000000000000175b908002607f1c90600160801b82111561191d5760019190911c906a1000000000000000000000175b908002607f1c90600160801b8211156119455760019190911c906a0800000000000000000000175b908002607f1c90600160801b82111561196d5760019190911c906a0400000000000000000000175b908002607f1c90600160801b8211156119955760019190911c906a0200000000000000000000175b908002607f1c90600160801b8211156119bd5760019190911c906a0100000000000000000000175b908002607f1c90600160801b8211156119e45760019190911c906980000000000000000000175b908002607f1c90600160801b821115611a0b5760019190911c906940000000000000000000175b908002607f1c90600160801b821115611a325760019190911c906920000000000000000000175b908002607f1c90600160801b821115611a595760019190911c906910000000000000000000175b908002607f1c90600160801b821115611a805760019190911c906908000000000000000000175b908002607f1c90600160801b821115611aa75760019190911c906904000000000000000000175b908002607f1c90600160801b821115611ace5760019190911c906902000000000000000000175b908002607f1c90600160801b821115611af55760019190911c906901000000000000000000175b908002607f1c90600160801b821115611b1b5760019190911c9068800000000000000000175b908002607f1c90600160801b821115611b415760019190911c9068400000000000000000175b908002607f1c90600160801b821115611b675760019190911c9068200000000000000000175b908002607f1c90600160801b821115611b8d5760019190911c9068100000000000000000175b908002607f1c90600160801b821115611bb35760019190911c9068080000000000000000175b908002607f1c90600160801b821115611bd95760019190911c9068040000000000000000175b908002607f1c90600160801b821115611bff5760019190911c9068020000000000000000175b908002607f1c90600160801b821115610ea85768010000000000000000179392505050565b60006f800000000000000000000000000000006f01000000000000000000000000000000831615611c65576fb504f333f9de6484597d89b3754abe9f02607f1c5b6e800000000000000000000000000000831615611c92576f9837f0518db8a96f46ad23182e42f6f602607f1c5b6e400000000000000000000000000000831615611cbf576f8b95c1e3ea8bd6e6fbe4628758a53c9002607f1c5b6e200000000000000000000000000000831615611cec576f85aac367cc487b14c5c95b8c2154c1b202607f1c5b6e100000000000000000000000000000831615611d19576f82cd8698ac2ba1d73e2a475b46520bff02607f1c5b6e080000000000000000000000000000831615611d46576f8164d1f3bc0307737be56527bd14def402607f1c5b6e040000000000000000000000000000831615611d73576f80b1ed4fd999ab6c25335719b6e6fd2002607f1c5b6e020000000000000000000000000000831615611da0576f8058d7d2d5e5f6b094d589f608ee4aa202607f1c5b6e010000000000000000000000000000831615611dcd576f802c6436d0e04f50ff8ce94a6797b3ce02607f1c5b6d8000000000000000000000000000831615611df9576f8016302f174676283690dfe44d11d00802607f1c5b6d4000000000000000000000000000831615611e25576f800b179c82028fd0945e54e2ae18f2f002607f1c5b6d2000000000000000000000000000831615611e51576f80058baf7fee3b5d1c718b38e549cb9302607f1c5b6d1000000000000000000000000000831615611e7d576f8002c5d00fdcfcb6b6566a58c048be1f02607f1c5b6d0800000000000000000000000000831615611ea9576f800162e61bed4a48e84c2e1a463473d902607f1c5b6d0400000000000000000000000000831615611ed5576f8000b17292f702a3aa22beacca94901302607f1c5b6d0200000000000000000000000000831615611f01576f800058b92abbae02030c5fa5256f41fe02607f1c5b6d0100000000000000000000000000831615611f2d576f80002c5c8dade4d71776c0f4dbea67d602607f1c5b6c80000000000000000000000000831615611f58576f8000162e44eaf636526be456600bdbe402607f1c5b6c40000000000000000000000000831615611f83576f80000b1721fa7c188307016c1cd4e8b602607f1c5b6c20000000000000000000000000831615611fae576f8000058b90de7e4cecfc487503488bb102607f1c5b6c10000000000000000000000000831615611fd9576f800002c5c8678f36cbfce50a6de60b1402607f1c5b6c08000000000000000000000000831615612004576f80000162e431db9f80b2347b5d62e51602607f1c5b6c0400000000000000000000000083161561202f576f800000b1721872d0c7b08cf1e011415202607f1c5b6c0200000000000000000000000083161561205a576f80000058b90c1aa8a5c3736cb77e8dff02607f1c5b6c01000000000000000000000000831615612085576f8000002c5c8605a4635f2efc2362d97802607f1c5b6b8000000000000000000000008316156120af576f800000162e4300e635cf4a109e3939bd02607f1c5b6b4000000000000000000000008316156120d9576f8000000b17217ff81bef9c551590cf8302607f1c5b6b200000000000000000000000831615612103576f800000058b90bfdd4e39cd52c0cfa27c02607f1c5b6b10000000000000000000000083161561212d576f80000002c5c85fe6f72d669e0e76e41102607f1c5b6b080000000000000000000000831615612157576f8000000162e42ff18f9ad35186d0df2802607f1c5b6b040000000000000000000000831615612181576f80000000b17217f84cce71aa0dcfffe702607f1c5b6b0200000000000000000000008316156121ab576f8000000058b90bfc07a77ad56ed22aaa02607f1c5b6b0100000000000000000000008316156121d5576f800000002c5c85fdfc23cdead40da8d602607f1c5b6a80000000000000000000008316156121fe576f80000000162e42fefc25eb1571853a6602607f1c5b6a4000000000000000000000831615612227576f800000000b17217f7d97f692baacded502607f1c5b6a2000000000000000000000831615612250576f80000000058b90bfbead3b8b5dd254d702607f1c5b6a1000000000000000000000831615612279576f8000000002c5c85fdf4eedd62f084e6702607f1c5b6a08000000000000000000008316156122a2576f800000000162e42fefa58aef378bf58602607f1c5b6a04000000000000000000008316156122cb576f8000000000b17217f7d24a78a3c7ef0202607f1c5b6a02000000000000000000008316156122f4576f800000000058b90bfbe9067c93e474a602607f1c5b6a010000000000000000000083161561231d576f80000000002c5c85fdf47b8e5a72599f02607f1c5b6980000000000000000000831615612345576f8000000000162e42fefa3bdb315934a202607f1c5b694000000000000000000083161561236d576f80000000000b17217f7d1d7299b49c4602607f1c5b6920000000000000000000831615612395576f8000000000058b90bfbe8e9a8d1c4ea002607f1c5b69100000000000000000008316156123bd576f800000000002c5c85fdf4745969ea76f02607f1c5b69080000000000000000008316156123e5576f80000000000162e42fefa3a0df5373bf02607f1c5b690400000000000000000083161561240d576f800000000000b17217f7d1cff4aac1e102607f1c5b6902000000000000000000831615612435576f80000000000058b90bfbe8e7db95a2f102607f1c5b690100000000000000000083161561245d576f8000000000002c5c85fdf473e61ae1f802607f1c5b68800000000000000000831615612484576f800000000000162e42fefa39f121751c02607f1c5b684000000000000000008316156124ab576f8000000000000b17217f7d1cf815bb9602607f1c5b682000000000000000008316156124d2576f800000000000058b90bfbe8e7bec1e0d02607f1c5b681000000000000000008316156124f9576f80000000000002c5c85fdf473dee5f1702607f1c5b68080000000000000000831615612520576f8000000000000162e42fefa39ef5438f02607f1c5b68040000000000000000831615612547576f80000000000000b17217f7d1cf7a26c802607f1c5b6802000000000000000083161561256e576f8000000000000058b90bfbe8e7bcf4a402607f1c5b68010000000000000000831615612595576f800000000000002c5c85fdf473de72a202607f1c5b607f607984901c811690036fffffffffffffffffffffffffffffffff161c905091905056fe5969656c644d6174683a20496e73756666696369656e742066794461692072657365727665735969656c644d6174683a20526573756c74696e6720667944616920726573657276657320746f6f20686967685969656c644d6174683a20496e73756666696369656e74206461692072657365727665735969656c644d6174683a20526573756c74696e672064616920726573657276657320746f6f20686967685969656c644d6174683a20526f756e64696e6720696e6475636564206572726f72a2646970667358221220d5fa920c90e5ac68090308bac9d197837ac16bbf5fa9587894a2a440a3ffc5ec64736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "daiInForFYDaiOut(uint128,uint128,uint128,uint128,int128,int128)": {
        "params": {
          "daiReserves": "Dai reserves amount",
          "fyDaiAmount": "fyDai amount to be traded",
          "fyDaiReserves": "fyDai reserves amount",
          "g": "fee coefficient, multiplied by 2^64",
          "k": "time till maturity coefficient, multiplied by 2^64",
          "timeTillMaturity": "time till maturity in seconds"
        },
        "returns": {
          "_0": "the amount of dai a user would have to pay for given amount of         fyDai"
        }
      },
      "daiOutForFYDaiIn(uint128,uint128,uint128,uint128,int128,int128)": {
        "params": {
          "daiReserves": "dai reserves amount",
          "fyDaiAmount": "fyDai amount to be traded",
          "fyDaiReserves": "fyDai reserves amount",
          "g": "fee coefficient, multiplied by 2^64",
          "k": "time till maturity coefficient, multiplied by 2^64",
          "timeTillMaturity": "time till maturity in seconds"
        },
        "returns": {
          "_0": "the amount of Dai a user would get for given amount of fyDai"
        }
      },
      "fyDaiInForDaiOut(uint128,uint128,uint128,uint128,int128,int128)": {
        "params": {
          "daiAmount": "Dai amount to be traded",
          "daiReserves": "dai reserves amount",
          "fyDaiReserves": "fyDai reserves amount",
          "g": "fee coefficient, multiplied by 2^64",
          "k": "time till maturity coefficient, multiplied by 2^64",
          "timeTillMaturity": "time till maturity in seconds"
        },
        "returns": {
          "_0": "the amount of fyDai a user could sell for given amount of Dai"
        }
      },
      "fyDaiOutForDaiIn(uint128,uint128,uint128,uint128,int128,int128)": {
        "params": {
          "daiAmount": "dai amount to be traded",
          "daiReserves": "dai reserves amount",
          "fyDaiReserves": "fyDai reserves amount",
          "g": "fee coefficient, multiplied by 2^64",
          "k": "time till maturity coefficient, multiplied by 2^64",
          "timeTillMaturity": "time till maturity in seconds"
        },
        "returns": {
          "_0": "the amount of fyDai a user would get for given amount of Dai"
        }
      },
      "initialReservesValue(uint128,uint128,uint128,int128,int128)": {
        "params": {
          "c0": "price of dai in terms of Dai, multiplied by 2^64",
          "daiReserves": "dai reserves amount",
          "fyDaiReserves": "fyDai reserves amount",
          "k": "time till maturity coefficient, multiplied by 2^64",
          "timeTillMaturity": "time till maturity in seconds"
        },
        "returns": {
          "_0": "estimated value of reserves"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "daiInForFYDaiOut(uint128,uint128,uint128,uint128,int128,int128)": {
        "notice": "Calculate the amount of dai a user would have to pay for certain amount of fyDai. https://www.desmos.com/calculator/ws5oqj8x5i"
      },
      "daiOutForFYDaiIn(uint128,uint128,uint128,uint128,int128,int128)": {
        "notice": "Calculate the amount of dai a user would get for certain amount of fyDai. https://www.desmos.com/calculator/6jlrre7ybt"
      },
      "fyDaiInForDaiOut(uint128,uint128,uint128,uint128,int128,int128)": {
        "notice": "Calculate the amount of fyDai a user could sell for given amount of Dai. https://www.desmos.com/calculator/0rgnmtckvy"
      },
      "fyDaiOutForDaiIn(uint128,uint128,uint128,uint128,int128,int128)": {
        "notice": "Calculate the amount of fyDai a user would get for given amount of Dai. https://www.desmos.com/calculator/5nf2xuy6yb"
      },
      "initialReservesValue(uint128,uint128,uint128,int128,int128)": {
        "notice": "Estimate in Dai the value of reserves at protocol initialization time."
      }
    },
    "notice": "Ethereum smart contract library implementing Yield Math model.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}