{
  "address": "0x72A6B720656eC62c4e7f52095d243c8C479e3e19",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dai_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fyDai_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "Delegate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "daiTokens",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fyDaiTokens",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "poolTokens",
          "type": "int256"
        }
      ],
      "name": "Liquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "daiTokens",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fyDaiTokens",
          "type": "int256"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELEGABLE_DOMAIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIGNATURE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "addDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "addDelegateBySignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokensBurned",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokensBurned",
          "type": "uint256"
        }
      ],
      "name": "burnForDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "daiOut",
          "type": "uint128"
        }
      ],
      "name": "buyDai",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "daiOut",
          "type": "uint128"
        }
      ],
      "name": "buyDaiPreview",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "fyDaiOut",
          "type": "uint128"
        }
      ],
      "name": "buyFYDai",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "fyDaiOut",
          "type": "uint128"
        }
      ],
      "name": "buyFYDaiPreview",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dai",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fyDai",
      "outputs": [
        {
          "internalType": "contract IFYDai",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g1",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g2",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDaiReserves",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFYDaiReserves",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "k",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maturity",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "daiOffered",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fyDaiToBuy",
          "type": "uint256"
        }
      ],
      "name": "mintWithDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "revokeDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "daiIn",
          "type": "uint128"
        }
      ],
      "name": "sellDai",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "daiIn",
          "type": "uint128"
        }
      ],
      "name": "sellDaiPreview",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "fyDaiIn",
          "type": "uint128"
        }
      ],
      "name": "sellFYDai",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "fyDaiIn",
          "type": "uint128"
        }
      ],
      "name": "sellFYDaiPreview",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signatureCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x090609e47ac857123374d9f98d86491bd2dfc5ff95bb5b196d5c1c73b3db6780",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x5AD7799f02D5a829B2d6FA085e6bd69A872619D5",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "4124566",
    "logsBloom": "0x
    "blockHash": "0xdf04d4f844c212823b2ee3cb87218e720f5dac73a06661cb99cea5eb10cf5215",
    "transactionHash": "0x090609e47ac857123374d9f98d86491bd2dfc5ff95bb5b196d5c1c73b3db6780",
    "logs": [],
    "blockNumber": 23183860,
    "cumulativeGasUsed": "4330995",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa",
    "0x6B166d6325586c86B44f01509Fc64e649DCfE7C4",
    "fyDaiLP20Dec",
    "fyDaiLP20Dec"
  ],
  "solcInputHash": "646e61c55b1195451ac18ef6ef31df79",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dai_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fyDai_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"Delegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"daiTokens\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fyDaiTokens\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"poolTokens\",\"type\":\"int256\"}],\"name\":\"Liquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"daiTokens\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fyDaiTokens\",\"type\":\"int256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGABLE_DOMAIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIGNATURE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"addDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addDelegateBySignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"}],\"name\":\"burnForDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"daiOut\",\"type\":\"uint128\"}],\"name\":\"buyDai\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"daiOut\",\"type\":\"uint128\"}],\"name\":\"buyDaiPreview\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"fyDaiOut\",\"type\":\"uint128\"}],\"name\":\"buyFYDai\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"fyDaiOut\",\"type\":\"uint128\"}],\"name\":\"buyFYDaiPreview\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fyDai\",\"outputs\":[{\"internalType\":\"contract IFYDai\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g1\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g2\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaiReserves\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFYDaiReserves\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"k\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daiOffered\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fyDaiToBuy\",\"type\":\"uint256\"}],\"name\":\"mintWithDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"revokeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"daiIn\",\"type\":\"uint128\"}],\"name\":\"sellDai\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"daiIn\",\"type\":\"uint128\"}],\"name\":\"sellDaiPreview\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"fyDaiIn\",\"type\":\"uint128\"}],\"name\":\"sellFYDai\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"fyDaiIn\",\"type\":\"uint128\"}],\"name\":\"sellFYDaiPreview\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signatureCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The Pool contract exchanges Dai for fyDai at a price defined by a specific formula.\",\"kind\":\"dev\",\"methods\":{\"addDelegate(address)\":{\"details\":\"Enable a delegate to act on the behalf of caller\"},\"addDelegateBySignature(address,address,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Add a delegate through an encoded signature\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(address,address,uint256)\":{\"details\":\"Burn liquidity tokens in exchange for dai and fyDai. The liquidity provider needs to have called `pool.approve`.\",\"params\":{\"from\":\"Wallet providing the liquidity tokens. Must have approved the operator with `pool.addDelegate(operator)`.\",\"to\":\"Wallet receiving the dai and fyDai.\",\"tokensBurned\":\"Amount of liquidity tokens being burned.\"},\"returns\":{\"_0\":\"The amount of reserve tokens returned (daiTokens, fyDaiTokens).\"}},\"burnForDai(address,address,uint256)\":{\"details\":\"Burn liquidity tokens in exchange for dai. The liquidity provider needs to have called `pool.approve`.\",\"params\":{\"from\":\"Wallet providing the liquidity tokens. Must have approved the operator with `pool.addDelegate(operator)`.\",\"to\":\"Wallet receiving the dai and fyDai.\",\"tokensBurned\":\"Amount of liquidity tokens being burned.\"},\"returns\":{\"_0\":\"The amount of dai tokens returned.\"}},\"buyDai(address,address,uint128)\":{\"details\":\"Buy Dai for fyDai The trader needs to have called `fyDai.approve`\",\"params\":{\"daiOut\":\"Amount of dai being bought that will be deposited in `to` wallet\",\"from\":\"Wallet providing the fyDai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\",\"to\":\"Wallet receiving the dai being bought\"},\"returns\":{\"_0\":\"Amount of fyDai that will be taken from `from` wallet\"}},\"buyDaiPreview(uint128)\":{\"details\":\"Returns how much fyDai would be required to buy `daiOut` dai.\",\"params\":{\"daiOut\":\"Amount of dai hypothetically desired.\"},\"returns\":{\"_0\":\"Amount of fyDai hypothetically required.\"}},\"buyFYDai(address,address,uint128)\":{\"details\":\"Buy fyDai for dai The trader needs to have called `dai.approve`\",\"params\":{\"from\":\"Wallet providing the dai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\",\"fyDaiOut\":\"Amount of fyDai being bought that will be deposited in `to` wallet\",\"to\":\"Wallet receiving the fyDai being bought\"},\"returns\":{\"_0\":\"Amount of dai that will be taken from `from` wallet\"}},\"buyFYDaiPreview(uint128)\":{\"details\":\"Returns how much dai would be required to buy `fyDaiOut` fyDai.\",\"params\":{\"fyDaiOut\":\"Amount of fyDai hypothetically desired.\"},\"returns\":{\"_0\":\"Amount of Dai hypothetically required.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getDaiReserves()\":{\"details\":\"Returns the Dai reserves\"},\"getFYDaiReserves()\":{\"details\":\"Returns the \\\"virtual\\\" fyDai reserves\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mint(address,address,uint256)\":{\"details\":\"Mint liquidity tokens in exchange for adding dai and fyDai The liquidity provider needs to have called `dai.approve` and `fyDai.approve`.\",\"params\":{\"daiOffered\":\"Amount of `dai` being invested, an appropriate amount of `fyDai` to be invested alongside will be calculated and taken by this function from the caller.\",\"from\":\"Wallet providing the dai and fyDai. Must have approved the operator with `pool.addDelegate(operator)`.\",\"to\":\"Wallet receiving the minted liquidity tokens.\"},\"returns\":{\"_0\":\"The amount of liquidity tokens minted.\"}},\"mintWithDai(address,address,uint256)\":{\"details\":\"Mint liquidity tokens in exchange for adding only dai The liquidity provider needs to have called `dai.approve`.\",\"params\":{\"from\":\"Wallet providing the dai and fyDai. Must have approved the operator with `pool.addDelegate(operator)`.\",\"fyDaiToBuy\":\"Amount of `fyDai` being bought in the Pool, from this we calculate how much Dai it will be taken in.\",\"to\":\"Wallet receiving the minted liquidity tokens.\"},\"returns\":{\"_0\":\"The amount of liquidity tokens minted.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC2612-permit}. In cases where the free option is not a concern, deadline can simply be set to uint(-1), so it should be seen as an optional parameter\"},\"revokeDelegate(address)\":{\"details\":\"Stop a delegate from acting on the behalf of caller\"},\"sellDai(address,address,uint128)\":{\"details\":\"Sell Dai for fyDai The trader needs to have called `dai.approve`\",\"params\":{\"daiIn\":\"Amount of dai being sold that will be taken from the user's wallet\",\"from\":\"Wallet providing the dai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\",\"to\":\"Wallet receiving the fyDai being bought\"},\"returns\":{\"_0\":\"Amount of fyDai that will be deposited on `to` wallet\"}},\"sellDaiPreview(uint128)\":{\"details\":\"Returns how much fyDai would be obtained by selling `daiIn` dai\",\"params\":{\"daiIn\":\"Amount of dai hypothetically sold.\"},\"returns\":{\"_0\":\"Amount of fyDai hypothetically bought.\"}},\"sellFYDai(address,address,uint128)\":{\"details\":\"Sell fyDai for Dai The trader needs to have called `fyDai.approve`\",\"params\":{\"from\":\"Wallet providing the fyDai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\",\"fyDaiIn\":\"Amount of fyDai being sold that will be taken from the user's wallet\",\"to\":\"Wallet receiving the dai being bought\"},\"returns\":{\"_0\":\"Amount of dai that will be deposited on `to` wallet\"}},\"sellFYDaiPreview(uint128)\":{\"details\":\"Returns how much dai would be obtained by selling `fyDaiIn` fyDai.\",\"params\":{\"fyDaiIn\":\"Amount of fyDai hypothetically sold.\"},\"returns\":{\"_0\":\"Amount of Dai hypothetically bought.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pool.sol\":\"Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xcbd85c86627a47fd939f1f4ee3ba626575ff2a182e1804b29f5136394449b538\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/Math64x64.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n/*\\r\\n *  Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by  Consulting.\\r\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\r\\n */\\r\\npragma solidity ^0.7.5;\\r\\n\\r\\n/**\\r\\n * Smart contract library of mathematical functions operating with signed\\r\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\r\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\r\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\r\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\r\\n * represented by int128 type holding only the numerator.\\r\\n */\\r\\nlibrary Math64x64 {\\r\\n  /**\\r\\n   * @dev Minimum value signed 64.64-bit fixed point number may have. \\r\\n   */\\r\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\r\\n\\r\\n  /**\\r\\n   * @dev Maximum value signed 64.64-bit fixed point number may have. \\r\\n   */\\r\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n  /**\\r\\n   * @dev Convert signed 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromInt (int256 x) internal pure returns (int128) {\\r\\n    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\r\\n    return int128 (x << 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Convert signed 64.64 fixed point number into signed 64-bit integer number\\r\\n   * rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64-bit integer number\\r\\n   */\\r\\n  function toInt (int128 x) internal pure returns (int64) {\\r\\n    return int64 (x >> 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\r\\n    require (x <= 0x7FFFFFFFFFFFFFFF);\\r\\n    return int128 (x << 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Convert signed 64.64 fixed point number into unsigned 64-bit integer\\r\\n   * number rounding down.  Revert on underflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return unsigned 64-bit integer number\\r\\n   */\\r\\n  function toUInt (int128 x) internal pure returns (uint64) {\\r\\n    require (x >= 0);\\r\\n    return uint64 (x >> 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\r\\n   * number rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 128.128-bin fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function from128x128 (int256 x) internal pure returns (int128) {\\r\\n    int256 result = x >> 64;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Convert signed 64.64 fixed point number into signed 128.128 fixed point\\r\\n   * number.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 128.128 fixed point number\\r\\n   */\\r\\n  function to128x128 (int128 x) internal pure returns (int256) {\\r\\n    return int256 (x) << 64;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x + y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) + y;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x - y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) - y;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x * y rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) * y >> 64;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\r\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 256-bit integer number\\r\\n   */\\r\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\r\\n    if (x == MIN_64x64) {\\r\\n      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\r\\n        y <= 0x1000000000000000000000000000000000000000000000000);\\r\\n      return -y << 63;\\r\\n    } else {\\r\\n      bool negativeResult = false;\\r\\n      if (x < 0) {\\r\\n        x = -x;\\r\\n        negativeResult = true;\\r\\n      }\\r\\n      if (y < 0) {\\r\\n        y = -y; // We rely on overflow behavior here\\r\\n        negativeResult = !negativeResult;\\r\\n      }\\r\\n      uint256 absoluteResult = mulu (x, uint256 (y));\\r\\n      if (negativeResult) {\\r\\n        require (absoluteResult <=\\r\\n          0x8000000000000000000000000000000000000000000000000000000000000000);\\r\\n        return -int256 (absoluteResult); // We rely on overflow behavior here\\r\\n      } else {\\r\\n        require (absoluteResult <=\\r\\n          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n        return int256 (absoluteResult);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x * y rounding down, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 256-bit integer number\\r\\n   */\\r\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\r\\n    if (y == 0) return 0;\\r\\n\\r\\n    require (x >= 0);\\r\\n\\r\\n    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\r\\n    uint256 hi = uint256 (x) * (y >> 128);\\r\\n\\r\\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n    hi <<= 64;\\r\\n\\r\\n    require (hi <=\\r\\n      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\r\\n    return hi + lo;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x / y rounding towards zero.  Revert on overflow or when y is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n    int256 result = (int256 (x) << 64) / y;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x / y rounding towards zero, where x and y are signed 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n\\r\\n    bool negativeResult = false;\\r\\n    if (x < 0) {\\r\\n      x = -x; // We rely on overflow behavior here\\r\\n      negativeResult = true;\\r\\n    }\\r\\n    if (y < 0) {\\r\\n      y = -y; // We rely on overflow behavior here\\r\\n      negativeResult = !negativeResult;\\r\\n    }\\r\\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\r\\n    if (negativeResult) {\\r\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\r\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    } else {\\r\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n    uint128 result = divuu (x, y);\\r\\n    require (result <= uint128 (MAX_64x64));\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate -x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function neg (int128 x) internal pure returns (int128) {\\r\\n    require (x != MIN_64x64);\\r\\n    return -x;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate |x|.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function abs (int128 x) internal pure returns (int128) {\\r\\n    require (x != MIN_64x64);\\r\\n    return x < 0 ? -x : x;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function inv (int128 x) internal pure returns (int128) {\\r\\n    require (x != 0);\\r\\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    return int128 ((int256 (x) + int256 (y)) >> 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\r\\n   * Revert on overflow or in case x * y is negative.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 m = int256 (x) * int256 (y);\\r\\n    require (m >= 0);\\r\\n    require (m <\\r\\n        0x4000000000000000000000000000000000000000000000000000000000000000);\\r\\n    return int128 (sqrtu (uint256 (m), uint256 (x) + uint256 (y) >> 1));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\r\\n    uint256 absoluteResult;\\r\\n    bool negativeResult = false;\\r\\n    if (x >= 0) {\\r\\n      absoluteResult = powu (uint256 (x) << 63, y);\\r\\n    } else {\\r\\n      // We rely on overflow behavior here\\r\\n      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\\r\\n      negativeResult = y & 1 > 0;\\r\\n    }\\r\\n\\r\\n    absoluteResult >>= 63;\\r\\n\\r\\n    if (negativeResult) {\\r\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\r\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    } else {\\r\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate sqrt (x) rounding down.  Revert if x < 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sqrt (int128 x) internal pure returns (int128) {\\r\\n    require (x >= 0);\\r\\n    return int128 (sqrtu (uint256 (x) << 64, 0x10000000000000000));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate binary logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function log_2 (int128 x) internal pure returns (int128) {\\r\\n    require (x > 0);\\r\\n\\r\\n    int256 msb = 0;\\r\\n    int256 xc = x;\\r\\n    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\r\\n    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n    if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n    if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n    if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n    int256 result = msb - 64 << 64;\\r\\n    uint256 ux = uint256 (x) << uint256(127 - msb);\\r\\n    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\r\\n      ux *= ux;\\r\\n      uint256 b = ux >> 255;\\r\\n      ux >>= 127 + b;\\r\\n      result += bit * int256 (b);\\r\\n    }\\r\\n\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate natural logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function ln (int128 x) internal pure returns (int128) {\\r\\n    require (x > 0);\\r\\n\\r\\n    return int128 (\\r\\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate binary exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp_2 (int128 x) internal pure returns (int128) {\\r\\n    require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n    if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n    uint256 result = 0x80000000000000000000000000000000;\\r\\n\\r\\n    if (x & 0x8000000000000000 > 0)\\r\\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\r\\n    if (x & 0x4000000000000000 > 0)\\r\\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\r\\n    if (x & 0x2000000000000000 > 0)\\r\\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\r\\n    if (x & 0x1000000000000000 > 0)\\r\\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\r\\n    if (x & 0x800000000000000 > 0)\\r\\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\r\\n    if (x & 0x400000000000000 > 0)\\r\\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\r\\n    if (x & 0x200000000000000 > 0)\\r\\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\r\\n    if (x & 0x100000000000000 > 0)\\r\\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\r\\n    if (x & 0x80000000000000 > 0)\\r\\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\r\\n    if (x & 0x40000000000000 > 0)\\r\\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\r\\n    if (x & 0x20000000000000 > 0)\\r\\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\r\\n    if (x & 0x10000000000000 > 0)\\r\\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\r\\n    if (x & 0x8000000000000 > 0)\\r\\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\r\\n    if (x & 0x4000000000000 > 0)\\r\\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\r\\n    if (x & 0x2000000000000 > 0)\\r\\n      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\r\\n    if (x & 0x1000000000000 > 0)\\r\\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\r\\n    if (x & 0x800000000000 > 0)\\r\\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\r\\n    if (x & 0x400000000000 > 0)\\r\\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\r\\n    if (x & 0x200000000000 > 0)\\r\\n      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\r\\n    if (x & 0x100000000000 > 0)\\r\\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\r\\n    if (x & 0x80000000000 > 0)\\r\\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\r\\n    if (x & 0x40000000000 > 0)\\r\\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\r\\n    if (x & 0x20000000000 > 0)\\r\\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\r\\n    if (x & 0x10000000000 > 0)\\r\\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\r\\n    if (x & 0x8000000000 > 0)\\r\\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\r\\n    if (x & 0x4000000000 > 0)\\r\\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\r\\n    if (x & 0x2000000000 > 0)\\r\\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\r\\n    if (x & 0x1000000000 > 0)\\r\\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\r\\n    if (x & 0x800000000 > 0)\\r\\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\r\\n    if (x & 0x400000000 > 0)\\r\\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\r\\n    if (x & 0x200000000 > 0)\\r\\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\r\\n    if (x & 0x100000000 > 0)\\r\\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\r\\n    if (x & 0x80000000 > 0)\\r\\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\r\\n    if (x & 0x40000000 > 0)\\r\\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\r\\n    if (x & 0x20000000 > 0)\\r\\n      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\r\\n    if (x & 0x10000000 > 0)\\r\\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\r\\n    if (x & 0x8000000 > 0)\\r\\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\r\\n    if (x & 0x4000000 > 0)\\r\\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\r\\n    if (x & 0x2000000 > 0)\\r\\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\r\\n    if (x & 0x1000000 > 0)\\r\\n      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\r\\n    if (x & 0x800000 > 0)\\r\\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\r\\n    if (x & 0x400000 > 0)\\r\\n      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\r\\n    if (x & 0x200000 > 0)\\r\\n      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\r\\n    if (x & 0x100000 > 0)\\r\\n      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\r\\n    if (x & 0x80000 > 0)\\r\\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\r\\n    if (x & 0x40000 > 0)\\r\\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\r\\n    if (x & 0x20000 > 0)\\r\\n      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\r\\n    if (x & 0x10000 > 0)\\r\\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\r\\n    if (x & 0x8000 > 0)\\r\\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\r\\n    if (x & 0x4000 > 0)\\r\\n      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\r\\n    if (x & 0x2000 > 0)\\r\\n      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\r\\n    if (x & 0x1000 > 0)\\r\\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\r\\n    if (x & 0x800 > 0)\\r\\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\r\\n    if (x & 0x400 > 0)\\r\\n      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\r\\n    if (x & 0x200 > 0)\\r\\n      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\r\\n    if (x & 0x100 > 0)\\r\\n      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\r\\n    if (x & 0x80 > 0)\\r\\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\r\\n    if (x & 0x40 > 0)\\r\\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\r\\n    if (x & 0x20 > 0)\\r\\n      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\r\\n    if (x & 0x10 > 0)\\r\\n      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\r\\n    if (x & 0x8 > 0)\\r\\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\r\\n    if (x & 0x4 > 0)\\r\\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\r\\n    if (x & 0x2 > 0)\\r\\n      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\r\\n    if (x & 0x1 > 0)\\r\\n      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\r\\n\\r\\n    result >>= uint256(63 - (x >> 64));\\r\\n    require (result <= uint256 (MAX_64x64));\\r\\n\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate natural exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp (int128 x) internal pure returns (int128) {\\r\\n    require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n    if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n    return exp_2 (\\r\\n        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 64.64-bit fixed point number\\r\\n   */\\r\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\r\\n    require (y != 0);\\r\\n\\r\\n    uint256 result;\\r\\n\\r\\n    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\r\\n      result = (x << 64) / y;\\r\\n    else {\\r\\n      uint256 msb = 192;\\r\\n      uint256 xc = x >> 192;\\r\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\r\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n      uint256 hi = result * (y >> 128);\\r\\n      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n      uint256 xh = x >> 192;\\r\\n      uint256 xl = x << 64;\\r\\n\\r\\n      if (xl < lo) xh -= 1;\\r\\n      xl -= lo; // We rely on overflow behavior here\\r\\n      lo = hi << 128;\\r\\n      if (xl < lo) xh -= 1;\\r\\n      xl -= lo; // We rely on overflow behavior here\\r\\n\\r\\n      assert (xh == hi >> 128);\\r\\n\\r\\n      result += xl / y;\\r\\n    }\\r\\n\\r\\n    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n    return uint128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\\r\\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x unsigned 129.127-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return unsigned 129.127-bit fixed point number\\r\\n   */\\r\\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\\r\\n    if (y == 0) return 0x80000000000000000000000000000000;\\r\\n    else if (x == 0) return 0;\\r\\n    else {\\r\\n      int256 msb = 0;\\r\\n      uint256 xc = x;\\r\\n      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\\r\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\r\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n      int256 xe = msb - 127;\\r\\n      if (xe > 0) x >>= uint256(xe);\\r\\n      else x <<= -uint256(xe);\\r\\n\\r\\n      uint256 result = 0x80000000000000000000000000000000;\\r\\n      int256 re = 0;\\r\\n\\r\\n      while (y > 0) {\\r\\n        if (y & 1 > 0) {\\r\\n          result = result * x;\\r\\n          y -= 1;\\r\\n          re += xe;\\r\\n          if (result >=\\r\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\r\\n            result >>= 128;\\r\\n            re += 1;\\r\\n          } else result >>= 127;\\r\\n          if (re < -127) return 0; // Underflow\\r\\n          require (re < 128); // Overflow\\r\\n        } else {\\r\\n          x = x * x;\\r\\n          y >>= 1;\\r\\n          xe <<= 1;\\r\\n          if (x >=\\r\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\r\\n            x >>= 128;\\r\\n            xe += 1;\\r\\n          } else x >>= 127;\\r\\n          if (xe < -127) return 0; // Underflow\\r\\n          require (xe < 128); // Overflow\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (re > 0) result <<= uint256(re);\\r\\n      else if (re < 0) result >>= -uint256(re);\\r\\n\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\r\\n   * number.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return unsigned 128-bit integer number\\r\\n   */\\r\\n  function sqrtu (uint256 x, uint256 r) private pure returns (uint128) {\\r\\n    if (x == 0) return 0;\\r\\n    else {\\r\\n      require (r > 0);\\r\\n      while (true) {\\r\\n        uint256 rr = x / r;\\r\\n        if (r == rr || r + 1 == rr) return uint128 (r);\\r\\n        else if (r == rr + 1) return uint128 (rr);\\r\\n        r = r + rr + 1 >> 1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xc6b742c224d4ac0385b58d5a672155c7b20b570e6cea612a021276184820c22b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./YieldMath.sol\\\";\\nimport \\\"./helpers/Delegable.sol\\\";\\nimport \\\"./helpers/SafeCast.sol\\\";\\nimport \\\"./helpers/ERC20Permit.sol\\\";\\nimport \\\"./interfaces/IFYDai.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\n\\n\\n/// @dev The Pool contract exchanges Dai for fyDai at a price defined by a specific formula.\\ncontract Pool is IPool, Delegable(), ERC20Permit {\\n    using SafeMath for uint256;\\n\\n    event Trade(uint256 maturity, address indexed from, address indexed to, int256 daiTokens, int256 fyDaiTokens);\\n    event Liquidity(uint256 maturity, address indexed from, address indexed to, int256 daiTokens, int256 fyDaiTokens, int256 poolTokens);\\n\\n    int128 constant public k = int128(uint256((1 << 64)) / 126144000); // 1 / Seconds in 4 years, in 64.64\\n    int128 constant public g1 = int128(uint256((950 << 64)) / 1000); // To be used when selling Dai to the pool. All constants are `ufixed`, to divide them they must be converted to uint256\\n    int128 constant public g2 = int128(uint256((1000 << 64)) / 950); // To be used when selling fyDai to the pool. All constants are `ufixed`, to divide them they must be converted to uint256\\n    uint128 immutable public maturity;\\n\\n    IERC20 public override dai;\\n    IFYDai public override fyDai;\\n\\n    constructor(address dai_, address fyDai_, string memory name_, string memory symbol_)\\n        public\\n        ERC20Permit(name_, symbol_)\\n    {\\n        dai = IERC20(dai_);\\n        fyDai = IFYDai(fyDai_);\\n\\n        maturity = toUint128(fyDai.maturity());\\n    }\\n\\n    /// @dev Trading can only be done before maturity\\n    modifier beforeMaturity() {\\n        require(\\n            block.timestamp < maturity,\\n            \\\"Pool: Too late\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Overflow-protected addition, from OpenZeppelin\\n    function add(uint128 a, uint128 b)\\n        internal pure returns (uint128)\\n    {\\n        uint128 c = a + b;\\n        require(c >= a, \\\"Pool: Dai reserves too high\\\");\\n\\n        return c;\\n    }\\n\\n    /// @dev Overflow-protected substraction, from OpenZeppelin\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\\n        require(b <= a, \\\"Pool: fyDai reserves too low\\\");\\n        uint128 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /// @dev Safe casting from uint256 to uint128\\n    function toUint128(uint256 x) internal pure returns(uint128) {\\n        require(\\n            x <= type(uint128).max,\\n            \\\"Pool: Cast overflow\\\"\\n        );\\n        return uint128(x);\\n    }\\n\\n    /// @dev Safe casting from uint256 to int256\\n    function toInt256(uint256 x) internal pure returns(int256) {\\n        require(\\n            x <= uint256(type(int256).max),\\n            \\\"Pool: Cast overflow\\\"\\n        );\\n        return int256(x);\\n    }\\n\\n    /// @dev Mint initial liquidity tokens.\\n    /// The liquidity provider needs to have called `dai.approve`\\n    /// @param daiIn The initial Dai liquidity to provide.\\n    function init(uint256 daiIn)\\n        internal\\n        beforeMaturity\\n        returns (uint256)\\n    {\\n        require(\\n            totalSupply() == 0,\\n            \\\"Pool: Already initialized\\\"\\n        );\\n        // no fyDai transferred, because initial fyDai deposit is entirely virtual\\n        dai.transferFrom(msg.sender, address(this), daiIn);\\n        _mint(msg.sender, daiIn);\\n        emit Liquidity(maturity, msg.sender, msg.sender, -toInt256(daiIn), 0, toInt256(daiIn));\\n\\n        return daiIn;\\n    }\\n\\n    /// @dev Mint liquidity tokens in exchange for adding dai and fyDai\\n    /// The liquidity provider needs to have called `dai.approve` and `fyDai.approve`.\\n    /// @param from Wallet providing the dai and fyDai. Must have approved the operator with `pool.addDelegate(operator)`.\\n    /// @param to Wallet receiving the minted liquidity tokens.\\n    /// @param daiOffered Amount of `dai` being invested, an appropriate amount of `fyDai` to be invested alongside will be calculated and taken by this function from the caller.\\n    /// @return The amount of liquidity tokens minted.\\n    function mint(address from, address to, uint256 daiOffered)\\n        external override\\n        onlyHolderOrDelegate(from, \\\"Pool: Only Holder Or Delegate\\\")\\n        returns (uint256)\\n    {\\n        uint256 supply = totalSupply();\\n        if (supply == 0) return init(daiOffered);\\n\\n        uint256 daiReserves = dai.balanceOf(address(this));\\n        // use the actual reserves rather than the virtual reserves\\n        uint256 fyDaiReserves = fyDai.balanceOf(address(this));\\n        uint256 tokensMinted = supply.mul(daiOffered).div(daiReserves);\\n        uint256 fyDaiRequired = fyDaiReserves.mul(tokensMinted).div(supply);\\n\\n        require(daiReserves.add(daiOffered) <= type(uint128).max); // fyDaiReserves can't go over type(uint128).max\\n        require(supply.add(fyDaiReserves.add(fyDaiRequired)) <= type(uint128).max); // fyDaiReserves can't go over type(uint128).max\\n\\n        require(dai.transferFrom(from, address(this), daiOffered));\\n        require(fyDai.transferFrom(from, address(this), fyDaiRequired));\\n        _mint(to, tokensMinted);\\n        emit Liquidity(maturity, from, to, -toInt256(daiOffered), -toInt256(fyDaiRequired), toInt256(tokensMinted));\\n\\n        return tokensMinted;\\n    }\\n\\n    /// @dev Mint liquidity tokens in exchange for adding only dai\\n    /// The liquidity provider needs to have called `dai.approve`.\\n    /// @param from Wallet providing the dai and fyDai. Must have approved the operator with `pool.addDelegate(operator)`.\\n    /// @param to Wallet receiving the minted liquidity tokens.\\n    /// @param fyDaiToBuy Amount of `fyDai` being bought in the Pool, from this we calculate how much Dai it will be taken in.\\n    /// @return The amount of liquidity tokens minted.\\n    function mintWithDai(address from, address to, uint256 fyDaiToBuy)\\n        external\\n        onlyHolderOrDelegate(from, \\\"Pool: Only Holder Or Delegate\\\")\\n        returns (uint256, uint256)\\n    {\\n        uint256 supply = totalSupply();\\n        require(supply > 0, \\\"Pool: Use mint first\\\");\\n\\n        uint256 daiReserves = dai.balanceOf(address(this));\\n        uint256 fyDaiReserves = fyDai.balanceOf(address(this));\\n\\n        uint256 daiIn = buyFYDaiPreview(toUint128(fyDaiToBuy)); // This is a virtual buy\\n\\n        require(fyDaiReserves >= fyDaiToBuy, \\\"Pool: Not enough fyDai\\\");\\n        uint256 tokensMinted = supply.mul(fyDaiToBuy).div(fyDaiReserves.sub(fyDaiToBuy));\\n        daiIn = daiReserves.add(daiIn).mul(tokensMinted).div(supply);\\n        require(daiReserves.add(daiIn) <= type(uint128).max, \\\"Pool: Too much Dai\\\");\\n\\n        require(dai.transferFrom(from, address(this), daiIn), \\\"Pool: Dai transfer failed\\\");\\n        _mint(to, tokensMinted);\\n        emit Liquidity(maturity, from, to, -toInt256(daiIn), 0, toInt256(tokensMinted));\\n\\n        return (daiIn, tokensMinted);\\n    }\\n\\n    /// @dev Burn liquidity tokens in exchange for dai and fyDai.\\n    /// The liquidity provider needs to have called `pool.approve`.\\n    /// @param from Wallet providing the liquidity tokens. Must have approved the operator with `pool.addDelegate(operator)`.\\n    /// @param to Wallet receiving the dai and fyDai.\\n    /// @param tokensBurned Amount of liquidity tokens being burned.\\n    /// @return The amount of reserve tokens returned (daiTokens, fyDaiTokens).\\n    function burn(address from, address to, uint256 tokensBurned)\\n        external override\\n        onlyHolderOrDelegate(from, \\\"Pool: Only Holder Or Delegate\\\")\\n        returns (uint256, uint256)\\n    {\\n        uint256 supply = totalSupply();\\n        uint256 daiReserves = dai.balanceOf(address(this));\\n        // use the actual reserves rather than the virtual reserves\\n        uint256 daiOut;\\n        uint256 fyDaiOut;\\n        { // avoiding stack too deep\\n            uint256 fyDaiReserves = fyDai.balanceOf(address(this));\\n            daiOut = tokensBurned.mul(daiReserves).div(supply);\\n            fyDaiOut = tokensBurned.mul(fyDaiReserves).div(supply);\\n        }\\n\\n        _burn(from, tokensBurned); // TODO: Fix to check allowance\\n        dai.transfer(to, daiOut);\\n        fyDai.transfer(to, fyDaiOut);\\n        emit Liquidity(maturity, from, to, toInt256(daiOut), toInt256(fyDaiOut), -toInt256(tokensBurned));\\n\\n        return (daiOut, fyDaiOut);\\n    }\\n\\n    /// @dev Burn liquidity tokens in exchange for dai.\\n    /// The liquidity provider needs to have called `pool.approve`.\\n    /// @param from Wallet providing the liquidity tokens. Must have approved the operator with `pool.addDelegate(operator)`.\\n    /// @param to Wallet receiving the dai and fyDai.\\n    /// @param tokensBurned Amount of liquidity tokens being burned.\\n    /// @return The amount of dai tokens returned.\\n    function burnForDai(address from, address to, uint256 tokensBurned)\\n        external\\n        onlyHolderOrDelegate(from, \\\"Pool: Only Holder Or Delegate\\\")\\n        returns (uint256)\\n    {\\n        uint256 supply = totalSupply();\\n        uint256 daiReserves = dai.balanceOf(address(this));\\n        // use the actual reserves rather than the virtual reserves\\n        uint256 daiOut;\\n        uint256 fyDaiObtained;\\n        { // avoiding stack too deep\\n            uint256 fyDaiReserves = fyDai.balanceOf(address(this));\\n            daiOut = tokensBurned.mul(daiReserves).div(supply);\\n            fyDaiObtained = tokensBurned.mul(fyDaiReserves).div(supply);\\n        }\\n\\n        daiOut = daiOut.add(\\n            YieldMath.daiOutForFYDaiIn(                            // This is a virtual sell\\n                toUint128(daiReserves.sub(daiOut)),                // Real reserves, minus virtual burn\\n                sub(getFYDaiReserves(), toUint128(fyDaiObtained)), // Virtual reserves, minus virtual burn\\n                toUint128(fyDaiObtained),                          // Sell the virtual fyDai obtained\\n                toUint128(maturity - block.timestamp),             // This can't be called after maturity\\n                k,\\n                g2\\n            )\\n        );\\n\\n        _burn(from, tokensBurned); // TODO: Fix to check allowance\\n        dai.transfer(to, daiOut);\\n        emit Liquidity(maturity, from, to, toInt256(daiOut), 0, -toInt256(tokensBurned));\\n\\n        return daiOut;\\n    }\\n\\n    /// @dev Sell Dai for fyDai\\n    /// The trader needs to have called `dai.approve`\\n    /// @param from Wallet providing the dai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\\n    /// @param to Wallet receiving the fyDai being bought\\n    /// @param daiIn Amount of dai being sold that will be taken from the user's wallet\\n    /// @return Amount of fyDai that will be deposited on `to` wallet\\n    function sellDai(address from, address to, uint128 daiIn)\\n        external override\\n        onlyHolderOrDelegate(from, \\\"Pool: Only Holder Or Delegate\\\")\\n        returns(uint128)\\n    {\\n        uint128 fyDaiOut = sellDaiPreview(daiIn);\\n\\n        dai.transferFrom(from, address(this), daiIn);\\n        fyDai.transfer(to, fyDaiOut);\\n        emit Trade(maturity, from, to, -toInt256(daiIn), toInt256(fyDaiOut));\\n\\n        return fyDaiOut;\\n    }\\n\\n    /// @dev Returns how much fyDai would be obtained by selling `daiIn` dai\\n    /// @param daiIn Amount of dai hypothetically sold.\\n    /// @return Amount of fyDai hypothetically bought.\\n    function sellDaiPreview(uint128 daiIn)\\n        public view override\\n        beforeMaturity\\n        returns(uint128)\\n    {\\n        uint128 daiReserves = getDaiReserves();\\n        uint128 fyDaiReserves = getFYDaiReserves();\\n\\n        uint128 fyDaiOut = YieldMath.fyDaiOutForDaiIn(\\n            daiReserves,\\n            fyDaiReserves,\\n            daiIn,\\n            toUint128(maturity - block.timestamp), // This can't be called after maturity\\n            k,\\n            g1\\n        );\\n\\n        require(\\n            sub(fyDaiReserves, fyDaiOut) >= add(daiReserves, daiIn),\\n            \\\"Pool: fyDai reserves too low\\\"\\n        );\\n\\n        return fyDaiOut;\\n    }\\n\\n    /// @dev Buy Dai for fyDai\\n    /// The trader needs to have called `fyDai.approve`\\n    /// @param from Wallet providing the fyDai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\\n    /// @param to Wallet receiving the dai being bought\\n    /// @param daiOut Amount of dai being bought that will be deposited in `to` wallet\\n    /// @return Amount of fyDai that will be taken from `from` wallet\\n    function buyDai(address from, address to, uint128 daiOut)\\n        external override\\n        onlyHolderOrDelegate(from, \\\"Pool: Only Holder Or Delegate\\\")\\n        returns(uint128)\\n    {\\n        uint128 fyDaiIn = buyDaiPreview(daiOut);\\n\\n        fyDai.transferFrom(from, address(this), fyDaiIn);\\n        dai.transfer(to, daiOut);\\n        emit Trade(maturity, from, to, toInt256(daiOut), -toInt256(fyDaiIn));\\n\\n        return fyDaiIn;\\n    }\\n\\n    /// @dev Returns how much fyDai would be required to buy `daiOut` dai.\\n    /// @param daiOut Amount of dai hypothetically desired.\\n    /// @return Amount of fyDai hypothetically required.\\n    function buyDaiPreview(uint128 daiOut)\\n        public view override\\n        beforeMaturity\\n        returns(uint128)\\n    {\\n        return YieldMath.fyDaiInForDaiOut(\\n            getDaiReserves(),\\n            getFYDaiReserves(),\\n            daiOut,\\n            toUint128(maturity - block.timestamp), // This can't be called after maturity\\n            k,\\n            g2\\n        );\\n    }\\n\\n    /// @dev Sell fyDai for Dai\\n    /// The trader needs to have called `fyDai.approve`\\n    /// @param from Wallet providing the fyDai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\\n    /// @param to Wallet receiving the dai being bought\\n    /// @param fyDaiIn Amount of fyDai being sold that will be taken from the user's wallet\\n    /// @return Amount of dai that will be deposited on `to` wallet\\n    function sellFYDai(address from, address to, uint128 fyDaiIn)\\n        external override\\n        onlyHolderOrDelegate(from, \\\"Pool: Only Holder Or Delegate\\\")\\n        returns(uint128)\\n    {\\n        uint128 daiOut = sellFYDaiPreview(fyDaiIn);\\n\\n        fyDai.transferFrom(from, address(this), fyDaiIn);\\n        dai.transfer(to, daiOut);\\n        emit Trade(maturity, from, to, toInt256(daiOut), -toInt256(fyDaiIn));\\n\\n        return daiOut;\\n    }\\n\\n    /// @dev Returns how much dai would be obtained by selling `fyDaiIn` fyDai.\\n    /// @param fyDaiIn Amount of fyDai hypothetically sold.\\n    /// @return Amount of Dai hypothetically bought.\\n    function sellFYDaiPreview(uint128 fyDaiIn)\\n        public view override\\n        beforeMaturity\\n        returns(uint128)\\n    {\\n        return YieldMath.daiOutForFYDaiIn(\\n            getDaiReserves(),\\n            getFYDaiReserves(),\\n            fyDaiIn,\\n            toUint128(maturity - block.timestamp), // This can't be called after maturity\\n            k,\\n            g2\\n        );\\n    }\\n\\n    /// @dev Buy fyDai for dai\\n    /// The trader needs to have called `dai.approve`\\n    /// @param from Wallet providing the dai being sold. Must have approved the operator with `pool.addDelegate(operator)`.\\n    /// @param to Wallet receiving the fyDai being bought\\n    /// @param fyDaiOut Amount of fyDai being bought that will be deposited in `to` wallet\\n    /// @return Amount of dai that will be taken from `from` wallet\\n    function buyFYDai(address from, address to, uint128 fyDaiOut)\\n        external override\\n        onlyHolderOrDelegate(from, \\\"Pool: Only Holder Or Delegate\\\")\\n        returns(uint128)\\n    {\\n        uint128 daiIn = buyFYDaiPreview(fyDaiOut);\\n\\n        dai.transferFrom(from, address(this), daiIn);\\n        fyDai.transfer(to, fyDaiOut);\\n        emit Trade(maturity, from, to, -toInt256(daiIn), toInt256(fyDaiOut));\\n\\n        return daiIn;\\n    }\\n\\n\\n    /// @dev Returns how much dai would be required to buy `fyDaiOut` fyDai.\\n    /// @param fyDaiOut Amount of fyDai hypothetically desired.\\n    /// @return Amount of Dai hypothetically required.\\n    function buyFYDaiPreview(uint128 fyDaiOut)\\n        public view override\\n        beforeMaturity\\n        returns(uint128)\\n    {\\n        uint128 daiReserves = getDaiReserves();\\n        uint128 fyDaiReserves = getFYDaiReserves();\\n\\n        uint128 daiIn = YieldMath.daiInForFYDaiOut(\\n            daiReserves,\\n            fyDaiReserves,\\n            fyDaiOut,\\n            toUint128(maturity - block.timestamp), // This can't be called after maturity\\n            k,\\n            g1\\n        );\\n\\n        require(\\n            sub(fyDaiReserves, fyDaiOut) >= add(daiReserves, daiIn),\\n            \\\"Pool: fyDai reserves too low\\\"\\n        );\\n\\n        return daiIn;\\n    }\\n\\n    /// @dev Returns the \\\"virtual\\\" fyDai reserves\\n    function getFYDaiReserves()\\n        public view override\\n        returns(uint128)\\n    {\\n        return toUint128(fyDai.balanceOf(address(this)).add(totalSupply()));\\n    }\\n\\n    /// @dev Returns the Dai reserves\\n    function getDaiReserves()\\n        public view override\\n        returns(uint128)\\n    {\\n        return toUint128(dai.balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x6d9cb7a810240c66e960c0df7074ebad5df8413d64b75a448e55415bf9e72a72\",\"license\":\"GPL-3.0-or-later\"},\"contracts/YieldMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.7.5;\\r\\n\\r\\nimport \\\"./Math64x64.sol\\\";\\r\\n\\r\\nlibrary Exp64x64 {\\r\\n  /**\\r\\n   * Raise given number x into power specified as a simple fraction y/z and then\\r\\n   * multiply the result by the normalization factor 2^(128 * (1 - y/z)).\\r\\n   * Revert if z is zero, or if both x and y are zeros.\\r\\n   *\\r\\n   * @param x number to raise into given power y/z\\r\\n   * @param y numerator of the power to raise x into\\r\\n   * @param z denominator of the power to raise x into\\r\\n   * @return x raised into power y/z and then multiplied by 2^(128 * (1 - y/z))\\r\\n   */\\r\\n  function pow(uint128 x, uint128 y, uint128 z)\\r\\n  internal pure returns(uint128) {\\r\\n    require(z != 0);\\r\\n\\r\\n    if(x == 0) {\\r\\n      require(y != 0);\\r\\n      return 0;\\r\\n    } else {\\r\\n      uint256 l =\\r\\n        uint256(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - log_2(x)) * y / z;\\r\\n      if(l > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) return 0;\\r\\n      else return pow_2(uint128(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - l));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate base 2 logarithm of an unsigned 128-bit integer number.  Revert\\r\\n   * in case x is zero.\\r\\n   *\\r\\n   * @param x number to calculate base 2 logarithm of\\r\\n   * @return base 2 logarithm of x, multiplied by 2^121\\r\\n   */\\r\\n  function log_2(uint128 x)\\r\\n  internal pure returns(uint128) {\\r\\n    require(x != 0);\\r\\n\\r\\n    uint b = x;\\r\\n\\r\\n    uint l = 0xFE000000000000000000000000000000;\\r\\n\\r\\n    if(b < 0x10000000000000000) {l -= 0x80000000000000000000000000000000; b <<= 64;}\\r\\n    if(b < 0x1000000000000000000000000) {l -= 0x40000000000000000000000000000000; b <<= 32;}\\r\\n    if(b < 0x10000000000000000000000000000) {l -= 0x20000000000000000000000000000000; b <<= 16;}\\r\\n    if(b < 0x1000000000000000000000000000000) {l -= 0x10000000000000000000000000000000; b <<= 8;}\\r\\n    if(b < 0x10000000000000000000000000000000) {l -= 0x8000000000000000000000000000000; b <<= 4;}\\r\\n    if(b < 0x40000000000000000000000000000000) {l -= 0x4000000000000000000000000000000; b <<= 2;}\\r\\n    if(b < 0x80000000000000000000000000000000) {l -= 0x2000000000000000000000000000000; b <<= 1;}\\r\\n\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000000;} /*\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2;}\\r\\n    b = b * b >> 127; if(b > 0x100000000000000000000000000000000) l |= 0x1; */\\r\\n\\r\\n    return uint128(l);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate 2 raised into given power.\\r\\n   *\\r\\n   * @param x power to raise 2 into, multiplied by 2^121\\r\\n   * @return 2 raised into given power\\r\\n   */\\r\\n  function pow_2(uint128 x)\\r\\n  internal pure returns(uint128) {\\r\\n    uint r = 0x80000000000000000000000000000000;\\r\\n    if(x & 0x1000000000000000000000000000000 > 0) r = r * 0xb504f333f9de6484597d89b3754abe9f >> 127;\\r\\n    if(x & 0x800000000000000000000000000000 > 0) r = r * 0x9837f0518db8a96f46ad23182e42f6f6 >> 127;\\r\\n    if(x & 0x400000000000000000000000000000 > 0) r = r * 0x8b95c1e3ea8bd6e6fbe4628758a53c90 >> 127;\\r\\n    if(x & 0x200000000000000000000000000000 > 0) r = r * 0x85aac367cc487b14c5c95b8c2154c1b2 >> 127;\\r\\n    if(x & 0x100000000000000000000000000000 > 0) r = r * 0x82cd8698ac2ba1d73e2a475b46520bff >> 127;\\r\\n    if(x & 0x80000000000000000000000000000 > 0) r = r * 0x8164d1f3bc0307737be56527bd14def4 >> 127;\\r\\n    if(x & 0x40000000000000000000000000000 > 0) r = r * 0x80b1ed4fd999ab6c25335719b6e6fd20 >> 127;\\r\\n    if(x & 0x20000000000000000000000000000 > 0) r = r * 0x8058d7d2d5e5f6b094d589f608ee4aa2 >> 127;\\r\\n    if(x & 0x10000000000000000000000000000 > 0) r = r * 0x802c6436d0e04f50ff8ce94a6797b3ce >> 127;\\r\\n    if(x & 0x8000000000000000000000000000 > 0) r = r * 0x8016302f174676283690dfe44d11d008 >> 127;\\r\\n    if(x & 0x4000000000000000000000000000 > 0) r = r * 0x800b179c82028fd0945e54e2ae18f2f0 >> 127;\\r\\n    if(x & 0x2000000000000000000000000000 > 0) r = r * 0x80058baf7fee3b5d1c718b38e549cb93 >> 127;\\r\\n    if(x & 0x1000000000000000000000000000 > 0) r = r * 0x8002c5d00fdcfcb6b6566a58c048be1f >> 127;\\r\\n    if(x & 0x800000000000000000000000000 > 0) r = r * 0x800162e61bed4a48e84c2e1a463473d9 >> 127;\\r\\n    if(x & 0x400000000000000000000000000 > 0) r = r * 0x8000b17292f702a3aa22beacca949013 >> 127;\\r\\n    if(x & 0x200000000000000000000000000 > 0) r = r * 0x800058b92abbae02030c5fa5256f41fe >> 127;\\r\\n    if(x & 0x100000000000000000000000000 > 0) r = r * 0x80002c5c8dade4d71776c0f4dbea67d6 >> 127;\\r\\n    if(x & 0x80000000000000000000000000 > 0) r = r * 0x8000162e44eaf636526be456600bdbe4 >> 127;\\r\\n    if(x & 0x40000000000000000000000000 > 0) r = r * 0x80000b1721fa7c188307016c1cd4e8b6 >> 127;\\r\\n    if(x & 0x20000000000000000000000000 > 0) r = r * 0x8000058b90de7e4cecfc487503488bb1 >> 127;\\r\\n    if(x & 0x10000000000000000000000000 > 0) r = r * 0x800002c5c8678f36cbfce50a6de60b14 >> 127;\\r\\n    if(x & 0x8000000000000000000000000 > 0) r = r * 0x80000162e431db9f80b2347b5d62e516 >> 127;\\r\\n    if(x & 0x4000000000000000000000000 > 0) r = r * 0x800000b1721872d0c7b08cf1e0114152 >> 127;\\r\\n    if(x & 0x2000000000000000000000000 > 0) r = r * 0x80000058b90c1aa8a5c3736cb77e8dff >> 127;\\r\\n    if(x & 0x1000000000000000000000000 > 0) r = r * 0x8000002c5c8605a4635f2efc2362d978 >> 127;\\r\\n    if(x & 0x800000000000000000000000 > 0) r = r * 0x800000162e4300e635cf4a109e3939bd >> 127;\\r\\n    if(x & 0x400000000000000000000000 > 0) r = r * 0x8000000b17217ff81bef9c551590cf83 >> 127;\\r\\n    if(x & 0x200000000000000000000000 > 0) r = r * 0x800000058b90bfdd4e39cd52c0cfa27c >> 127;\\r\\n    if(x & 0x100000000000000000000000 > 0) r = r * 0x80000002c5c85fe6f72d669e0e76e411 >> 127;\\r\\n    if(x & 0x80000000000000000000000 > 0) r = r * 0x8000000162e42ff18f9ad35186d0df28 >> 127;\\r\\n    if(x & 0x40000000000000000000000 > 0) r = r * 0x80000000b17217f84cce71aa0dcfffe7 >> 127;\\r\\n    if(x & 0x20000000000000000000000 > 0) r = r * 0x8000000058b90bfc07a77ad56ed22aaa >> 127;\\r\\n    if(x & 0x10000000000000000000000 > 0) r = r * 0x800000002c5c85fdfc23cdead40da8d6 >> 127;\\r\\n    if(x & 0x8000000000000000000000 > 0) r = r * 0x80000000162e42fefc25eb1571853a66 >> 127;\\r\\n    if(x & 0x4000000000000000000000 > 0) r = r * 0x800000000b17217f7d97f692baacded5 >> 127;\\r\\n    if(x & 0x2000000000000000000000 > 0) r = r * 0x80000000058b90bfbead3b8b5dd254d7 >> 127;\\r\\n    if(x & 0x1000000000000000000000 > 0) r = r * 0x8000000002c5c85fdf4eedd62f084e67 >> 127;\\r\\n    if(x & 0x800000000000000000000 > 0) r = r * 0x800000000162e42fefa58aef378bf586 >> 127;\\r\\n    if(x & 0x400000000000000000000 > 0) r = r * 0x8000000000b17217f7d24a78a3c7ef02 >> 127;\\r\\n    if(x & 0x200000000000000000000 > 0) r = r * 0x800000000058b90bfbe9067c93e474a6 >> 127;\\r\\n    if(x & 0x100000000000000000000 > 0) r = r * 0x80000000002c5c85fdf47b8e5a72599f >> 127;\\r\\n    if(x & 0x80000000000000000000 > 0) r = r * 0x8000000000162e42fefa3bdb315934a2 >> 127;\\r\\n    if(x & 0x40000000000000000000 > 0) r = r * 0x80000000000b17217f7d1d7299b49c46 >> 127;\\r\\n    if(x & 0x20000000000000000000 > 0) r = r * 0x8000000000058b90bfbe8e9a8d1c4ea0 >> 127;\\r\\n    if(x & 0x10000000000000000000 > 0) r = r * 0x800000000002c5c85fdf4745969ea76f >> 127;\\r\\n    if(x & 0x8000000000000000000 > 0) r = r * 0x80000000000162e42fefa3a0df5373bf >> 127;\\r\\n    if(x & 0x4000000000000000000 > 0) r = r * 0x800000000000b17217f7d1cff4aac1e1 >> 127;\\r\\n    if(x & 0x2000000000000000000 > 0) r = r * 0x80000000000058b90bfbe8e7db95a2f1 >> 127;\\r\\n    if(x & 0x1000000000000000000 > 0) r = r * 0x8000000000002c5c85fdf473e61ae1f8 >> 127;\\r\\n    if(x & 0x800000000000000000 > 0) r = r * 0x800000000000162e42fefa39f121751c >> 127;\\r\\n    if(x & 0x400000000000000000 > 0) r = r * 0x8000000000000b17217f7d1cf815bb96 >> 127;\\r\\n    if(x & 0x200000000000000000 > 0) r = r * 0x800000000000058b90bfbe8e7bec1e0d >> 127;\\r\\n    if(x & 0x100000000000000000 > 0) r = r * 0x80000000000002c5c85fdf473dee5f17 >> 127;\\r\\n    if(x & 0x80000000000000000 > 0) r = r * 0x8000000000000162e42fefa39ef5438f >> 127;\\r\\n    if(x & 0x40000000000000000 > 0) r = r * 0x80000000000000b17217f7d1cf7a26c8 >> 127;\\r\\n    if(x & 0x20000000000000000 > 0) r = r * 0x8000000000000058b90bfbe8e7bcf4a4 >> 127;\\r\\n    if(x & 0x10000000000000000 > 0) r = r * 0x800000000000002c5c85fdf473de72a2 >> 127; /*\\r\\n    if(x & 0x8000000000000000 > 0) r = r * 0x80000000000000162e42fefa39ef3765 >> 127;\\r\\n    if(x & 0x4000000000000000 > 0) r = r * 0x800000000000000b17217f7d1cf79b37 >> 127;\\r\\n    if(x & 0x2000000000000000 > 0) r = r * 0x80000000000000058b90bfbe8e7bcd7d >> 127;\\r\\n    if(x & 0x1000000000000000 > 0) r = r * 0x8000000000000002c5c85fdf473de6b6 >> 127;\\r\\n    if(x & 0x800000000000000 > 0) r = r * 0x800000000000000162e42fefa39ef359 >> 127;\\r\\n    if(x & 0x400000000000000 > 0) r = r * 0x8000000000000000b17217f7d1cf79ac >> 127;\\r\\n    if(x & 0x200000000000000 > 0) r = r * 0x800000000000000058b90bfbe8e7bcd6 >> 127;\\r\\n    if(x & 0x100000000000000 > 0) r = r * 0x80000000000000002c5c85fdf473de6a >> 127;\\r\\n    if(x & 0x80000000000000 > 0) r = r * 0x8000000000000000162e42fefa39ef35 >> 127;\\r\\n    if(x & 0x40000000000000 > 0) r = r * 0x80000000000000000b17217f7d1cf79a >> 127;\\r\\n    if(x & 0x20000000000000 > 0) r = r * 0x8000000000000000058b90bfbe8e7bcd >> 127;\\r\\n    if(x & 0x10000000000000 > 0) r = r * 0x800000000000000002c5c85fdf473de6 >> 127;\\r\\n    if(x & 0x8000000000000 > 0) r = r * 0x80000000000000000162e42fefa39ef3 >> 127;\\r\\n    if(x & 0x4000000000000 > 0) r = r * 0x800000000000000000b17217f7d1cf79 >> 127;\\r\\n    if(x & 0x2000000000000 > 0) r = r * 0x80000000000000000058b90bfbe8e7bc >> 127;\\r\\n    if(x & 0x1000000000000 > 0) r = r * 0x8000000000000000002c5c85fdf473de >> 127;\\r\\n    if(x & 0x800000000000 > 0) r = r * 0x800000000000000000162e42fefa39ef >> 127;\\r\\n    if(x & 0x400000000000 > 0) r = r * 0x8000000000000000000b17217f7d1cf7 >> 127;\\r\\n    if(x & 0x200000000000 > 0) r = r * 0x800000000000000000058b90bfbe8e7b >> 127;\\r\\n    if(x & 0x100000000000 > 0) r = r * 0x80000000000000000002c5c85fdf473d >> 127;\\r\\n    if(x & 0x80000000000 > 0) r = r * 0x8000000000000000000162e42fefa39e >> 127;\\r\\n    if(x & 0x40000000000 > 0) r = r * 0x80000000000000000000b17217f7d1cf >> 127;\\r\\n    if(x & 0x20000000000 > 0) r = r * 0x8000000000000000000058b90bfbe8e7 >> 127;\\r\\n    if(x & 0x10000000000 > 0) r = r * 0x800000000000000000002c5c85fdf473 >> 127;\\r\\n    if(x & 0x8000000000 > 0) r = r * 0x80000000000000000000162e42fefa39 >> 127;\\r\\n    if(x & 0x4000000000 > 0) r = r * 0x800000000000000000000b17217f7d1c >> 127;\\r\\n    if(x & 0x2000000000 > 0) r = r * 0x80000000000000000000058b90bfbe8e >> 127;\\r\\n    if(x & 0x1000000000 > 0) r = r * 0x8000000000000000000002c5c85fdf47 >> 127;\\r\\n    if(x & 0x800000000 > 0) r = r * 0x800000000000000000000162e42fefa3 >> 127;\\r\\n    if(x & 0x400000000 > 0) r = r * 0x8000000000000000000000b17217f7d1 >> 127;\\r\\n    if(x & 0x200000000 > 0) r = r * 0x800000000000000000000058b90bfbe8 >> 127;\\r\\n    if(x & 0x100000000 > 0) r = r * 0x80000000000000000000002c5c85fdf4 >> 127;\\r\\n    if(x & 0x80000000 > 0) r = r * 0x8000000000000000000000162e42fefa >> 127;\\r\\n    if(x & 0x40000000 > 0) r = r * 0x80000000000000000000000b17217f7d >> 127;\\r\\n    if(x & 0x20000000 > 0) r = r * 0x8000000000000000000000058b90bfbe >> 127;\\r\\n    if(x & 0x10000000 > 0) r = r * 0x800000000000000000000002c5c85fdf >> 127;\\r\\n    if(x & 0x8000000 > 0) r = r * 0x80000000000000000000000162e42fef >> 127;\\r\\n    if(x & 0x4000000 > 0) r = r * 0x800000000000000000000000b17217f7 >> 127;\\r\\n    if(x & 0x2000000 > 0) r = r * 0x80000000000000000000000058b90bfb >> 127;\\r\\n    if(x & 0x1000000 > 0) r = r * 0x8000000000000000000000002c5c85fd >> 127;\\r\\n    if(x & 0x800000 > 0) r = r * 0x800000000000000000000000162e42fe >> 127;\\r\\n    if(x & 0x400000 > 0) r = r * 0x8000000000000000000000000b17217f >> 127;\\r\\n    if(x & 0x200000 > 0) r = r * 0x800000000000000000000000058b90bf >> 127;\\r\\n    if(x & 0x100000 > 0) r = r * 0x80000000000000000000000002c5c85f >> 127;\\r\\n    if(x & 0x80000 > 0) r = r * 0x8000000000000000000000000162e42f >> 127;\\r\\n    if(x & 0x40000 > 0) r = r * 0x80000000000000000000000000b17217 >> 127;\\r\\n    if(x & 0x20000 > 0) r = r * 0x8000000000000000000000000058b90b >> 127;\\r\\n    if(x & 0x10000 > 0) r = r * 0x800000000000000000000000002c5c85 >> 127;\\r\\n    if(x & 0x8000 > 0) r = r * 0x80000000000000000000000000162e42 >> 127;\\r\\n    if(x & 0x4000 > 0) r = r * 0x800000000000000000000000000b1721 >> 127;\\r\\n    if(x & 0x2000 > 0) r = r * 0x80000000000000000000000000058b90 >> 127;\\r\\n    if(x & 0x1000 > 0) r = r * 0x8000000000000000000000000002c5c8 >> 127;\\r\\n    if(x & 0x800 > 0) r = r * 0x800000000000000000000000000162e4 >> 127;\\r\\n    if(x & 0x400 > 0) r = r * 0x8000000000000000000000000000b172 >> 127;\\r\\n    if(x & 0x200 > 0) r = r * 0x800000000000000000000000000058b9 >> 127;\\r\\n    if(x & 0x100 > 0) r = r * 0x80000000000000000000000000002c5c >> 127;\\r\\n    if(x & 0x80 > 0) r = r * 0x8000000000000000000000000000162e >> 127;\\r\\n    if(x & 0x40 > 0) r = r * 0x80000000000000000000000000000b17 >> 127;\\r\\n    if(x & 0x20 > 0) r = r * 0x8000000000000000000000000000058b >> 127;\\r\\n    if(x & 0x10 > 0) r = r * 0x800000000000000000000000000002c5 >> 127;\\r\\n    if(x & 0x8 > 0) r = r * 0x80000000000000000000000000000162 >> 127;\\r\\n    if(x & 0x4 > 0) r = r * 0x800000000000000000000000000000b1 >> 127;\\r\\n    if(x & 0x2 > 0) r = r * 0x80000000000000000000000000000058 >> 127;\\r\\n    if(x & 0x1 > 0) r = r * 0x8000000000000000000000000000002c >> 127; */\\r\\n\\r\\n    r >>= 127 -(x >> 121);\\r\\n\\r\\n    return uint128(r);\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Ethereum smart contract library implementing Yield Math model.\\r\\n */\\r\\nlibrary YieldMath {\\r\\n  using Math64x64 for int128;\\r\\n  using Math64x64 for uint128;\\r\\n  using Math64x64 for int256;\\r\\n  using Math64x64 for uint256;\\r\\n  using Exp64x64 for uint128;\\r\\n\\r\\n  uint128 public constant ONE = 0x10000000000000000; // In 64.64\\r\\n  uint256 public constant MAX = type(uint128).max;   // Used for overflow checks\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of fyDai a user would get for given amount of Dai.\\r\\n   * https://www.desmos.com/calculator/5nf2xuy6yb\\r\\n   * @param daiReserves dai reserves amount\\r\\n   * @param fyDaiReserves fyDai reserves amount\\r\\n   * @param daiAmount dai amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param k time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of fyDai a user would get for given amount of Dai\\r\\n   */\\r\\n  function fyDaiOutForDaiIn(\\r\\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 daiAmount,\\r\\n    uint128 timeTillMaturity, int128 k, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    uint128 a = _computeA(timeTillMaturity, k, g);\\r\\n\\r\\n    // za = daiReserves ** a\\r\\n    uint256 za = daiReserves.pow(a, ONE);\\r\\n\\r\\n    // ya = fyDaiReserves ** a\\r\\n    uint256 ya = fyDaiReserves.pow(a, ONE);\\r\\n\\r\\n    // zx = daiReserves + daiAmount\\r\\n    uint256 zx = uint256(daiReserves) + uint256(daiAmount);\\r\\n    require(zx <= MAX, \\\"YieldMath: Too much dai in\\\");\\r\\n\\r\\n    // zxa = zx ** a\\r\\n    uint256 zxa = uint128(zx).pow(a, ONE);\\r\\n\\r\\n    // sum = za + ya - zxa\\r\\n    uint256 sum = za + ya - zxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n    require(sum <= MAX, \\\"YieldMath: Insufficient fyDai reserves\\\");\\r\\n\\r\\n    // result = fyDaiReserves - (sum ** (1/a))\\r\\n    uint256 result = uint256(fyDaiReserves) - uint256(uint128(sum).pow(ONE, a));\\r\\n    require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n    result = result > 1e12 ? result - 1e12 : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n    return uint128(result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of dai a user would get for certain amount of fyDai.\\r\\n   * https://www.desmos.com/calculator/6jlrre7ybt\\r\\n   * @param daiReserves dai reserves amount\\r\\n   * @param fyDaiReserves fyDai reserves amount\\r\\n   * @param fyDaiAmount fyDai amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param k time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of Dai a user would get for given amount of fyDai\\r\\n   */\\r\\n  function daiOutForFYDaiIn(\\r\\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 fyDaiAmount,\\r\\n    uint128 timeTillMaturity, int128 k, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    uint128 a = _computeA(timeTillMaturity, k, g);\\r\\n\\r\\n    // za = daiReserves ** a\\r\\n    uint256 za = daiReserves.pow(a, ONE);\\r\\n\\r\\n    // ya = fyDaiReserves ** a\\r\\n    uint256 ya = fyDaiReserves.pow(a, ONE);\\r\\n\\r\\n    // yx = fyDayReserves + fyDaiAmount\\r\\n    uint256 yx = uint256(fyDaiReserves) + uint256(fyDaiAmount);\\r\\n    require(yx <= MAX, \\\"YieldMath: Too much fyDai in\\\");\\r\\n\\r\\n    // yxa = yx ** a\\r\\n    uint256 yxa = uint128(yx).pow(a, ONE);\\r\\n\\r\\n    // sum = za + ya - yxa\\r\\n    uint256 sum = za + ya - yxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n    require(sum <= MAX, \\\"YieldMath: Insufficient dai reserves\\\");\\r\\n\\r\\n    // result = daiReserves - (sum ** (1/a))\\r\\n    uint256 result = uint256(daiReserves) - uint256(uint128(sum).pow(ONE, a));\\r\\n    require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n    result = result > 1e12 ? result - 1e12 : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n    return uint128(result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of fyDai a user could sell for given amount of Dai.\\r\\n   * https://www.desmos.com/calculator/0rgnmtckvy\\r\\n   * @param daiReserves dai reserves amount\\r\\n   * @param fyDaiReserves fyDai reserves amount\\r\\n   * @param daiAmount Dai amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param k time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of fyDai a user could sell for given amount of Dai\\r\\n   */\\r\\n  function fyDaiInForDaiOut(\\r\\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 daiAmount,\\r\\n    uint128 timeTillMaturity, int128 k, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    uint128 a = _computeA(timeTillMaturity, k, g);\\r\\n\\r\\n    // za = daiReserves ** a\\r\\n    uint256 za = daiReserves.pow(a, ONE);\\r\\n\\r\\n    // ya = fyDaiReserves ** a\\r\\n    uint256 ya = fyDaiReserves.pow(a, ONE);\\r\\n\\r\\n    // zx = daiReserves - daiAmount\\r\\n    uint256 zx = uint256(daiReserves) - uint256(daiAmount);\\r\\n    require(zx <= MAX, \\\"YieldMath: Too much dai out\\\");\\r\\n\\r\\n    // zxa = zx ** a\\r\\n    uint256 zxa = uint128(zx).pow(a, ONE);\\r\\n\\r\\n    // sum = za + ya - zxa\\r\\n    uint256 sum = za + ya - zxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n    require(sum <= MAX, \\\"YieldMath: Resulting fyDai reserves too high\\\");\\r\\n\\r\\n    // result = (sum ** (1/a)) - fyDaiReserves\\r\\n    uint256 result = uint256(uint128(sum).pow(ONE, a)) - uint256(fyDaiReserves);\\r\\n    require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n    result = result < MAX - 1e12 ? result + 1e12 : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n    return uint128(result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate the amount of dai a user would have to pay for certain amount of fyDai.\\r\\n   * https://www.desmos.com/calculator/ws5oqj8x5i\\r\\n   * @param daiReserves Dai reserves amount\\r\\n   * @param fyDaiReserves fyDai reserves amount\\r\\n   * @param fyDaiAmount fyDai amount to be traded\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param k time till maturity coefficient, multiplied by 2^64\\r\\n   * @param g fee coefficient, multiplied by 2^64\\r\\n   * @return the amount of dai a user would have to pay for given amount of\\r\\n   *         fyDai\\r\\n   */\\r\\n  function daiInForFYDaiOut(\\r\\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 fyDaiAmount,\\r\\n    uint128 timeTillMaturity, int128 k, int128 g)\\r\\n  public pure returns(uint128) {\\r\\n    uint128 a = _computeA(timeTillMaturity, k, g);\\r\\n\\r\\n    // za = daiReserves ** a\\r\\n    uint256 za = daiReserves.pow(a, ONE);\\r\\n\\r\\n    // ya = fyDaiReserves ** a\\r\\n    uint256 ya = fyDaiReserves.pow(a, ONE);\\r\\n\\r\\n    // yx = daiReserves - daiAmount\\r\\n    uint256 yx = uint256(fyDaiReserves) - uint256(fyDaiAmount);\\r\\n    require(yx <= MAX, \\\"YieldMath: Too much fyDai out\\\");\\r\\n\\r\\n    // yxa = yx ** a\\r\\n    uint256 yxa = uint128(yx).pow(a, ONE);\\r\\n\\r\\n    // sum = za + ya - yxa\\r\\n    uint256 sum = za + ya - yxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n    require(sum <= MAX, \\\"YieldMath: Resulting dai reserves too high\\\");\\r\\n\\r\\n    // result = (sum ** (1/a)) - daiReserves\\r\\n    uint256 result = uint256(uint128(sum).pow(ONE, a)) - uint256(daiReserves);\\r\\n    require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n    result = result < MAX - 1e12 ? result + 1e12 : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n    return uint128(result);\\r\\n  }\\r\\n\\r\\n  function _computeA(uint128 timeTillMaturity, int128 k, int128 g) private pure returns (uint128) {\\r\\n    // t = k * timeTillMaturity\\r\\n    int128 t = k.mul(timeTillMaturity.fromUInt());\\r\\n    require(t >= 0, \\\"YieldMath: t must be positive\\\"); // Meaning neither T or k can be negative\\r\\n\\r\\n    // a = (1 - gt)\\r\\n    int128 a = int128(ONE).sub(g.mul(t));\\r\\n    require(a > 0, \\\"YieldMath: Too far from maturity\\\");\\r\\n    require(a <= int128(ONE), \\\"YieldMath: g must be positive\\\");\\r\\n\\r\\n    return uint128(a);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Estimate in Dai the value of reserves at protocol initialization time.\\r\\n   *\\r\\n   * @param daiReserves dai reserves amount\\r\\n   * @param fyDaiReserves fyDai reserves amount\\r\\n   * @param timeTillMaturity time till maturity in seconds\\r\\n   * @param k time till maturity coefficient, multiplied by 2^64\\r\\n   * @param c0 price of dai in terms of Dai, multiplied by 2^64\\r\\n   * @return estimated value of reserves\\r\\n   */\\r\\n  function initialReservesValue(\\r\\n    uint128 daiReserves, uint128 fyDaiReserves, uint128 timeTillMaturity,\\r\\n    int128 k, int128 c0)\\r\\n  external pure returns(uint128) {\\r\\n    uint256 normalizedDaiReserves = c0.mulu(daiReserves);\\r\\n    require(normalizedDaiReserves <= MAX);\\r\\n\\r\\n    // a = (1 - k * timeTillMaturity)\\r\\n    int128 a = int128(ONE).sub(k.mul(timeTillMaturity.fromUInt()));\\r\\n    require(a > 0);\\r\\n\\r\\n    uint256 sum =\\r\\n      uint256(uint128(normalizedDaiReserves).pow(uint128(a), ONE)) +\\r\\n      uint256(fyDaiReserves.pow(uint128(a), ONE)) >> 1;\\r\\n    require(sum <= MAX);\\r\\n\\r\\n    uint256 result = uint256(uint128(sum).pow(ONE, uint128(a))) << 1;\\r\\n    require(result <= MAX);\\r\\n\\r\\n    return uint128(result);\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x0b618f1fab9e33cd0fdc0383170c39a5174c7aa233b4c339b6589116638712d7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/helpers/Delegable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.5;\\n\\nimport \\\"../interfaces/IDelegable.sol\\\";\\n\\n\\n/// @dev Delegable enables users to delegate their account management to other users.\\n/// Delegable implements addDelegateBySignature, to add delegates using a signature instead of a separate transaction.\\ncontract Delegable is IDelegable {\\n    event Delegate(address indexed user, address indexed delegate, bool enabled);\\n\\n    // keccak256(\\\"Signature(address user,address delegate,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public immutable SIGNATURE_TYPEHASH = 0x0d077601844dd17f704bafff948229d27f33b57445915754dfe3d095fda2beb7;\\n    bytes32 public immutable DELEGABLE_DOMAIN;\\n    mapping(address => uint) public signatureCount;\\n\\n    mapping(address => mapping(address => bool)) public delegated;\\n\\n    constructor () public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        DELEGABLE_DOMAIN = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes('Yield')),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @dev Require that msg.sender is the account holder or a delegate\\n    modifier onlyHolderOrDelegate(address holder, string memory errorMessage) {\\n        require(\\n            msg.sender == holder || delegated[holder][msg.sender],\\n            errorMessage\\n        );\\n        _;\\n    }\\n\\n    /// @dev Enable a delegate to act on the behalf of caller\\n    function addDelegate(address delegate) public override {\\n        _addDelegate(msg.sender, delegate);\\n    }\\n\\n    /// @dev Stop a delegate from acting on the behalf of caller\\n    function revokeDelegate(address delegate) public {\\n        _revokeDelegate(msg.sender, delegate);\\n    }\\n\\n    /// @dev Add a delegate through an encoded signature\\n    function addDelegateBySignature(address user, address delegate, uint deadline, uint8 v, bytes32 r, bytes32 s) public override {\\n        require(deadline >= block.timestamp, 'Delegable: Signature expired');\\n\\n        bytes32 hashStruct = keccak256(\\n            abi.encode(\\n                SIGNATURE_TYPEHASH,\\n                user,\\n                delegate,\\n                signatureCount[user]++,\\n                deadline\\n            )\\n        );\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DELEGABLE_DOMAIN,\\n                hashStruct\\n            )\\n        );\\n        address signer = ecrecover(digest, v, r, s);\\n        require(\\n            signer != address(0) && signer == user,\\n            'Delegable: Invalid signature'\\n        );\\n\\n        _addDelegate(user, delegate);\\n    }\\n\\n    /// @dev Enable a delegate to act on the behalf of an user\\n    function _addDelegate(address user, address delegate) internal {\\n        require(!delegated[user][delegate], \\\"Delegable: Already delegated\\\");\\n        delegated[user][delegate] = true;\\n        emit Delegate(user, delegate, true);\\n    }\\n\\n    /// @dev Stop a delegate from acting on the behalf of an user\\n    function _revokeDelegate(address user, address delegate) internal {\\n        require(delegated[user][delegate], \\\"Delegable: Already undelegated\\\");\\n        delegated[user][delegate] = false;\\n        emit Delegate(user, delegate, false);\\n    }\\n}\\n\",\"keccak256\":\"0x33e7861cff3e218ea9c89026c2fd5cc7cdfd8ff904564ab175ae2a4f006a0572\",\"license\":\"GPL-3.0-or-later\"},\"contracts/helpers/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/53516bc555a454862470e7860a9b5254db4d00f5/contracts/token/ERC20/ERC20Permit.sol\\npragma solidity ^0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/IERC2612.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to use their tokens\\n * without sending any transactions by setting {IERC20-allowance} with a\\n * signature using the {permit} method, and then spend them via\\n * {IERC20-transferFrom}.\\n *\\n * The {permit} signature mechanism conforms to the {IERC2612} interface.\\n */\\nabstract contract ERC20Permit is ERC20, IERC2612 {\\n    mapping (address => uint256) public override nonces;\\n\\n    bytes32 public immutable PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n    constructor(string memory name_, string memory symbol_) internal ERC20(name_, symbol_) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name_)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev See {IERC2612-permit}.\\n     *\\n     * In cases where the free option is not a concern, deadline can simply be\\n     * set to uint(-1), so it should be seen as an optional parameter\\n     */\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\\n        require(deadline >= block.timestamp, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 hashStruct = keccak256(\\n            abi.encode(\\n                PERMIT_TYPEHASH,\\n                owner,\\n                spender,\\n                amount,\\n                nonces[owner]++,\\n                deadline\\n            )\\n        );\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                hashStruct\\n            )\\n        );\\n\\n        address signer = ecrecover(hash, v, r, s);\\n        require(\\n            signer != address(0) && signer == owner,\\n            \\\"ERC20Permit: invalid signature\\\"\\n        );\\n\\n        _approve(owner, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x499f33fe5214ff6aa995eedb2322c87d54e5478d42bd276413374affe18eb490\",\"license\":\"GPL-3.0-or-later\"},\"contracts/helpers/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.5;\\n\\n\\nlibrary SafeCast {\\n    /// @dev Safe casting from uint256 to uint128\\n    function toUint128(uint256 x) internal pure returns(uint128) {\\n        require(\\n            x <= type(uint128).max,\\n            \\\"SafeCast: Cast overflow\\\"\\n        );\\n        return uint128(x);\\n    }\\n\\n    /// @dev Safe casting from uint256 to int256\\n    function toInt256(uint256 x) internal pure returns(int256) {\\n        require(\\n            x <= uint256(type(int256).max),\\n            \\\"SafeCast: Cast overflow\\\"\\n        );\\n        return int256(x);\\n    }\\n}\",\"keccak256\":\"0x2a224ffb81e93e75c02a9a522046d34f9dc09cd8580b3fd13bee7d36f30ca421\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IDelegable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.5;\\n\\n\\ninterface IDelegable {\\n    function addDelegate(address) external;\\n    function addDelegateBySignature(address, address, uint, uint8, bytes32, bytes32) external;\\n}\\n\",\"keccak256\":\"0x9d08c0994fb334d6d325ddb15fafd3c557cb44f849528a39c3bed4f69e6f4b17\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\npragma solidity ^0.7.5;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdab698d1302eca2323a90cb1de6f727a0df721708ee89eddfc9e5427debfc305\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFYDai.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IERC2612.sol\\\";\\n\\ninterface IFYDai is IERC20, IERC2612 {\\n    function isMature() external view returns(bool);\\n    function maturity() external view returns(uint);\\n    function chi0() external view returns(uint);\\n    function rate0() external view returns(uint);\\n    function chiGrowth() external view returns(uint);\\n    function rateGrowth() external view returns(uint);\\n    function mature() external;\\n    function unlocked() external view returns (uint);\\n    function mint(address, uint) external;\\n    function burn(address, uint) external;\\n    function flashMint(uint, bytes calldata) external;\\n    function redeem(address, address, uint256) external returns (uint256);\\n    // function transfer(address, uint) external returns (bool);\\n    // function transferFrom(address, address, uint) external returns (bool);\\n    // function approve(address, uint) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc29a94592897bd2eee3536716889c778ae18fe25ad72dae59f4d553469ebd872\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IDelegable.sol\\\";\\nimport \\\"./IERC2612.sol\\\";\\nimport \\\"./IFYDai.sol\\\";\\n\\ninterface IPool is IDelegable, IERC20, IERC2612 {\\n    function dai() external view returns(IERC20);\\n    function fyDai() external view returns(IFYDai);\\n    function getDaiReserves() external view returns(uint128);\\n    function getFYDaiReserves() external view returns(uint128);\\n    function sellDai(address from, address to, uint128 daiIn) external returns(uint128);\\n    function buyDai(address from, address to, uint128 daiOut) external returns(uint128);\\n    function sellFYDai(address from, address to, uint128 fyDaiIn) external returns(uint128);\\n    function buyFYDai(address from, address to, uint128 fyDaiOut) external returns(uint128);\\n    function sellDaiPreview(uint128 daiIn) external view returns(uint128);\\n    function buyDaiPreview(uint128 daiOut) external view returns(uint128);\\n    function sellFYDaiPreview(uint128 fyDaiIn) external view returns(uint128);\\n    function buyFYDaiPreview(uint128 fyDaiOut) external view returns(uint128);\\n    function mint(address from, address to, uint256 daiOffered) external returns (uint256);\\n    function burn(address from, address to, uint256 tokensBurned) external returns (uint256, uint256);\\n}\",\"keccak256\":\"0xfc17f33464369121a7610c54f4bd65e1c8c85fc55b248d3eea758571b31574e8\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6101206040527f0d077601844dd17f704bafff948229d27f33b57445915754dfe3d095fda2beb76080527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960c0523480156200005a57600080fd5b5060405162004dbc38038062004dbc833981810160405260808110156200008057600080fd5b81516020830151604080850180519151939592948301929184640100000000821115620000ac57600080fd5b908301906020820185811115620000c257600080fd5b8251640100000000811182820188101715620000dd57600080fd5b82525081516020918201929091019080838360005b838110156200010c578181015183820152602001620000f2565b50505050905090810190601f1680156200013a5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200015e57600080fd5b9083019060208201858111156200017457600080fd5b82516401000000008111828201881017156200018f57600080fd5b82525081516020918201929091019080838360005b83811015620001be578181015183820152602001620001a4565b50505050905090810190601f168015620001ec5780820380516001836020036101000a031916815260200191505b506040525050508181818181600390805190602001906200020f929190620004dd565b50805162000225906004906020840190620004dd565b506012600560006101000a81548160ff021916908360ff1602179055505050600046905060008051602062004d9c83398151915260405180604001604052806005815260200164165a595b1960da1b81525080519060200120604051806040016040528060018152602001603160f81b81525080519060200120833060405160200180868152602001858152602001848152602001838152602001826001600160a01b03168152602001955050505050506040516020818303038152906040528051906020012060a0818152505050600046905060008051602062004d9c8339815191528380519060200120604051806040016040528060018152602001603160f81b81525080519060200120833060405160200180868152602001858152602001848152602001838152602001826001600160a01b03168152602001955050505050506040516020818303038152906040528051906020012060e0818152505050505083600960006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600a60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200045e600a60009054906101000a90046001600160a01b03166001600160a01b031663204f83f96040518163ffffffff1660e01b815260040160206040518083038186803b1580156200042a57600080fd5b505afa1580156200043f573d6000803e3d6000fd5b505050506040513d60208110156200045657600080fd5b50516200047a565b60801b6001600160801b03191661010052506200057f92505050565b60006001600160801b03821115620004d9576040805162461bcd60e51b815260206004820152601360248201527f506f6f6c3a2043617374206f766572666c6f7700000000000000000000000000604482015290519081900360640190fd5b5090565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928262000515576000855562000560565b82601f106200053057805160ff191683800117855562000560565b8280016001018555821562000560579182015b828111156200056057825182559160200191906001019062000543565b50620004d99291505b80821115620004d9576000815560010162000569565b60805160a05160c05160e0516101005160801c61476c6200063060003980610d6f5280610f5c528061125b52806113da528061148f52806118a25280611bc85280611d0c5280611dcd5280611fe052806120a152806121c852806125505280612a285280612d1452806134cc52806138f3528061415c52806143095250806113425280612e705250806113155280612de85250806110de52806113b452508061105e52806125e3525061476c6000f3fe608060405234801561001057600080fd5b50600436106102de5760003560e01c806385561a3411610186578063c0bd65d7116100e3578063e71bdf4111610097578063f6b911bc11610071578063f6b911bc14610951578063f6bcbd3114610987578063fa352c00146109b5576102de565b8063e71bdf41146108d4578063eab5cd2c146108fa578063f4b9fa7514610949576102de565b8063cc5783d3116100c8578063cc5783d31461080c578063d505accf14610855578063dd62ed3e146108a6576102de565b8063c0bd65d7146107ce578063c6c3bbe6146107d6576102de565b8063a9059cbb1161013a578063b4f40c611161011f578063b4f40c6114610798578063b5d832fe146107a0578063bdd8a366146107c6576102de565b8063a9059cbb14610723578063b26be9221461074f576102de565b806398ba4aec1161016b57806398ba4aec146106995780639ac95875146106c8578063a457c2d7146106f7576102de565b806385561a341461066257806395d89b4114610691576102de565b80633644e5151161023f57806360561e05116101f35780637543e39c116101cd5780637543e39c146105eb57806377d739f3146106345780637ecebe001461063c576102de565b806360561e051461055d5780636970a924146105a657806370a08231146105c5576102de565b8063459e414f11610224578063459e414f1461051e5780634e20e952146105265780635f4d07dc14610555576102de565b80633644e515146104ea57806339509351146104f2576102de565b8063204f83f911610296578063284f44441161027b578063284f4444146104a057806330adf81f146104c4578063313ce567146104cc576102de565b8063204f83f91461043d57806323b872dd1461046a576102de565b806312c63d85116102c757806312c63d85146103a057806318160ddd146103e85780631a28ff05146103f0576102de565b806306fdde03146102e3578063095ea7b314610360575b600080fd5b6102eb6109db565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032557818101518382015260200161030d565b50505050905090810190601f1680156103525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61038c6004803603604081101561037657600080fd5b506001600160a01b038135169060200135610a8f565b604080519115158252519081900360200190f35b6103d6600480360360608110156103b657600080fd5b506001600160a01b03813581169160208101359091169060400135610aad565b60408051918252519081900360200190f35b6103d6610fd9565b61043b600480360360c081101561040657600080fd5b506001600160a01b03813581169160208101359091169060408101359060ff6060820135169060808101359060a00135610fdf565b005b610445611259565b604080516fffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61038c6004803603606081101561048057600080fd5b506001600160a01b0381358116916020810135909116906040013561127d565b6104a8611304565b604080516001600160a01b039092168252519081900360200190f35b6103d6611313565b6104d4611337565b6040805160ff9092168252519081900360200190f35b6103d6611340565b61038c6004803603604081101561050857600080fd5b506001600160a01b038135169060200135611364565b6103d66113b2565b6104456004803603602081101561053c57600080fd5b50356fffffffffffffffffffffffffffffffff166113d6565b610445611591565b6104456004803603606081101561057357600080fd5b5080356001600160a01b0390811691602081013590911690604001356fffffffffffffffffffffffffffffffff1661163c565b6105ae611934565b60408051600f9290920b8252519081900360200190f35b6103d6600480360360208110156105db57600080fd5b50356001600160a01b0316611947565b6104456004803603606081101561060157600080fd5b5080356001600160a01b0390811691602081013590911690604001356fffffffffffffffffffffffffffffffff16611962565b610445611c5a565b6103d66004803603602081101561065257600080fd5b50356001600160a01b0316611cf6565b6104456004803603602081101561067857600080fd5b50356fffffffffffffffffffffffffffffffff16611d08565b6102eb611f5d565b610445600480360360208110156106af57600080fd5b50356fffffffffffffffffffffffffffffffff16611fdc565b610445600480360360208110156106de57600080fd5b50356fffffffffffffffffffffffffffffffff166121c4565b61038c6004803603604081101561070d57600080fd5b506001600160a01b03813516906020013561226e565b61038c6004803603604081101561073957600080fd5b506001600160a01b0381351690602001356122d6565b6104456004803603606081101561076557600080fd5b5080356001600160a01b0390811691602081013590911690604001356fffffffffffffffffffffffffffffffff166122ea565b6105ae6125a8565b6103d6600480360360208110156107b657600080fd5b50356001600160a01b03166125bc565b6105ae6125ce565b6103d66125e1565b6103d6600480360360608110156107ec57600080fd5b506001600160a01b03813581169160208101359091169060400135612605565b6104456004803603606081101561082257600080fd5b5080356001600160a01b0390811691602081013590911690604001356fffffffffffffffffffffffffffffffff16612aae565b61043b600480360360e081101561086b57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135612d69565b6103d6600480360360408110156108bc57600080fd5b506001600160a01b0381358116916020013516612fee565b61043b600480360360208110156108ea57600080fd5b50356001600160a01b0316613019565b6109306004803603606081101561091057600080fd5b506001600160a01b03813581169160208101359091169060400135613026565b6040805192835260208301919091528051918290030190f35b6104a861354b565b6109306004803603606081101561096757600080fd5b506001600160a01b0381358116916020810135909116906040013561355a565b61038c6004803603604081101561099d57600080fd5b506001600160a01b0381358116916020013516613978565b61043b600480360360208110156109cb57600080fd5b50356001600160a01b0316613998565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a855780601f10610a5a57610100808354040283529160200191610a85565b820191906000526020600020905b815481529060010190602001808311610a6857829003601f168201915b5050505050905090565b6000610aa3610a9c6139a2565b84846139a6565b5060015b92915050565b6000836040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b03161480610b2957506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b8190610bb35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b78578181015183820152602001610b60565b50505050905090810190601f168015610ba55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000610bbe610fd9565b600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610c2857600080fd5b505afa158015610c3c573d6000803e3d6000fd5b505050506040513d6020811015610c5257600080fd5b5051600a54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051929350600092839283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015610cc257600080fd5b505afa158015610cd6573d6000803e3d6000fd5b505050506040513d6020811015610cec57600080fd5b50519050610d0485610cfe8b87613a92565b90613af2565b9250610d1485610cfe8b84613a92565b9150610e84905073b8c0D4Ee9380e476F409f496175D9082E6e1E58C63e5cd1e73610d47610d428787613b34565b613b76565b610d60610d52611591565b610d5b87613b76565b613be1565b610d6986613b76565b610da6427f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff1603613b76565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526fffffffffffffffffffffffffffffffff958616600482015293851660248501529184166044840152909216606482015264220c523d72608482015268010d79435e50d7943560a4820152905160c4808301926020929190829003018186803b158015610e3f57600080fd5b505af4158015610e53573d6000803e3d6000fd5b505050506040513d6020811015610e6957600080fd5b505183906fffffffffffffffffffffffffffffffff16613c62565b9150610e908a89613cbc565b600954604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038c81166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015610eff57600080fd5b505af1158015610f13573d6000803e3d6000fd5b505050506040513d6020811015610f2957600080fd5b50506001600160a01b03808a16908b167fd9b421596e3bc3caf78305bc0d270566916f58cd61b71c9c2a3d923a3ea3ea8b7f0000000000000000000000000000000000000000000000000000000000000000610f8486613db8565b6000610f8f8e613db8565b604080516fffffffffffffffffffffffffffffffff90951685526020850193909352838301919091526000036060830152519081900360800190a350945050505b50509392505050565b60025490565b42841015611034576040805162461bcd60e51b815260206004820152601c60248201527f44656c656761626c653a205369676e6174757265206578706972656400000000604482015290519081900360640190fd5b6001600160a01b0380871660008181526006602090815260408083208054600180820190925582517f00000000000000000000000000000000000000000000000000000000000000008186015280840196909652958b166060860152608085019590955260a08085018a90528151808603909101815260c0850182528051908301207f190100000000000000000000000000000000000000000000000000000000000060e08601527f000000000000000000000000000000000000000000000000000000000000000060e286015261010280860182905282518087039091018152610122860180845281519185019190912090859052610142860180845281905260ff8a1661016287015261018286018990526101a2860188905291519095919491926101c28084019391927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa15801561119f573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116158015906111f35750886001600160a01b0316816001600160a01b0316145b611244576040805162461bcd60e51b815260206004820152601c60248201527f44656c656761626c653a20496e76616c6964207369676e617475726500000000604482015290519081900360640190fd5b61124e8989613e2f565b505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061128a848484613f34565b6112fa846112966139a2565b6112f585604051806060016040528060288152602001614680602891396001600160a01b038a166000908152600160205260408120906112d46139a2565b6001600160a01b03168152602081019190915260400160002054919061408f565b6139a6565b5060019392505050565b600a546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610aa36113716139a2565b846112f585600160006113826139a2565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490613c62565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16421061145e576040805162461bcd60e51b815260206004820152600e60248201527f506f6f6c3a20546f6f206c617465000000000000000000000000000000000000604482015290519081900360640190fd5b73b8c0D4Ee9380e476F409f496175D9082E6e1E58C63420df2f4611480611c5a565b611488611591565b856114c6427f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff1603613b76565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526fffffffffffffffffffffffffffffffff958616600482015293851660248501529184166044840152909216606482015264220c523d72608482015268010d79435e50d7943560a4820152905160c4808301926020929190829003018186803b15801561155f57600080fd5b505af4158015611573573d6000803e3d6000fd5b505050506040513d602081101561158957600080fd5b505192915050565b6000611637610d426115a1610fd9565b600a54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561160557600080fd5b505afa158015611619573d6000803e3d6000fd5b505050506040513d602081101561162f57600080fd5b505190613c62565b905090565b6000836040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b031614806116b857506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b81906117055760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b506000611711856121c4565b600a54604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301523060248301526fffffffffffffffffffffffffffffffff8a16604483015291519394509116916323b872dd916064808201926020929091908290030181600087803b15801561179957600080fd5b505af11580156117ad573d6000803e3d6000fd5b505050506040513d60208110156117c357600080fd5b5050600954604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301526fffffffffffffffffffffffffffffffff851660248301529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561184557600080fd5b505af1158015611859573d6000803e3d6000fd5b505050506040513d602081101561186f57600080fd5b50506001600160a01b038087169088167f3f207773c457c66e004ab34e2ce7ae1fcafc7b4c3286f63997c87428014219157f00000000000000000000000000000000000000000000000000000000000000006118dc6fffffffffffffffffffffffffffffffff8616613db8565b6118f78a6fffffffffffffffffffffffffffffffff16613db8565b604080516fffffffffffffffffffffffffffffffff9094168452602084019290925260000382820152519081900360600190a39695505050505050565b6103b66903e800000000000000005b0481565b6001600160a01b031660009081526020819052604090205490565b6000836040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b031614806119de57506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b8190611a2b5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b506000611a3785611fdc565b600954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301523060248301526fffffffffffffffffffffffffffffffff8516604483015291519394509116916323b872dd916064808201926020929091908290030181600087803b158015611abf57600080fd5b505af1158015611ad3573d6000803e3d6000fd5b505050506040513d6020811015611ae957600080fd5b5050600a54604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301526fffffffffffffffffffffffffffffffff891660248301529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015611b6b57600080fd5b505af1158015611b7f573d6000803e3d6000fd5b505050506040513d6020811015611b9557600080fd5b50506001600160a01b038087169088167f3f207773c457c66e004ab34e2ce7ae1fcafc7b4c3286f63997c87428014219157f0000000000000000000000000000000000000000000000000000000000000000611c026fffffffffffffffffffffffffffffffff8616613db8565b600003611c208a6fffffffffffffffffffffffffffffffff16613db8565b604080516fffffffffffffffffffffffffffffffff9094168452602084019290925282820152519081900360600190a39695505050505050565b600954604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092611637926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015611cc557600080fd5b505afa158015611cd9573d6000803e3d6000fd5b505050506040513d6020811015611cef57600080fd5b5051613b76565b60086020526000908152604090205481565b60007f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff164210611d90576040805162461bcd60e51b815260206004820152600e60248201527f506f6f6c3a20546f6f206c617465000000000000000000000000000000000000604482015290519081900360640190fd5b6000611d9a611c5a565b90506000611da6611591565b9050600073b8c0D4Ee9380e476F409f496175D9082E6e1E58C631d385c1f848488611e04427f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff1603613b76565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526fffffffffffffffffffffffffffffffff958616600482015293851660248501529184166044840152909216606482015264220c523d72608482015267f33333333333333360a4820152905160c4808301926020929190829003018186803b158015611e9c57600080fd5b505af4158015611eb0573d6000803e3d6000fd5b505050506040513d6020811015611ec657600080fd5b50519050611ed483866140e9565b6fffffffffffffffffffffffffffffffff16611ef08383613be1565b6fffffffffffffffffffffffffffffffff161015611f55576040805162461bcd60e51b815260206004820152601c60248201527f506f6f6c3a20667944616920726573657276657320746f6f206c6f7700000000604482015290519081900360640190fd5b949350505050565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a855780601f10610a5a57610100808354040283529160200191610a85565b60007f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff164210612064576040805162461bcd60e51b815260206004820152600e60248201527f506f6f6c3a20546f6f206c617465000000000000000000000000000000000000604482015290519081900360640190fd5b600061206e611c5a565b9050600061207a611591565b9050600073b8c0D4Ee9380e476F409f496175D9082E6e1E58C63d536aadd8484886120d8427f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff1603613b76565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526fffffffffffffffffffffffffffffffff958616600482015293851660248501529184166044840152909216606482015264220c523d72608482015267f33333333333333360a4820152905160c4808301926020929190829003018186803b15801561217057600080fd5b505af4158015612184573d6000803e3d6000fd5b505050506040513d602081101561219a57600080fd5b505190506121a883826140e9565b6fffffffffffffffffffffffffffffffff16611ef08387613be1565b60007f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16421061224c576040805162461bcd60e51b815260206004820152600e60248201527f506f6f6c3a20546f6f206c617465000000000000000000000000000000000000604482015290519081900360640190fd5b73b8c0D4Ee9380e476F409f496175D9082E6e1E58C63e5cd1e73611480611c5a565b6000610aa361227b6139a2565b846112f58560405180606001604052806025815260200161471260259139600160006122a56139a2565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919061408f565b6000610aa36122e36139a2565b8484613f34565b6000836040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b0316148061236657506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b81906123b35760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b5060006123bf85611d08565b600954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301523060248301526fffffffffffffffffffffffffffffffff8a16604483015291519394509116916323b872dd916064808201926020929091908290030181600087803b15801561244757600080fd5b505af115801561245b573d6000803e3d6000fd5b505050506040513d602081101561247157600080fd5b5050600a54604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301526fffffffffffffffffffffffffffffffff851660248301529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156124f357600080fd5b505af1158015612507573d6000803e3d6000fd5b505050506040513d602081101561251d57600080fd5b50506001600160a01b038087169088167f3f207773c457c66e004ab34e2ce7ae1fcafc7b4c3286f63997c87428014219157f000000000000000000000000000000000000000000000000000000000000000061258a6fffffffffffffffffffffffffffffffff8a16613db8565b600003611c20866fffffffffffffffffffffffffffffffff16613db8565b630784ce0068010000000000000000611943565b60066020526000908152604090205481565b6103e86903b60000000000000000611943565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000836040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b0316148061268157506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b81906126ce5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b5060006126d9610fd9565b9050806126f1576126e985614158565b935050610fd0565b600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561275557600080fd5b505afa158015612769573d6000803e3d6000fd5b505050506040513d602081101561277f57600080fd5b5051600a54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156127eb57600080fd5b505afa1580156127ff573d6000803e3d6000fd5b505050506040513d602081101561281557600080fd5b50519050600061282983610cfe868b613a92565b9050600061283b85610cfe8585613a92565b90506fffffffffffffffffffffffffffffffff612858858b613c62565b111561286357600080fd5b6fffffffffffffffffffffffffffffffff6128886128818584613c62565b8790613c62565b111561289357600080fd5b600954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038e81166004830152306024830152604482018d9052915191909216916323b872dd9160648083019260209291908290030181600087803b15801561290857600080fd5b505af115801561291c573d6000803e3d6000fd5b505050506040513d602081101561293257600080fd5b505161293d57600080fd5b600a54604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038e8116600483015230602483015260448201859052915191909216916323b872dd9160648083019260209291908290030181600087803b1580156129b257600080fd5b505af11580156129c6573d6000803e3d6000fd5b505050506040513d60208110156129dc57600080fd5b50516129e757600080fd5b6129f18a8361437b565b896001600160a01b03168b6001600160a01b03167fd9b421596e3bc3caf78305bc0d270566916f58cd61b71c9c2a3d923a3ea3ea8b7f0000000000000000000000000000000000000000000000000000000000000000612a508d613db8565b600003612a5c86613db8565b600003612a6888613db8565b604080516fffffffffffffffffffffffffffffffff90951685526020850193909352838301919091526060830152519081900360800190a3509998505050505050505050565b6000836040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b03161480612b2a57506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b8190612b775760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b506000612b83856113d6565b600a54604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301523060248301526fffffffffffffffffffffffffffffffff8516604483015291519394509116916323b872dd916064808201926020929091908290030181600087803b158015612c0b57600080fd5b505af1158015612c1f573d6000803e3d6000fd5b505050506040513d6020811015612c3557600080fd5b5050600954604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301526fffffffffffffffffffffffffffffffff891660248301529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015612cb757600080fd5b505af1158015612ccb573d6000803e3d6000fd5b505050506040513d6020811015612ce157600080fd5b50506001600160a01b038087169088167f3f207773c457c66e004ab34e2ce7ae1fcafc7b4c3286f63997c87428014219157f0000000000000000000000000000000000000000000000000000000000000000612d4e6fffffffffffffffffffffffffffffffff8a16613db8565b6118f7866fffffffffffffffffffffffffffffffff16613db8565b42841015612dbe576040805162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015290519081900360640190fd5b6001600160a01b0380881660008181526008602090815260408083208054600180820190925582517f00000000000000000000000000000000000000000000000000000000000000008186015280840196909652958c166060860152608085018b905260a085019590955260c08085018a90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601527f000000000000000000000000000000000000000000000000000000000000000061010286015261012280860182905282518087039091018152610142860180845281519185019190912090859052610162860180845281905260ff8a166101828701526101a286018990526101c2860188905291519095919491926101e28084019391927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015612f32573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b03811615801590612f865750896001600160a01b0316816001600160a01b0316145b612fd7576040805162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015290519081900360640190fd5b612fe28a8a8a6139a6565b50505050505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6130233382613e2f565b50565b600080846040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b031614806130a357506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b81906130f05760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b5060006130fb610fd9565b905060008111613152576040805162461bcd60e51b815260206004820152601460248201527f506f6f6c3a20557365206d696e74206669727374000000000000000000000000604482015290519081900360640190fd5b600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156131b657600080fd5b505afa1580156131ca573d6000803e3d6000fd5b505050506040513d60208110156131e057600080fd5b5051600a54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561324c57600080fd5b505afa158015613260573d6000803e3d6000fd5b505050506040513d602081101561327657600080fd5b50519050600061328d6132888a613b76565b611fdc565b6fffffffffffffffffffffffffffffffff169050888210156132f6576040805162461bcd60e51b815260206004820152601660248201527f506f6f6c3a204e6f7420656e6f75676820667944616900000000000000000000604482015290519081900360640190fd5b600061330f613305848c613b34565b610cfe878d613a92565b905061332985610cfe836133238887613c62565b90613a92565b91506fffffffffffffffffffffffffffffffff6133468584613c62565b1115613399576040805162461bcd60e51b815260206004820152601260248201527f506f6f6c3a20546f6f206d756368204461690000000000000000000000000000604482015290519081900360640190fd5b600954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038f8116600483015230602483015260448201869052915191909216916323b872dd9160648083019260209291908290030181600087803b15801561340e57600080fd5b505af1158015613422573d6000803e3d6000fd5b505050506040513d602081101561343857600080fd5b505161348b576040805162461bcd60e51b815260206004820152601960248201527f506f6f6c3a20446169207472616e73666572206661696c656400000000000000604482015290519081900360640190fd5b6134958b8261437b565b8a6001600160a01b03168c6001600160a01b03167fd9b421596e3bc3caf78305bc0d270566916f58cd61b71c9c2a3d923a3ea3ea8b7f00000000000000000000000000000000000000000000000000000000000000006134f486613db8565b600003600061350287613db8565b604080516fffffffffffffffffffffffffffffffff90951685526020850193909352838301919091526060830152519081900360800190a3909b909a5098505050505050505050565b6009546001600160a01b031681565b600080846040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b031614806135d757506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b81906136245760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b50600061362f610fd9565b600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561369957600080fd5b505afa1580156136ad573d6000803e3d6000fd5b505050506040513d60208110156136c357600080fd5b5051600a54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051929350600092839283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561373357600080fd5b505afa158015613747573d6000803e3d6000fd5b505050506040513d602081101561375d57600080fd5b5051905061376f85610cfe8c87613a92565b925061377f85610cfe8c84613a92565b91505061378c8b8a613cbc565b600954604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038d81166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156137fb57600080fd5b505af115801561380f573d6000803e3d6000fd5b505050506040513d602081101561382557600080fd5b5050600a54604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038d81166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561389657600080fd5b505af11580156138aa573d6000803e3d6000fd5b505050506040513d60208110156138c057600080fd5b50506001600160a01b03808b16908c167fd9b421596e3bc3caf78305bc0d270566916f58cd61b71c9c2a3d923a3ea3ea8b7f000000000000000000000000000000000000000000000000000000000000000061391b86613db8565b61392486613db8565b61392d8f613db8565b604080516fffffffffffffffffffffffffffffffff90951685526020850193909352838301919091526000036060830152519081900360800190a3909a909950975050505050505050565b600760209081526000928352604080842090915290825290205460ff1681565b613023338261446b565b3390565b6001600160a01b0383166139eb5760405162461bcd60e51b81526004018080602001828103825260248152602001806146ee6024913960400191505060405180910390fd5b6001600160a01b038216613a305760405162461bcd60e51b81526004018080602001828103825260228152602001806146176022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600082613aa157506000610aa7565b82820282848281613aae57fe5b0414613aeb5760405162461bcd60e51b815260040180806020018281038252602181526020018061465f6021913960400191505060405180910390fd5b9392505050565b6000613aeb83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250614567565b6000613aeb83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061408f565b60006fffffffffffffffffffffffffffffffff821115613bdd576040805162461bcd60e51b815260206004820152601360248201527f506f6f6c3a2043617374206f766572666c6f7700000000000000000000000000604482015290519081900360640190fd5b5090565b6000826fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff161115613c5c576040805162461bcd60e51b815260206004820152601c60248201527f506f6f6c3a20667944616920726573657276657320746f6f206c6f7700000000604482015290519081900360640190fd5b50900390565b600082820183811015613aeb576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b038216613d015760405162461bcd60e51b81526004018080602001828103825260218152602001806146a86021913960400191505060405180910390fd5b613d0d826000836145cc565b613d4a816040518060600160405280602281526020016145f5602291396001600160a01b038516600090815260208190526040902054919061408f565b6001600160a01b038316600090815260208190526040902055600254613d709082613b34565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115613bdd576040805162461bcd60e51b815260206004820152601360248201527f506f6f6c3a2043617374206f766572666c6f7700000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380831660009081526007602090815260408083209385168352929052205460ff1615613eaa576040805162461bcd60e51b815260206004820152601c60248201527f44656c656761626c653a20416c72656164792064656c65676174656400000000604482015290519081900360640190fd5b6001600160a01b0380831660008181526007602090815260408083209486168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155825190815291517f045b0fef01772d2fbba53dbd38c9777806eac0865b00af43abcfbcaf50da92069281900390910190a35050565b6001600160a01b038316613f795760405162461bcd60e51b81526004018080602001828103825260258152602001806146c96025913960400191505060405180910390fd5b6001600160a01b038216613fbe5760405162461bcd60e51b81526004018080602001828103825260238152602001806145d26023913960400191505060405180910390fd5b613fc98383836145cc565b61400681604051806060016040528060268152602001614639602691396001600160a01b038616600090815260208190526040902054919061408f565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546140359082613c62565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156140e15760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b505050900390565b60008282016fffffffffffffffffffffffffffffffff8085169082161015613aeb576040805162461bcd60e51b815260206004820152601b60248201527f506f6f6c3a2044616920726573657276657320746f6f20686967680000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff1642106141e0576040805162461bcd60e51b815260206004820152600e60248201527f506f6f6c3a20546f6f206c617465000000000000000000000000000000000000604482015290519081900360640190fd5b6141e8610fd9565b1561423a576040805162461bcd60e51b815260206004820152601960248201527f506f6f6c3a20416c726561647920696e697469616c697a656400000000000000604482015290519081900360640190fd5b600954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810185905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b1580156142ad57600080fd5b505af11580156142c1573d6000803e3d6000fd5b505050506040513d60208110156142d757600080fd5b506142e49050338361437b565b33807fd9b421596e3bc3caf78305bc0d270566916f58cd61b71c9c2a3d923a3ea3ea8b7f000000000000000000000000000000000000000000000000000000000000000061433186613db8565b600003600061433f88613db8565b604080516fffffffffffffffffffffffffffffffff90951685526020850193909352838301919091526060830152519081900360800190a35090565b6001600160a01b0382166143d6576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6143e2600083836145cc565b6002546143ef9082613c62565b6002556001600160a01b0382166000908152602081905260409020546144159082613c62565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0380831660009081526007602090815260408083209385168352929052205460ff166144e5576040805162461bcd60e51b815260206004820152601e60248201527f44656c656761626c653a20416c726561647920756e64656c6567617465640000604482015290519081900360640190fd5b6001600160a01b03808316600081815260076020908152604080832094861680845294825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558051928352517f045b0fef01772d2fbba53dbd38c9777806eac0865b00af43abcfbcaf50da92069281900390910190a35050565b600081836145b65760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b5060008385816145c257fe5b0495945050505050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212209d016f1bae5b7efcfa822141e7c190b3ae17c5d2f32f20ceb07277720edbbdcc64736f6c634300070500338b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102de5760003560e01c806385561a3411610186578063c0bd65d7116100e3578063e71bdf4111610097578063f6b911bc11610071578063f6b911bc14610951578063f6bcbd3114610987578063fa352c00146109b5576102de565b8063e71bdf41146108d4578063eab5cd2c146108fa578063f4b9fa7514610949576102de565b8063cc5783d3116100c8578063cc5783d31461080c578063d505accf14610855578063dd62ed3e146108a6576102de565b8063c0bd65d7146107ce578063c6c3bbe6146107d6576102de565b8063a9059cbb1161013a578063b4f40c611161011f578063b4f40c6114610798578063b5d832fe146107a0578063bdd8a366146107c6576102de565b8063a9059cbb14610723578063b26be9221461074f576102de565b806398ba4aec1161016b57806398ba4aec146106995780639ac95875146106c8578063a457c2d7146106f7576102de565b806385561a341461066257806395d89b4114610691576102de565b80633644e5151161023f57806360561e05116101f35780637543e39c116101cd5780637543e39c146105eb57806377d739f3146106345780637ecebe001461063c576102de565b806360561e051461055d5780636970a924146105a657806370a08231146105c5576102de565b8063459e414f11610224578063459e414f1461051e5780634e20e952146105265780635f4d07dc14610555576102de565b80633644e515146104ea57806339509351146104f2576102de565b8063204f83f911610296578063284f44441161027b578063284f4444146104a057806330adf81f146104c4578063313ce567146104cc576102de565b8063204f83f91461043d57806323b872dd1461046a576102de565b806312c63d85116102c757806312c63d85146103a057806318160ddd146103e85780631a28ff05146103f0576102de565b806306fdde03146102e3578063095ea7b314610360575b600080fd5b6102eb6109db565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032557818101518382015260200161030d565b50505050905090810190601f1680156103525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61038c6004803603604081101561037657600080fd5b506001600160a01b038135169060200135610a8f565b604080519115158252519081900360200190f35b6103d6600480360360608110156103b657600080fd5b506001600160a01b03813581169160208101359091169060400135610aad565b60408051918252519081900360200190f35b6103d6610fd9565b61043b600480360360c081101561040657600080fd5b506001600160a01b03813581169160208101359091169060408101359060ff6060820135169060808101359060a00135610fdf565b005b610445611259565b604080516fffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61038c6004803603606081101561048057600080fd5b506001600160a01b0381358116916020810135909116906040013561127d565b6104a8611304565b604080516001600160a01b039092168252519081900360200190f35b6103d6611313565b6104d4611337565b6040805160ff9092168252519081900360200190f35b6103d6611340565b61038c6004803603604081101561050857600080fd5b506001600160a01b038135169060200135611364565b6103d66113b2565b6104456004803603602081101561053c57600080fd5b50356fffffffffffffffffffffffffffffffff166113d6565b610445611591565b6104456004803603606081101561057357600080fd5b5080356001600160a01b0390811691602081013590911690604001356fffffffffffffffffffffffffffffffff1661163c565b6105ae611934565b60408051600f9290920b8252519081900360200190f35b6103d6600480360360208110156105db57600080fd5b50356001600160a01b0316611947565b6104456004803603606081101561060157600080fd5b5080356001600160a01b0390811691602081013590911690604001356fffffffffffffffffffffffffffffffff16611962565b610445611c5a565b6103d66004803603602081101561065257600080fd5b50356001600160a01b0316611cf6565b6104456004803603602081101561067857600080fd5b50356fffffffffffffffffffffffffffffffff16611d08565b6102eb611f5d565b610445600480360360208110156106af57600080fd5b50356fffffffffffffffffffffffffffffffff16611fdc565b610445600480360360208110156106de57600080fd5b50356fffffffffffffffffffffffffffffffff166121c4565b61038c6004803603604081101561070d57600080fd5b506001600160a01b03813516906020013561226e565b61038c6004803603604081101561073957600080fd5b506001600160a01b0381351690602001356122d6565b6104456004803603606081101561076557600080fd5b5080356001600160a01b0390811691602081013590911690604001356fffffffffffffffffffffffffffffffff166122ea565b6105ae6125a8565b6103d6600480360360208110156107b657600080fd5b50356001600160a01b03166125bc565b6105ae6125ce565b6103d66125e1565b6103d6600480360360608110156107ec57600080fd5b506001600160a01b03813581169160208101359091169060400135612605565b6104456004803603606081101561082257600080fd5b5080356001600160a01b0390811691602081013590911690604001356fffffffffffffffffffffffffffffffff16612aae565b61043b600480360360e081101561086b57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135612d69565b6103d6600480360360408110156108bc57600080fd5b506001600160a01b0381358116916020013516612fee565b61043b600480360360208110156108ea57600080fd5b50356001600160a01b0316613019565b6109306004803603606081101561091057600080fd5b506001600160a01b03813581169160208101359091169060400135613026565b6040805192835260208301919091528051918290030190f35b6104a861354b565b6109306004803603606081101561096757600080fd5b506001600160a01b0381358116916020810135909116906040013561355a565b61038c6004803603604081101561099d57600080fd5b506001600160a01b0381358116916020013516613978565b61043b600480360360208110156109cb57600080fd5b50356001600160a01b0316613998565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a855780601f10610a5a57610100808354040283529160200191610a85565b820191906000526020600020905b815481529060010190602001808311610a6857829003601f168201915b5050505050905090565b6000610aa3610a9c6139a2565b84846139a6565b5060015b92915050565b6000836040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b03161480610b2957506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b8190610bb35760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b78578181015183820152602001610b60565b50505050905090810190601f168015610ba55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000610bbe610fd9565b600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610c2857600080fd5b505afa158015610c3c573d6000803e3d6000fd5b505050506040513d6020811015610c5257600080fd5b5051600a54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051929350600092839283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015610cc257600080fd5b505afa158015610cd6573d6000803e3d6000fd5b505050506040513d6020811015610cec57600080fd5b50519050610d0485610cfe8b87613a92565b90613af2565b9250610d1485610cfe8b84613a92565b9150610e84905073__$2849603f80b5b09a5f0b9fd2ec8a219afa$__63e5cd1e73610d47610d428787613b34565b613b76565b610d60610d52611591565b610d5b87613b76565b613be1565b610d6986613b76565b610da6427f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff1603613b76565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526fffffffffffffffffffffffffffffffff958616600482015293851660248501529184166044840152909216606482015264220c523d72608482015268010d79435e50d7943560a4820152905160c4808301926020929190829003018186803b158015610e3f57600080fd5b505af4158015610e53573d6000803e3d6000fd5b505050506040513d6020811015610e6957600080fd5b505183906fffffffffffffffffffffffffffffffff16613c62565b9150610e908a89613cbc565b600954604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038c81166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015610eff57600080fd5b505af1158015610f13573d6000803e3d6000fd5b505050506040513d6020811015610f2957600080fd5b50506001600160a01b03808a16908b167fd9b421596e3bc3caf78305bc0d270566916f58cd61b71c9c2a3d923a3ea3ea8b7f0000000000000000000000000000000000000000000000000000000000000000610f8486613db8565b6000610f8f8e613db8565b604080516fffffffffffffffffffffffffffffffff90951685526020850193909352838301919091526000036060830152519081900360800190a350945050505b50509392505050565b60025490565b42841015611034576040805162461bcd60e51b815260206004820152601c60248201527f44656c656761626c653a205369676e6174757265206578706972656400000000604482015290519081900360640190fd5b6001600160a01b0380871660008181526006602090815260408083208054600180820190925582517f00000000000000000000000000000000000000000000000000000000000000008186015280840196909652958b166060860152608085019590955260a08085018a90528151808603909101815260c0850182528051908301207f190100000000000000000000000000000000000000000000000000000000000060e08601527f000000000000000000000000000000000000000000000000000000000000000060e286015261010280860182905282518087039091018152610122860180845281519185019190912090859052610142860180845281905260ff8a1661016287015261018286018990526101a2860188905291519095919491926101c28084019391927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa15801561119f573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116158015906111f35750886001600160a01b0316816001600160a01b0316145b611244576040805162461bcd60e51b815260206004820152601c60248201527f44656c656761626c653a20496e76616c6964207369676e617475726500000000604482015290519081900360640190fd5b61124e8989613e2f565b505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061128a848484613f34565b6112fa846112966139a2565b6112f585604051806060016040528060288152602001614680602891396001600160a01b038a166000908152600160205260408120906112d46139a2565b6001600160a01b03168152602081019190915260400160002054919061408f565b6139a6565b5060019392505050565b600a546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610aa36113716139a2565b846112f585600160006113826139a2565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490613c62565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16421061145e576040805162461bcd60e51b815260206004820152600e60248201527f506f6f6c3a20546f6f206c617465000000000000000000000000000000000000604482015290519081900360640190fd5b73__$2849603f80b5b09a5f0b9fd2ec8a219afa$__63420df2f4611480611c5a565b611488611591565b856114c6427f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff1603613b76565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526fffffffffffffffffffffffffffffffff958616600482015293851660248501529184166044840152909216606482015264220c523d72608482015268010d79435e50d7943560a4820152905160c4808301926020929190829003018186803b15801561155f57600080fd5b505af4158015611573573d6000803e3d6000fd5b505050506040513d602081101561158957600080fd5b505192915050565b6000611637610d426115a1610fd9565b600a54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561160557600080fd5b505afa158015611619573d6000803e3d6000fd5b505050506040513d602081101561162f57600080fd5b505190613c62565b905090565b6000836040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b031614806116b857506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b81906117055760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b506000611711856121c4565b600a54604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301523060248301526fffffffffffffffffffffffffffffffff8a16604483015291519394509116916323b872dd916064808201926020929091908290030181600087803b15801561179957600080fd5b505af11580156117ad573d6000803e3d6000fd5b505050506040513d60208110156117c357600080fd5b5050600954604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301526fffffffffffffffffffffffffffffffff851660248301529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561184557600080fd5b505af1158015611859573d6000803e3d6000fd5b505050506040513d602081101561186f57600080fd5b50506001600160a01b038087169088167f3f207773c457c66e004ab34e2ce7ae1fcafc7b4c3286f63997c87428014219157f00000000000000000000000000000000000000000000000000000000000000006118dc6fffffffffffffffffffffffffffffffff8616613db8565b6118f78a6fffffffffffffffffffffffffffffffff16613db8565b604080516fffffffffffffffffffffffffffffffff9094168452602084019290925260000382820152519081900360600190a39695505050505050565b6103b66903e800000000000000005b0481565b6001600160a01b031660009081526020819052604090205490565b6000836040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b031614806119de57506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b8190611a2b5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b506000611a3785611fdc565b600954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301523060248301526fffffffffffffffffffffffffffffffff8516604483015291519394509116916323b872dd916064808201926020929091908290030181600087803b158015611abf57600080fd5b505af1158015611ad3573d6000803e3d6000fd5b505050506040513d6020811015611ae957600080fd5b5050600a54604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301526fffffffffffffffffffffffffffffffff891660248301529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015611b6b57600080fd5b505af1158015611b7f573d6000803e3d6000fd5b505050506040513d6020811015611b9557600080fd5b50506001600160a01b038087169088167f3f207773c457c66e004ab34e2ce7ae1fcafc7b4c3286f63997c87428014219157f0000000000000000000000000000000000000000000000000000000000000000611c026fffffffffffffffffffffffffffffffff8616613db8565b600003611c208a6fffffffffffffffffffffffffffffffff16613db8565b604080516fffffffffffffffffffffffffffffffff9094168452602084019290925282820152519081900360600190a39695505050505050565b600954604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092611637926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015611cc557600080fd5b505afa158015611cd9573d6000803e3d6000fd5b505050506040513d6020811015611cef57600080fd5b5051613b76565b60086020526000908152604090205481565b60007f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff164210611d90576040805162461bcd60e51b815260206004820152600e60248201527f506f6f6c3a20546f6f206c617465000000000000000000000000000000000000604482015290519081900360640190fd5b6000611d9a611c5a565b90506000611da6611591565b9050600073__$2849603f80b5b09a5f0b9fd2ec8a219afa$__631d385c1f848488611e04427f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff1603613b76565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526fffffffffffffffffffffffffffffffff958616600482015293851660248501529184166044840152909216606482015264220c523d72608482015267f33333333333333360a4820152905160c4808301926020929190829003018186803b158015611e9c57600080fd5b505af4158015611eb0573d6000803e3d6000fd5b505050506040513d6020811015611ec657600080fd5b50519050611ed483866140e9565b6fffffffffffffffffffffffffffffffff16611ef08383613be1565b6fffffffffffffffffffffffffffffffff161015611f55576040805162461bcd60e51b815260206004820152601c60248201527f506f6f6c3a20667944616920726573657276657320746f6f206c6f7700000000604482015290519081900360640190fd5b949350505050565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a855780601f10610a5a57610100808354040283529160200191610a85565b60007f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff164210612064576040805162461bcd60e51b815260206004820152600e60248201527f506f6f6c3a20546f6f206c617465000000000000000000000000000000000000604482015290519081900360640190fd5b600061206e611c5a565b9050600061207a611591565b9050600073__$2849603f80b5b09a5f0b9fd2ec8a219afa$__63d536aadd8484886120d8427f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff1603613b76565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526fffffffffffffffffffffffffffffffff958616600482015293851660248501529184166044840152909216606482015264220c523d72608482015267f33333333333333360a4820152905160c4808301926020929190829003018186803b15801561217057600080fd5b505af4158015612184573d6000803e3d6000fd5b505050506040513d602081101561219a57600080fd5b505190506121a883826140e9565b6fffffffffffffffffffffffffffffffff16611ef08387613be1565b60007f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff16421061224c576040805162461bcd60e51b815260206004820152600e60248201527f506f6f6c3a20546f6f206c617465000000000000000000000000000000000000604482015290519081900360640190fd5b73__$2849603f80b5b09a5f0b9fd2ec8a219afa$__63e5cd1e73611480611c5a565b6000610aa361227b6139a2565b846112f58560405180606001604052806025815260200161471260259139600160006122a56139a2565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919061408f565b6000610aa36122e36139a2565b8484613f34565b6000836040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b0316148061236657506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b81906123b35760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b5060006123bf85611d08565b600954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301523060248301526fffffffffffffffffffffffffffffffff8a16604483015291519394509116916323b872dd916064808201926020929091908290030181600087803b15801561244757600080fd5b505af115801561245b573d6000803e3d6000fd5b505050506040513d602081101561247157600080fd5b5050600a54604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301526fffffffffffffffffffffffffffffffff851660248301529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156124f357600080fd5b505af1158015612507573d6000803e3d6000fd5b505050506040513d602081101561251d57600080fd5b50506001600160a01b038087169088167f3f207773c457c66e004ab34e2ce7ae1fcafc7b4c3286f63997c87428014219157f000000000000000000000000000000000000000000000000000000000000000061258a6fffffffffffffffffffffffffffffffff8a16613db8565b600003611c20866fffffffffffffffffffffffffffffffff16613db8565b630784ce0068010000000000000000611943565b60066020526000908152604090205481565b6103e86903b60000000000000000611943565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000836040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b0316148061268157506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b81906126ce5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b5060006126d9610fd9565b9050806126f1576126e985614158565b935050610fd0565b600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561275557600080fd5b505afa158015612769573d6000803e3d6000fd5b505050506040513d602081101561277f57600080fd5b5051600a54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156127eb57600080fd5b505afa1580156127ff573d6000803e3d6000fd5b505050506040513d602081101561281557600080fd5b50519050600061282983610cfe868b613a92565b9050600061283b85610cfe8585613a92565b90506fffffffffffffffffffffffffffffffff612858858b613c62565b111561286357600080fd5b6fffffffffffffffffffffffffffffffff6128886128818584613c62565b8790613c62565b111561289357600080fd5b600954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038e81166004830152306024830152604482018d9052915191909216916323b872dd9160648083019260209291908290030181600087803b15801561290857600080fd5b505af115801561291c573d6000803e3d6000fd5b505050506040513d602081101561293257600080fd5b505161293d57600080fd5b600a54604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038e8116600483015230602483015260448201859052915191909216916323b872dd9160648083019260209291908290030181600087803b1580156129b257600080fd5b505af11580156129c6573d6000803e3d6000fd5b505050506040513d60208110156129dc57600080fd5b50516129e757600080fd5b6129f18a8361437b565b896001600160a01b03168b6001600160a01b03167fd9b421596e3bc3caf78305bc0d270566916f58cd61b71c9c2a3d923a3ea3ea8b7f0000000000000000000000000000000000000000000000000000000000000000612a508d613db8565b600003612a5c86613db8565b600003612a6888613db8565b604080516fffffffffffffffffffffffffffffffff90951685526020850193909352838301919091526060830152519081900360800190a3509998505050505050505050565b6000836040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b03161480612b2a57506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b8190612b775760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b506000612b83856113d6565b600a54604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301523060248301526fffffffffffffffffffffffffffffffff8516604483015291519394509116916323b872dd916064808201926020929091908290030181600087803b158015612c0b57600080fd5b505af1158015612c1f573d6000803e3d6000fd5b505050506040513d6020811015612c3557600080fd5b5050600954604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301526fffffffffffffffffffffffffffffffff891660248301529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015612cb757600080fd5b505af1158015612ccb573d6000803e3d6000fd5b505050506040513d6020811015612ce157600080fd5b50506001600160a01b038087169088167f3f207773c457c66e004ab34e2ce7ae1fcafc7b4c3286f63997c87428014219157f0000000000000000000000000000000000000000000000000000000000000000612d4e6fffffffffffffffffffffffffffffffff8a16613db8565b6118f7866fffffffffffffffffffffffffffffffff16613db8565b42841015612dbe576040805162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015290519081900360640190fd5b6001600160a01b0380881660008181526008602090815260408083208054600180820190925582517f00000000000000000000000000000000000000000000000000000000000000008186015280840196909652958c166060860152608085018b905260a085019590955260c08085018a90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601527f000000000000000000000000000000000000000000000000000000000000000061010286015261012280860182905282518087039091018152610142860180845281519185019190912090859052610162860180845281905260ff8a166101828701526101a286018990526101c2860188905291519095919491926101e28084019391927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015612f32573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b03811615801590612f865750896001600160a01b0316816001600160a01b0316145b612fd7576040805162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015290519081900360640190fd5b612fe28a8a8a6139a6565b50505050505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6130233382613e2f565b50565b600080846040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b031614806130a357506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b81906130f05760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b5060006130fb610fd9565b905060008111613152576040805162461bcd60e51b815260206004820152601460248201527f506f6f6c3a20557365206d696e74206669727374000000000000000000000000604482015290519081900360640190fd5b600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156131b657600080fd5b505afa1580156131ca573d6000803e3d6000fd5b505050506040513d60208110156131e057600080fd5b5051600a54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561324c57600080fd5b505afa158015613260573d6000803e3d6000fd5b505050506040513d602081101561327657600080fd5b50519050600061328d6132888a613b76565b611fdc565b6fffffffffffffffffffffffffffffffff169050888210156132f6576040805162461bcd60e51b815260206004820152601660248201527f506f6f6c3a204e6f7420656e6f75676820667944616900000000000000000000604482015290519081900360640190fd5b600061330f613305848c613b34565b610cfe878d613a92565b905061332985610cfe836133238887613c62565b90613a92565b91506fffffffffffffffffffffffffffffffff6133468584613c62565b1115613399576040805162461bcd60e51b815260206004820152601260248201527f506f6f6c3a20546f6f206d756368204461690000000000000000000000000000604482015290519081900360640190fd5b600954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038f8116600483015230602483015260448201869052915191909216916323b872dd9160648083019260209291908290030181600087803b15801561340e57600080fd5b505af1158015613422573d6000803e3d6000fd5b505050506040513d602081101561343857600080fd5b505161348b576040805162461bcd60e51b815260206004820152601960248201527f506f6f6c3a20446169207472616e73666572206661696c656400000000000000604482015290519081900360640190fd5b6134958b8261437b565b8a6001600160a01b03168c6001600160a01b03167fd9b421596e3bc3caf78305bc0d270566916f58cd61b71c9c2a3d923a3ea3ea8b7f00000000000000000000000000000000000000000000000000000000000000006134f486613db8565b600003600061350287613db8565b604080516fffffffffffffffffffffffffffffffff90951685526020850193909352838301919091526060830152519081900360800190a3909b909a5098505050505050505050565b6009546001600160a01b031681565b600080846040518060400160405280601d81526020017f506f6f6c3a204f6e6c7920486f6c646572204f722044656c6567617465000000815250816001600160a01b0316336001600160a01b031614806135d757506001600160a01b038216600090815260076020908152604080832033845290915290205460ff165b81906136245760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b50600061362f610fd9565b600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561369957600080fd5b505afa1580156136ad573d6000803e3d6000fd5b505050506040513d60208110156136c357600080fd5b5051600a54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051929350600092839283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561373357600080fd5b505afa158015613747573d6000803e3d6000fd5b505050506040513d602081101561375d57600080fd5b5051905061376f85610cfe8c87613a92565b925061377f85610cfe8c84613a92565b91505061378c8b8a613cbc565b600954604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038d81166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156137fb57600080fd5b505af115801561380f573d6000803e3d6000fd5b505050506040513d602081101561382557600080fd5b5050600a54604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038d81166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561389657600080fd5b505af11580156138aa573d6000803e3d6000fd5b505050506040513d60208110156138c057600080fd5b50506001600160a01b03808b16908c167fd9b421596e3bc3caf78305bc0d270566916f58cd61b71c9c2a3d923a3ea3ea8b7f000000000000000000000000000000000000000000000000000000000000000061391b86613db8565b61392486613db8565b61392d8f613db8565b604080516fffffffffffffffffffffffffffffffff90951685526020850193909352838301919091526000036060830152519081900360800190a3909a909950975050505050505050565b600760209081526000928352604080842090915290825290205460ff1681565b613023338261446b565b3390565b6001600160a01b0383166139eb5760405162461bcd60e51b81526004018080602001828103825260248152602001806146ee6024913960400191505060405180910390fd5b6001600160a01b038216613a305760405162461bcd60e51b81526004018080602001828103825260228152602001806146176022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600082613aa157506000610aa7565b82820282848281613aae57fe5b0414613aeb5760405162461bcd60e51b815260040180806020018281038252602181526020018061465f6021913960400191505060405180910390fd5b9392505050565b6000613aeb83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250614567565b6000613aeb83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061408f565b60006fffffffffffffffffffffffffffffffff821115613bdd576040805162461bcd60e51b815260206004820152601360248201527f506f6f6c3a2043617374206f766572666c6f7700000000000000000000000000604482015290519081900360640190fd5b5090565b6000826fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff161115613c5c576040805162461bcd60e51b815260206004820152601c60248201527f506f6f6c3a20667944616920726573657276657320746f6f206c6f7700000000604482015290519081900360640190fd5b50900390565b600082820183811015613aeb576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b038216613d015760405162461bcd60e51b81526004018080602001828103825260218152602001806146a86021913960400191505060405180910390fd5b613d0d826000836145cc565b613d4a816040518060600160405280602281526020016145f5602291396001600160a01b038516600090815260208190526040902054919061408f565b6001600160a01b038316600090815260208190526040902055600254613d709082613b34565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115613bdd576040805162461bcd60e51b815260206004820152601360248201527f506f6f6c3a2043617374206f766572666c6f7700000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380831660009081526007602090815260408083209385168352929052205460ff1615613eaa576040805162461bcd60e51b815260206004820152601c60248201527f44656c656761626c653a20416c72656164792064656c65676174656400000000604482015290519081900360640190fd5b6001600160a01b0380831660008181526007602090815260408083209486168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155825190815291517f045b0fef01772d2fbba53dbd38c9777806eac0865b00af43abcfbcaf50da92069281900390910190a35050565b6001600160a01b038316613f795760405162461bcd60e51b81526004018080602001828103825260258152602001806146c96025913960400191505060405180910390fd5b6001600160a01b038216613fbe5760405162461bcd60e51b81526004018080602001828103825260238152602001806145d26023913960400191505060405180910390fd5b613fc98383836145cc565b61400681604051806060016040528060268152602001614639602691396001600160a01b038616600090815260208190526040902054919061408f565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546140359082613c62565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156140e15760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b505050900390565b60008282016fffffffffffffffffffffffffffffffff8085169082161015613aeb576040805162461bcd60e51b815260206004820152601b60248201527f506f6f6c3a2044616920726573657276657320746f6f20686967680000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff1642106141e0576040805162461bcd60e51b815260206004820152600e60248201527f506f6f6c3a20546f6f206c617465000000000000000000000000000000000000604482015290519081900360640190fd5b6141e8610fd9565b1561423a576040805162461bcd60e51b815260206004820152601960248201527f506f6f6c3a20416c726561647920696e697469616c697a656400000000000000604482015290519081900360640190fd5b600954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810185905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b1580156142ad57600080fd5b505af11580156142c1573d6000803e3d6000fd5b505050506040513d60208110156142d757600080fd5b506142e49050338361437b565b33807fd9b421596e3bc3caf78305bc0d270566916f58cd61b71c9c2a3d923a3ea3ea8b7f000000000000000000000000000000000000000000000000000000000000000061433186613db8565b600003600061433f88613db8565b604080516fffffffffffffffffffffffffffffffff90951685526020850193909352838301919091526060830152519081900360800190a35090565b6001600160a01b0382166143d6576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6143e2600083836145cc565b6002546143ef9082613c62565b6002556001600160a01b0382166000908152602081905260409020546144159082613c62565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0380831660009081526007602090815260408083209385168352929052205460ff166144e5576040805162461bcd60e51b815260206004820152601e60248201527f44656c656761626c653a20416c726561647920756e64656c6567617465640000604482015290519081900360640190fd5b6001600160a01b03808316600081815260076020908152604080832094861680845294825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558051928352517f045b0fef01772d2fbba53dbd38c9777806eac0865b00af43abcfbcaf50da92069281900390910190a35050565b600081836145b65760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b78578181015183820152602001610b60565b5060008385816145c257fe5b0495945050505050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212209d016f1bae5b7efcfa822141e7c190b3ae17c5d2f32f20ceb07277720edbbdcc64736f6c63430007050033",
  "libraries": {
    "YieldMath": "0xb8c0D4Ee9380e476F409f496175D9082E6e1E58C"
  },
  "devdoc": {
    "details": "The Pool contract exchanges Dai for fyDai at a price defined by a specific formula.",
    "kind": "dev",
    "methods": {
      "addDelegate(address)": {
        "details": "Enable a delegate to act on the behalf of caller"
      },
      "addDelegateBySignature(address,address,uint256,uint8,bytes32,bytes32)": {
        "details": "Add a delegate through an encoded signature"
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(address,address,uint256)": {
        "details": "Burn liquidity tokens in exchange for dai and fyDai. The liquidity provider needs to have called `pool.approve`.",
        "params": {
          "from": "Wallet providing the liquidity tokens. Must have approved the operator with `pool.addDelegate(operator)`.",
          "to": "Wallet receiving the dai and fyDai.",
          "tokensBurned": "Amount of liquidity tokens being burned."
        },
        "returns": {
          "_0": "The amount of reserve tokens returned (daiTokens, fyDaiTokens)."
        }
      },
      "burnForDai(address,address,uint256)": {
        "details": "Burn liquidity tokens in exchange for dai. The liquidity provider needs to have called `pool.approve`.",
        "params": {
          "from": "Wallet providing the liquidity tokens. Must have approved the operator with `pool.addDelegate(operator)`.",
          "to": "Wallet receiving the dai and fyDai.",
          "tokensBurned": "Amount of liquidity tokens being burned."
        },
        "returns": {
          "_0": "The amount of dai tokens returned."
        }
      },
      "buyDai(address,address,uint128)": {
        "details": "Buy Dai for fyDai The trader needs to have called `fyDai.approve`",
        "params": {
          "daiOut": "Amount of dai being bought that will be deposited in `to` wallet",
          "from": "Wallet providing the fyDai being sold. Must have approved the operator with `pool.addDelegate(operator)`.",
          "to": "Wallet receiving the dai being bought"
        },
        "returns": {
          "_0": "Amount of fyDai that will be taken from `from` wallet"
        }
      },
      "buyDaiPreview(uint128)": {
        "details": "Returns how much fyDai would be required to buy `daiOut` dai.",
        "params": {
          "daiOut": "Amount of dai hypothetically desired."
        },
        "returns": {
          "_0": "Amount of fyDai hypothetically required."
        }
      },
      "buyFYDai(address,address,uint128)": {
        "details": "Buy fyDai for dai The trader needs to have called `dai.approve`",
        "params": {
          "from": "Wallet providing the dai being sold. Must have approved the operator with `pool.addDelegate(operator)`.",
          "fyDaiOut": "Amount of fyDai being bought that will be deposited in `to` wallet",
          "to": "Wallet receiving the fyDai being bought"
        },
        "returns": {
          "_0": "Amount of dai that will be taken from `from` wallet"
        }
      },
      "buyFYDaiPreview(uint128)": {
        "details": "Returns how much dai would be required to buy `fyDaiOut` fyDai.",
        "params": {
          "fyDaiOut": "Amount of fyDai hypothetically desired."
        },
        "returns": {
          "_0": "Amount of Dai hypothetically required."
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getDaiReserves()": {
        "details": "Returns the Dai reserves"
      },
      "getFYDaiReserves()": {
        "details": "Returns the \"virtual\" fyDai reserves"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mint(address,address,uint256)": {
        "details": "Mint liquidity tokens in exchange for adding dai and fyDai The liquidity provider needs to have called `dai.approve` and `fyDai.approve`.",
        "params": {
          "daiOffered": "Amount of `dai` being invested, an appropriate amount of `fyDai` to be invested alongside will be calculated and taken by this function from the caller.",
          "from": "Wallet providing the dai and fyDai. Must have approved the operator with `pool.addDelegate(operator)`.",
          "to": "Wallet receiving the minted liquidity tokens."
        },
        "returns": {
          "_0": "The amount of liquidity tokens minted."
        }
      },
      "mintWithDai(address,address,uint256)": {
        "details": "Mint liquidity tokens in exchange for adding only dai The liquidity provider needs to have called `dai.approve`.",
        "params": {
          "from": "Wallet providing the dai and fyDai. Must have approved the operator with `pool.addDelegate(operator)`.",
          "fyDaiToBuy": "Amount of `fyDai` being bought in the Pool, from this we calculate how much Dai it will be taken in.",
          "to": "Wallet receiving the minted liquidity tokens."
        },
        "returns": {
          "_0": "The amount of liquidity tokens minted."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC2612-permit}. In cases where the free option is not a concern, deadline can simply be set to uint(-1), so it should be seen as an optional parameter"
      },
      "revokeDelegate(address)": {
        "details": "Stop a delegate from acting on the behalf of caller"
      },
      "sellDai(address,address,uint128)": {
        "details": "Sell Dai for fyDai The trader needs to have called `dai.approve`",
        "params": {
          "daiIn": "Amount of dai being sold that will be taken from the user's wallet",
          "from": "Wallet providing the dai being sold. Must have approved the operator with `pool.addDelegate(operator)`.",
          "to": "Wallet receiving the fyDai being bought"
        },
        "returns": {
          "_0": "Amount of fyDai that will be deposited on `to` wallet"
        }
      },
      "sellDaiPreview(uint128)": {
        "details": "Returns how much fyDai would be obtained by selling `daiIn` dai",
        "params": {
          "daiIn": "Amount of dai hypothetically sold."
        },
        "returns": {
          "_0": "Amount of fyDai hypothetically bought."
        }
      },
      "sellFYDai(address,address,uint128)": {
        "details": "Sell fyDai for Dai The trader needs to have called `fyDai.approve`",
        "params": {
          "from": "Wallet providing the fyDai being sold. Must have approved the operator with `pool.addDelegate(operator)`.",
          "fyDaiIn": "Amount of fyDai being sold that will be taken from the user's wallet",
          "to": "Wallet receiving the dai being bought"
        },
        "returns": {
          "_0": "Amount of dai that will be deposited on `to` wallet"
        }
      },
      "sellFYDaiPreview(uint128)": {
        "details": "Returns how much dai would be obtained by selling `fyDaiIn` fyDai.",
        "params": {
          "fyDaiIn": "Amount of fyDai hypothetically sold."
        },
        "returns": {
          "_0": "Amount of Dai hypothetically bought."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 235,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 241,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 243,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 245,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 247,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 249,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 7814,
        "contract": "contracts/Pool.sol:Pool",
        "label": "signatureCount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7820,
        "contract": "contracts/Pool.sol:Pool",
        "label": "delegated",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8068,
        "contract": "contracts/Pool.sol:Pool",
        "label": "nonces",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3550,
        "contract": "contracts/Pool.sol:Pool",
        "label": "dai",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)799"
      },
      {
        "astId": 3553,
        "contract": "contracts/Pool.sol:Pool",
        "label": "fyDai",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IFYDai)8438"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)799": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFYDai)8438": {
        "encoding": "inplace",
        "label": "contract IFYDai",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}